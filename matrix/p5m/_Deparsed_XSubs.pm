#
#
# DO NOT EDIT THIS FILE, IT'S AUTOGENERATED FROM XS MODULES AND WILL BE UPDATED AUTOMATICALLY
#
#
package Algorithm::Diff::XS {
sub DESTROY;
sub _CREATE_;
sub _core_loop_;
}
package Array::RefElem {
sub av_push(\@$) ;
sub av_store(\@$$) ;
sub hv_store(\%$$) ;
}
package Async::Interrupt {
sub DESTROY;
sub _alloc;
sub block;
sub c_var;
sub handle;
sub pipe_autodrain;
sub pipe_disable;
sub pipe_drain;
sub pipe_enable;
sub pipe_fileno;
sub post_fork;
sub scope_block;
sub scope_block_func;
sub sig2name($) ;
sub sig2num($) ;
sub signal;
sub signal_func;
sub signal_hysteresis;
sub unblock;
}
package Async::Interrupt::EventPipe {
sub DESTROY;
sub drain;
sub drain_func;
sub fileno;
sub fileno_r;
sub fileno_w;
sub filenos;
sub new;
sub renew;
sub signal;
sub signal_func;
sub type;
sub wait;
}
package B {
sub CLONE;
sub address;
sub amagic_generation;
sub begin_av;
sub cast_I32;
sub cchar;
sub check_av;
sub comppadlist;
sub cstring;
sub curstash;
sub defstash;
sub diehook;
sub dowarn;
sub end_av;
sub formfeed;
sub hash;
sub inc_gv;
sub init_av;
sub main_cv;
sub main_root;
sub main_start;
sub minus_c;
sub opnumber;
sub perlstring;
sub ppname;
sub regex_padav;
sub save_BEGINs;
sub sub_generation;
sub sv_no;
sub sv_undef;
sub sv_yes;
sub svref_2object;
sub threadsv_names;
sub unitcheck_av;
sub walkoptree;
sub walkoptree_debug;
sub warnhook;
}
package B::AV {
sub ARRAY;
sub ARRAYelt;
sub FILL;
sub MAX;
}
package B::BINOP {
sub last;
}
package B::BM {
sub PREVIOUS;
sub RARE;
sub TABLE;
sub USEFUL;
}
package B::COP {
sub arybase;
sub cop_seq;
sub file;
sub filegv;
sub hints;
sub hints_hash;
sub io;
sub label;
sub line;
sub stash;
sub stashoff;
sub stashpv;
sub warnings;
}
package B::COW {
sub can_cow;
sub cowrefcnt;
sub cowrefcnt_max;
sub is_cow;
}
package B::CV {
sub CONST;
sub CvFLAGS;
sub DEPTH;
sub FILE;
sub GV;
sub HSCXT;
sub NAME_HEK;
sub OUTSIDE;
sub OUTSIDE_SEQ;
sub PADLIST;
sub ROOT;
sub START;
sub STASH;
sub XSUB;
sub XSUBANY;
sub const_sv;
}
package B::Debug {
sub cstring;
sub main_root;
sub main_start;
sub sv_undef;
sub walkoptree;
}
package B::Deparse {
sub main_cv;
sub main_root;
sub main_start;
sub opnumber;
sub perlstring;
sub svref_2object;
}
package B::FM {
sub LINES;
}
package B::GV {
sub AV;
sub CV;
sub CVGEN;
sub EGV;
sub FILE;
sub FILEGV;
sub FORM;
sub GP;
sub GPFLAGS;
sub GvFLAGS;
sub GvREFCNT;
sub HV;
sub IO;
sub LINE;
sub NAME;
sub STASH;
sub SV;
sub isGV_with_GP;
sub is_empty;
}
package B::HE {
sub HASH;
sub SVKEY_force;
sub VAL;
}
package B::HV {
sub ARRAY;
sub FILL;
sub KEYS;
sub MAX;
sub NAME;
sub RITER;
}
package B::IO {
sub BOTTOM_GV;
sub BOTTOM_NAME;
sub FMT_GV;
sub FMT_NAME;
sub IoFLAGS;
sub IoTYPE;
sub IsSTD;
sub LINES;
sub LINES_LEFT;
sub PAGE;
sub PAGE_LEN;
sub TOP_GV;
sub TOP_NAME;
}
package B::IV {
sub IV;
sub IVX;
sub RV;
sub UVX;
sub needs64bits;
sub packiv;
}
package B::LISTOP {
sub children;
}
package B::LOGOP {
sub other;
}
package B::LOOP {
sub lastop;
sub nextop;
sub redoop;
}
package B::MAGIC {
sub FLAGS;
sub LENGTH;
sub MOREMAGIC;
sub OBJ;
sub PRIVATE;
sub PTR;
sub REGEX;
sub TYPE;
sub precomp;
}
package B::METHOP {
sub first;
sub meth_sv;
sub rclass;
}
package B::NV {
sub NV;
sub NVX;
}
package B::OP {
sub desc;
sub flags;
sub flagspv;
sub folded;
sub moresib;
sub name;
sub next;
sub oplist;
sub opt;
sub parent;
sub ppaddr;
sub private;
sub privatepv;
sub savefree;
sub sibling;
sub size;
sub slabbed;
sub spare;
sub static;
sub targ;
sub type;
}
package B::PADLIST {
sub ARRAY;
sub ARRAYelt;
sub MAX;
sub NAMES;
sub REFCNT;
sub flagspv;
sub id;
sub outid;
}
package B::PADNAME {
sub COP_SEQ_RANGE_HIGH;
sub COP_SEQ_RANGE_LOW;
sub FLAGS;
sub LEN;
sub OURSTASH;
sub PARENT_FAKELEX_FLAGS;
sub PARENT_PAD_INDEX;
sub PROTOCV;
sub PV;
sub PVX;
sub REFCNT;
sub SvSTASH;
sub TYPE;
sub flagspv;
}
package B::PADNAMELIST {
sub ARRAY;
sub ARRAYelt;
sub MAX;
sub REFCNT;
sub flagspv;
}
package B::PADOP {
sub gv;
sub padix;
sub sv;
}
package B::PMOP {
sub code_list;
sub pmflags;
sub pmoffset;
sub pmregexp;
sub pmreplroot;
sub pmreplstart;
sub pmstash;
sub pmstashpv;
sub precomp;
sub reflags;
}
package B::PV {
sub CUR;
sub LEN;
sub PV;
sub PVBM;
sub PVX;
sub RV;
sub as_string;
}
package B::PVLV {
sub TARG;
sub TARGLEN;
sub TARGOFF;
sub TYPE;
}
package B::PVMG {
sub MAGIC;
sub SvSTASH;
}
package B::PVOP {
sub pv;
}
package B::REGEXP {
sub REGEX;
sub compflags;
sub precomp;
sub qr_anoncv;
}
package B::RHE {
sub HASH;
}
package B::SV {
sub FLAGS;
sub MAGICAL;
sub POK;
sub REFCNT;
sub ROK;
sub SvTYPE;
sub flagspv;
sub object_2svref;
}
package B::SVOP {
sub gv;
sub sv;
}
package B::UNOP {
sub first;
}
package B::UNOP_AUX {
sub aux_list;
sub string;
}
package B::Utils {
sub anon_sub;
sub blessed($) ;
sub main_cv;
sub main_root;
sub main_start;
sub ppname;
sub shuffle(@) ;
sub weaken($) ;
}
package Cairo {
sub HAS_FT_FONT;
sub HAS_PDF_SURFACE;
sub HAS_PNG_FUNCTIONS;
sub HAS_PS_SURFACE;
sub HAS_RECORDING_SURFACE;
sub HAS_SVG_SURFACE;
sub LIB_VERSION;
sub LIB_VERSION_ENCODE;
sub VERSION_ENCODE;
sub lib_version;
sub lib_version_string;
sub version;
sub version_string;
}
package Cairo::Context {
sub DESTROY;
sub append_path;
sub arc;
sub arc_negative;
sub clip;
sub clip_extents;
sub clip_preserve;
sub close_path;
sub copy_clip_rectangle_list;
sub copy_page;
sub copy_path;
sub copy_path_flat;
sub create;
sub curve_to;
sub device_to_user;
sub device_to_user_distance;
sub fill;
sub fill_extents;
sub fill_preserve;
sub font_extents;
sub get_antialias;
sub get_current_point;
sub get_dash;
sub get_fill_rule;
sub get_font_face;
sub get_font_matrix;
sub get_font_options;
sub get_group_target;
sub get_line_cap;
sub get_line_join;
sub get_line_width;
sub get_matrix;
sub get_miter_limit;
sub get_operator;
sub get_scaled_font;
sub get_source;
sub get_target;
sub get_tolerance;
sub glyph_extents;
sub glyph_path;
sub has_current_point;
sub identity_matrix;
sub in_clip;
sub in_fill;
sub in_stroke;
sub line_to;
sub mask;
sub mask_surface;
sub move_to;
sub new_path;
sub new_sub_path;
sub paint;
sub paint_with_alpha;
sub path_extents;
sub pop_group;
sub pop_group_to_source;
sub push_group;
sub push_group_with_content;
sub rectangle;
sub rel_curve_to;
sub rel_line_to;
sub rel_move_to;
sub reset_clip;
sub restore;
sub rotate;
sub save;
sub scale;
sub select_font_face;
sub set_antialias;
sub set_dash;
sub set_fill_rule;
sub set_font_face;
sub set_font_matrix;
sub set_font_options;
sub set_font_size;
sub set_line_cap;
sub set_line_join;
sub set_line_width;
sub set_matrix;
sub set_miter_limit;
sub set_operator;
sub set_scaled_font;
sub set_source;
sub set_source_rgb;
sub set_source_rgba;
sub set_source_surface;
sub set_tolerance;
sub show_glyphs;
sub show_page;
sub show_text;
sub show_text_glyphs;
sub status;
sub stroke;
sub stroke_extents;
sub stroke_preserve;
sub tag_begin;
sub tag_end;
sub text_extents;
sub text_path;
sub transform;
sub translate;
sub user_to_device;
sub user_to_device_distance;
}
package Cairo::FontFace {
sub DESTROY;
sub get_type;
sub status;
}
package Cairo::FontOptions {
sub DESTROY;
sub create;
sub equal;
sub get_antialias;
sub get_hint_metrics;
sub get_hint_style;
sub get_subpixel_order;
sub hash;
sub merge;
sub set_antialias;
sub set_hint_metrics;
sub set_hint_style;
sub set_subpixel_order;
sub status;
}
package Cairo::Format {
sub stride_for_width;
}
package Cairo::FtFontFace {
sub create;
}
package Cairo::Gradient {
sub add_color_stop_rgb;
sub add_color_stop_rgba;
sub get_color_stops;
}
package Cairo::ImageSurface {
sub create;
sub create_for_data;
sub create_from_png;
sub create_from_png_stream;
sub get_data;
sub get_format;
sub get_height;
sub get_stride;
sub get_width;
}
package Cairo::LinearGradient {
sub create;
sub get_points;
}
package Cairo::Matrix {
sub DESTROY;
sub init;
sub init_identity;
sub init_rotate;
sub init_scale;
sub init_translate;
sub invert;
sub multiply;
sub rotate;
sub scale;
sub transform_distance;
sub transform_point;
sub translate;
}
package Cairo::Path {
sub DESTROY;
sub FETCH;
sub FETCHSIZE;
}
package Cairo::Path::Data {
sub EXISTS;
sub FETCH;
sub FIRSTKEY;
sub NEXTKEY;
sub STORE;
}
package Cairo::Path::Point {
sub FETCH;
sub FETCHSIZE;
sub STORE;
}
package Cairo::Path::Points {
sub FETCH;
sub FETCHSIZE;
sub STORE;
}
package Cairo::Pattern {
sub DESTROY;
sub get_extend;
sub get_filter;
sub get_matrix;
sub get_type;
sub set_extend;
sub set_filter;
sub set_matrix;
sub status;
}
package Cairo::PdfSurface {
sub create;
sub create_for_stream;
sub get_versions;
sub restrict_to_version;
sub set_metadata;
sub set_size;
sub version_to_string;
}
package Cairo::PsSurface {
sub create;
sub create_for_stream;
sub dsc_begin_page_setup;
sub dsc_begin_setup;
sub dsc_comment;
sub get_eps;
sub get_levels;
sub level_to_string;
sub restrict_to_level;
sub set_eps;
sub set_size;
}
package Cairo::RadialGradient {
sub create;
sub get_circles;
}
package Cairo::RecordingSurface {
sub create;
sub ink_extents;
}
package Cairo::Region {
sub DESTROY;
sub contains_point;
sub contains_rectangle;
sub create;
sub equal;
sub get_extents;
sub get_rectangle;
sub intersect;
sub intersect_rectangle;
sub is_empty;
sub num_rectangles;
sub status;
sub subtract;
sub subtract_rectangle;
sub translate;
sub union;
sub union_rectangle;
sub xor;
sub xor_rectangle;
}
package Cairo::ScaledFont {
sub DESTROY;
sub create;
sub extents;
sub get_ctm;
sub get_font_face;
sub get_font_matrix;
sub get_font_options;
sub get_scale_matrix;
sub get_type;
sub glyph_extents;
sub status;
sub text_extents;
sub text_to_glyphs;
}
package Cairo::SolidPattern {
sub create_rgb;
sub create_rgba;
sub get_rgba;
}
package Cairo::Surface {
sub DESTROY;
sub copy_page;
sub create_for_rectangle;
sub create_similar;
sub finish;
sub flush;
sub get_content;
sub get_device_offset;
sub get_fallback_resolution;
sub get_font_options;
sub get_type;
sub has_show_text_glyphs;
sub mark_dirty;
sub mark_dirty_rectangle;
sub set_device_offset;
sub set_fallback_resolution;
sub show_page;
sub status;
sub write_to_png;
sub write_to_png_stream;
}
package Cairo::SurfacePattern {
sub create;
sub get_surface;
}
package Cairo::SvgSurface {
sub create;
sub create_for_stream;
sub get_versions;
sub restrict_to_version;
sub version_to_string;
}
package Cairo::ToyFontFace {
sub create;
sub get_family;
sub get_slant;
sub get_weight;
}
package Carp {
sub _maybe_isa;
sub downgrade;
sub is_utf8;
}
package Class::Load {
sub is_class_loaded;
}
package Class::Load::XS {
sub is_class_loaded;
}
package Class::MOP {
sub blessed($) ;
sub check_package_cache_flag($) ;
sub get_code_info($) ;
sub isweak($) ;
sub weaken($) ;
}
package Class::MOP::Attribute {
sub associated_class;
sub associated_methods;
sub blessed($) ;
sub weaken($) ;
}
package Class::MOP::Class {
sub all(&@) ;
sub blessed($) ;
sub constructor_class;
sub constructor_name;
sub destructor_class;
sub immutable_trait;
sub instance_metaclass;
sub subname;
}
package Class::MOP::Instance {
sub associated_metaclass;
sub blessed($) ;
sub isweak($) ;
sub slot_hash;
sub slots;
sub weaken($) ;
}
package Class::MOP::Method {
sub blessed($) ;
sub body;
sub is_stub;
sub name;
sub package_name;
sub reftype($) ;
sub weaken($) ;
}
package Class::MOP::Method::Accessor {
sub blessed($) ;
sub weaken($) ;
}
package Class::MOP::Method::Constructor {
sub blessed($) ;
sub weaken($) ;
}
package Class::MOP::Method::Generated {
sub definition_context;
sub is_inline;
}
package Class::MOP::Method::Inlined {
sub _expected_method_class;
sub refaddr($) ;
}
package Class::MOP::Method::Meta {
sub blessed($) ;
sub weaken($) ;
}
package Class::MOP::Method::Wrapped {
sub blessed($) ;
sub subname;
}
package Class::MOP::Mixin {
sub blessed($) ;
}
package Class::MOP::Mixin::AttributeCore {
sub accessor;
sub blessed($) ;
sub builder;
sub clearer;
sub definition_context;
sub init_arg;
sub initializer;
sub insertion_order;
sub name;
sub predicate;
sub reader;
sub writer;
}
package Class::MOP::Mixin::HasAttributes {
sub _attribute_map;
sub attribute_metaclass;
sub blessed($) ;
}
package Class::MOP::Mixin::HasMethods {
sub _method_map;
sub blessed($) ;
sub method_metaclass;
sub reftype($) ;
sub subname;
sub wrapped_method_metaclass;
}
package Class::MOP::Mixin::HasOverloads {
sub blessed($) ;
}
package Class::MOP::Object {
sub blessed($) ;
}
package Class::MOP::Overload {
sub blessed($) ;
sub weaken($) ;
}
package Class::MOP::Package {
sub blessed($) ;
sub name;
sub weaken($) ;
}
package Class::MethodMaker {
sub set_sub_name($$$$) ;
}
package Class::MethodMaker::Engine {
sub _boolean;
sub abstract;
sub copy;
sub new;
}
package Class::MethodMaker::OptExt {
sub COMPONENT_TYPES() ;
}
package Class::XSAccessor {
sub __entersub_optimized__() ;
sub _newxs_compat_accessor;
sub _newxs_compat_setter;
sub accessor;
sub array_accessor;
sub array_accessor_init;
sub array_setter;
sub array_setter_init;
sub chained_accessor;
sub chained_setter;
sub constant_false;
sub constant_true;
sub constructor;
sub defined_predicate;
sub exists_predicate;
sub getter;
sub lvalue_accessor;
sub newxs_accessor;
sub newxs_boolean;
sub newxs_constructor;
sub newxs_defined_predicate;
sub newxs_exists_predicate;
sub newxs_getter;
sub newxs_lvalue_accessor;
sub newxs_predicate;
sub newxs_setter;
sub newxs_test;
sub setter;
sub test;
}
package Class::XSAccessor::Array {
sub accessor;
sub chained_accessor;
sub chained_setter;
sub constructor;
sub getter;
sub lvalue_accessor;
sub newxs_accessor;
sub newxs_constructor;
sub newxs_getter;
sub newxs_lvalue_accessor;
sub newxs_predicate;
sub newxs_setter;
sub predicate;
sub setter;
}
package Clone {
sub clone($;$) ;
}
package Compress::Bzip2 {
sub DESTROY($) ;
sub F_ALLOCSP() ;
sub F_ALLOCSP64() ;
sub F_COMPAT() ;
sub F_DUP2FD() ;
sub F_FREESP() ;
sub F_FREESP64() ;
sub F_FSYNC() ;
sub F_FSYNC64() ;
sub F_NODNY() ;
sub F_POSIX() ;
sub F_RDACC() ;
sub F_RDDNY() ;
sub F_RWACC() ;
sub F_RWDNY() ;
sub F_SHARE() ;
sub F_UNSHARE() ;
sub F_WRACC() ;
sub F_WRDNY() ;
sub O_ALIAS() ;
sub O_DEFER() ;
sub O_EXLOCK() ;
sub O_NOINHERIT() ;
sub O_RANDOM() ;
sub O_RAW() ;
sub O_RSRC() ;
sub O_SEQUENTIAL() ;
sub O_SHLOCK() ;
sub O_TEMPORARY() ;
sub S_ENFMT() ;
sub S_IFMT;
sub S_IFWHT() ;
sub S_IMODE;
sub S_ISBLK;
sub S_ISCHR;
sub S_ISDIR;
sub S_ISENFMT;
sub S_ISFIFO;
sub S_ISLNK;
sub S_ISREG;
sub S_ISSOCK;
sub S_ISTXT() ;
sub S_ISWHT;
sub bz_seterror($$) ;
sub bzclearerr($) ;
sub bzclose($;$) ;
sub bzdeflate($$) ;
sub bzdeflateInit(@) ;
sub bzeof($) ;
sub bzerror($) ;
sub bzflush($;$) ;
sub bzinflate($$) ;
sub bzinflateInit(@) ;
sub bzlibversion() ;
sub bzopen($$;$) ;
sub bzread($$;$) ;
sub bzreadline($$;$) ;
sub bzsetparams($$;$) ;
sub bzwrite($$;$) ;
sub compress($;$) ;
sub compress_init(@) ;
sub constant;
sub decompress($) ;
sub decompress_init(@) ;
sub is_read($) ;
sub is_stream($) ;
sub is_write($) ;
sub memBunzip($) ;
sub memBzip($;$) ;
sub new(@) ;
sub prefix($) ;
sub total_in($) ;
sub total_out($) ;
}
package Compress::Raw::Bunzip2 {
sub DESTROY;
sub DispStream;
sub bzinflate;
sub compressedBytes;
sub inflateCount;
sub new;
sub status;
sub total_in_lo32;
sub total_out_lo32;
sub uncompressedBytes;
}
package Compress::Raw::Bzip2 {
sub DESTROY;
sub DispStream;
sub bzclose;
sub bzdeflate;
sub bzflush;
sub bzlibversion;
sub compressedBytes;
sub constant;
sub new;
sub total_in_lo32;
sub total_out_lo32;
sub uncompressedBytes;
}
package Compress::Raw::Zlib {
sub ZLIB_VERNUM;
sub _deflateInit;
sub _inflateInit;
sub _inflateScanInit;
sub adler32;
sub adler32_combine;
sub constant;
sub crc32;
sub crc32_combine;
sub zlibCompileFlags;
sub zlib_version;
}
package Compress::Raw::Zlib::deflateStream {
sub DESTROY;
sub DispStream;
sub _deflateParams;
sub adler32;
sub compressedBytes;
sub crc32;
sub deflate;
sub deflateReset;
sub deflateTune;
sub dict_adler;
sub flush;
sub get_Bufsize;
sub get_Level;
sub get_Strategy;
sub msg;
sub status;
sub total_in;
sub total_out;
sub uncompressedBytes;
}
package Compress::Raw::Zlib::inflateScanStream {
sub DESTROY;
sub DispStream;
sub _createDeflateStream;
sub adler32;
sub compressedBytes;
sub crc32;
sub getEndOffset;
sub getLastBlockOffset;
sub getLastBufferOffset;
sub inflateCount;
sub inflateReset;
sub resetLastBlockByte;
sub scan;
sub status;
sub uncompressedBytes;
}
package Compress::Raw::Zlib::inflateStream {
sub DESTROY;
sub DispStream;
sub adler32;
sub compressedBytes;
sub crc32;
sub dict_adler;
sub get_Bufsize;
sub inflate;
sub inflateCount;
sub inflateReset;
sub inflateSync;
sub msg;
sub set_Append;
sub status;
sub total_in;
sub total_out;
sub uncompressedBytes;
}
package Config {
sub AUTOLOAD;
}
package Cpanel::JSON::XS {
sub CLONE;
sub DESTROY;
sub _from_json($;$$) ;
sub _to_json($;$) ;
sub allow_barekey;
sub allow_bignum;
sub allow_blessed;
sub allow_dupkeys;
sub allow_nonref;
sub allow_singlequote;
sub allow_stringify;
sub allow_tags;
sub allow_unknown;
sub ascii;
sub binary;
sub canonical;
sub convert_blessed;
sub decode;
sub decode_json($;$$) ;
sub decode_prefix;
sub encode;
sub encode_json($;$) ;
sub escape_slash;
sub filter_json_object;
sub filter_json_single_key_object;
sub get_allow_barekey;
sub get_allow_bignum;
sub get_allow_blessed;
sub get_allow_dupkeys;
sub get_allow_nonref;
sub get_allow_singlequote;
sub get_allow_stringify;
sub get_allow_tags;
sub get_allow_unknown;
sub get_ascii;
sub get_binary;
sub get_canonical;
sub get_convert_blessed;
sub get_escape_slash;
sub get_indent;
sub get_indent_length;
sub get_latin1;
sub get_max_depth;
sub get_max_size;
sub get_relaxed;
sub get_require_types;
sub get_shrink;
sub get_space_after;
sub get_space_before;
sub get_stringify_infnan;
sub get_type_all_string;
sub get_unblessed_bool;
sub get_utf8;
sub incr_parse;
sub incr_reset;
sub incr_skip;
sub indent;
sub indent_length;
sub latin1;
sub max_depth;
sub max_size;
sub new;
sub pretty;
sub relaxed;
sub require_types;
sub shrink;
sub sort_by;
sub space_after;
sub space_before;
sub stringify_infnan;
sub type_all_string;
sub unblessed_bool;
sub utf8;
}
package Crypt::Rijndael {
sub DESTROY;
sub decrypt;
sub encrypt;
sub new;
sub set_iv;
}
package Curses {
sub ACS_BLOCK;
sub ACS_BOARD;
sub ACS_BTEE;
sub ACS_BULLET;
sub ACS_CKBOARD;
sub ACS_DARROW;
sub ACS_DEGREE;
sub ACS_DIAMOND;
sub ACS_HLINE;
sub ACS_LANTERN;
sub ACS_LARROW;
sub ACS_LLCORNER;
sub ACS_LRCORNER;
sub ACS_LTEE;
sub ACS_PLMINUS;
sub ACS_PLUS;
sub ACS_RARROW;
sub ACS_RTEE;
sub ACS_S1;
sub ACS_S9;
sub ACS_TTEE;
sub ACS_UARROW;
sub ACS_ULCORNER;
sub ACS_URCORNER;
sub ACS_VLINE;
sub BUTTON_CLICK;
sub BUTTON_DOUBLE_CLICK;
sub BUTTON_PRESS;
sub BUTTON_RELEASE;
sub BUTTON_RESERVED_EVENT;
sub BUTTON_TRIPLE_CLICK;
sub COLORS;
sub COLOR_PAIR;
sub COLOR_PAIRS;
sub COLS;
sub KEY_F;
sub LINES;
sub PAIR_NUMBER;
sub addch;
sub addchnstr;
sub addchstr;
sub addnstr;
sub addstr;
sub addstring;
sub assume_default_colors;
sub attr_get;
sub attr_off;
sub attr_on;
sub attr_set;
sub attroff;
sub attron;
sub attrset;
sub baudrate;
sub beep;
sub bkgd;
sub bkgdset;
sub border;
sub bottom_panel;
sub box;
sub can_change_color;
sub cbreak;
sub chgat;
sub clear;
sub clearok;
sub clrtobot;
sub clrtoeol;
sub color_content;
sub copywin;
sub current_field;
sub current_item;
sub curs_set;
sub curscr;
sub cursyncup;
sub data_ahead;
sub data_behind;
sub def_prog_mode;
sub def_shell_mode;
sub define_key;
sub del_panel;
sub delay_output;
sub delch;
sub deleteln;
sub delscreen;
sub delwin;
sub derwin;
sub doupdate;
sub dup_field;
sub dupwin;
sub dynamic_field_info;
sub echo;
sub echochar;
sub enclose;
sub endwin;
sub erase;
sub erasechar;
sub field_arg;
sub field_back;
sub field_buffer;
sub field_count;
sub field_fore;
sub field_index;
sub field_info;
sub field_just;
sub field_opts;
sub field_opts_off;
sub field_opts_on;
sub field_pad;
sub field_status;
sub field_userptr;
sub filter;
sub flash;
sub flushinp;
sub flusok;
sub form_driver;
sub form_fields;
sub form_opts;
sub form_opts_off;
sub form_opts_on;
sub form_page;
sub form_request_by_name;
sub form_request_name;
sub form_sub;
sub form_userptr;
sub form_win;
sub free_field;
sub free_form;
sub free_item;
sub free_menu;
sub getbegyx;
sub getbkgd;
sub getcap;
sub getch;
sub getchar;
sub getmaxx;
sub getmaxy;
sub getmaxyx;
sub getmouse;
sub getnstr;
sub getparyx;
sub getstr;
sub getstring;
sub getsyx;
sub getwin;
sub getyx;
sub halfdelay;
sub has_colors;
sub has_ic;
sub has_il;
sub has_key;
sub hide_panel;
sub hline;
sub idcok;
sub idlok;
sub immedok;
sub inch;
sub inchnstr;
sub inchstr;
sub init_color;
sub init_pair;
sub initscr;
sub innstr;
sub insch;
sub insdelln;
sub insertln;
sub insnstr;
sub insstr;
sub insstring;
sub instr;
sub instring;
sub intrflush;
sub is_linetouched;
sub is_wintouched;
sub isendwin;
sub item_count;
sub item_description;
sub item_index;
sub item_name;
sub item_opts;
sub item_opts_off;
sub item_opts_on;
sub item_userptr;
sub item_value;
sub item_visible;
sub keybound;
sub keyname;
sub keyok;
sub keypad;
sub killchar;
sub leaveok;
sub link_field;
sub longname;
sub menu_back;
sub menu_driver;
sub menu_fore;
sub menu_format;
sub menu_grey;
sub menu_items;
sub menu_mark;
sub menu_opts;
sub menu_opts_off;
sub menu_opts_on;
sub menu_pad;
sub menu_pattern;
sub menu_request_by_name;
sub menu_request_name;
sub menu_spacing;
sub menu_sub;
sub menu_userptr;
sub menu_win;
sub meta;
sub mouse_trafo;
sub mouseinterval;
sub mousemask;
sub move;
sub move_field;
sub move_panel;
sub mvderwin;
sub mvwin;
sub napms;
sub new_field;
sub new_form;
sub new_item;
sub new_menu;
sub new_page;
sub new_panel;
sub newpad;
sub newterm;
sub newwin;
sub nl;
sub nocbreak;
sub nodelay;
sub noecho;
sub nonl;
sub noqiflush;
sub noraw;
sub notimeout;
sub noutContinue;
sub overlay;
sub overwrite;
sub pair_content;
sub panel_above;
sub panel_below;
sub panel_hidden;
sub panel_userptr;
sub panel_window;
sub pechochar;
sub pnoutContinue;
sub pos_form_cursor;
sub pos_menu_cursor;
sub post_form;
sub post_menu;
sub pContinue;
sub putwin;
sub qiflush;
sub raw;
sub redrawln;
sub redrawwin;
sub Continue;
sub replace_panel;
sub reset_prog_mode;
sub reset_shell_mode;
sub resetty;
sub resize;
sub resizeterm;
sub savetty;
sub scale_form;
sub scale_menu;
sub scr_dump;
sub scr_init;
sub scr_restore;
sub scr_set;
sub scrl;
sub scroll;
sub scrollok;
sub set_current_field;
sub set_current_item;
sub set_field_back;
sub set_field_buffer;
sub set_field_fore;
sub set_field_just;
sub set_field_opts;
sub set_field_pad;
sub set_field_status;
sub set_field_userptr;
sub set_form_fields;
sub set_form_opts;
sub set_form_page;
sub set_form_sub;
sub set_form_userptr;
sub set_form_win;
sub set_item_opts;
sub set_item_userptr;
sub set_item_value;
sub set_max_field;
sub set_menu_back;
sub set_menu_fore;
sub set_menu_format;
sub set_menu_grey;
sub set_menu_items;
sub set_menu_mark;
sub set_menu_opts;
sub set_menu_pad;
sub set_menu_pattern;
sub set_menu_spacing;
sub set_menu_sub;
sub set_menu_userptr;
sub set_menu_win;
sub set_new_page;
sub set_panel_userptr;
sub set_term;
sub set_top_row;
sub setscrreg;
sub setsyx;
sub show_panel;
sub slk_attr;
sub slk_attroff;
sub slk_attron;
sub slk_attrset;
sub slk_clear;
sub slk_color;
sub slk_init;
sub slk_label;
sub slk_noutContinue;
sub slk_Continue;
sub slk_restore;
sub slk_set;
sub slk_touch;
sub standend;
sub standout;
sub start_color;
sub stdscr;
sub subpad;
sub subwin;
sub syncdown;
sub syncok;
sub syncup;
sub termattrs;
sub termname;
sub timeout;
sub top_panel;
sub top_row;
sub touchline;
sub touchln;
sub touchoverlap;
sub touchwin;
sub typeahead;
sub unctrl;
sub ungetch;
sub ungetchar;
sub ungetmouse;
sub unpost_form;
sub unpost_menu;
sub untouchwin;
sub update_panels;
sub use_default_colors;
sub use_env;
sub vline;
}
package Curses::Vars {
sub DESTROY;
sub FETCH;
sub STORE;
sub TIESCALAR;
}
package Cwd {
sub CLONE;
sub abs_path;
sub fastcwd;
sub getcwd;
sub realpath;
}
package DBD::SQLite {
sub ALTER_TABLE() ;
sub ANALYZE() ;
sub ATTACH() ;
sub COPY() ;
sub CREATE_INDEX() ;
sub CREATE_TABLE() ;
sub CREATE_TEMP_INDEX() ;
sub CREATE_TEMP_TABLE() ;
sub CREATE_TEMP_TRIGGER() ;
sub CREATE_TEMP_VIEW() ;
sub CREATE_TRIGGER() ;
sub CREATE_VIEW() ;
sub CREATE_VTABLE() ;
sub DELETE() ;
sub DENY() ;
sub DETACH() ;
sub DROP_INDEX() ;
sub DROP_TABLE() ;
sub DROP_TEMP_INDEX() ;
sub DROP_TEMP_TABLE() ;
sub DROP_TEMP_TRIGGER() ;
sub DROP_TEMP_VIEW() ;
sub DROP_TRIGGER() ;
sub DROP_VIEW() ;
sub DROP_VTABLE() ;
sub FUNCTION() ;
sub IGNORE() ;
sub INSERT() ;
sub OK() ;
sub OPEN_CREATE() ;
sub OPEN_FULLMUTEX() ;
sub OPEN_MEMORY() ;
sub OPEN_NOFOLLOW() ;
sub OPEN_NOMUTEX() ;
sub OPEN_PRIVATECACHE() ;
sub OPEN_READONLY() ;
sub OPEN_READWRITE() ;
sub OPEN_SHAREDCACHE() ;
sub OPEN_SUPER_JOURNAL() ;
sub OPEN_URI() ;
sub PRAGMA() ;
sub READ() ;
sub RECURSIVE() ;
sub REINDEX() ;
sub SAVEPOINT() ;
sub SELECT() ;
sub TRANSACTION() ;
sub UPDATE() ;
sub _const__authorizer_action_codes() ;
sub _const__authorizer_action_codes_3006008() ;
sub _const__authorizer_action_codes_3008003() ;
sub _const__authorizer_return_codes() ;
sub _const__flags_for_file_open_operations() ;
sub _const__flags_for_file_open_operations_3006002() ;
sub _const__flags_for_file_open_operations_3006018() ;
sub _const__flags_for_file_open_operations_3007007() ;
sub _const__flags_for_file_open_operations_3007013() ;
sub _const__flags_for_file_open_operations_3031000() ;
sub _const__flags_for_file_open_operations_3033000() ;
sub compile_options;
sub sqlite_status;
sub strglob;
sub strlike;
}
package DBD::SQLite::Constants {
sub SQLITE_ABORT() ;
sub SQLITE_ABORT_ROLLBACK() ;
sub SQLITE_ALTER_TABLE() ;
sub SQLITE_ANALYZE() ;
sub SQLITE_ATTACH() ;
sub SQLITE_AUTH() ;
sub SQLITE_AUTH_USER() ;
sub SQLITE_BLOB() ;
sub SQLITE_BUSY() ;
sub SQLITE_BUSY_RECOVERY() ;
sub SQLITE_BUSY_SNAPSHOT() ;
sub SQLITE_BUSY_TIMEOUT() ;
sub SQLITE_CANTOPEN() ;
sub SQLITE_CANTOPEN_CONVPATH() ;
sub SQLITE_CANTOPEN_DIRTYWAL() ;
sub SQLITE_CANTOPEN_FULLPATH() ;
sub SQLITE_CANTOPEN_ISDIR() ;
sub SQLITE_CANTOPEN_NOTEMPDIR() ;
sub SQLITE_CANTOPEN_SYMLINK() ;
sub SQLITE_CONSTRAINT() ;
sub SQLITE_CONSTRAINT_CHECK() ;
sub SQLITE_CONSTRAINT_COMMITHOOK() ;
sub SQLITE_CONSTRAINT_FOREIGNKEY() ;
sub SQLITE_CONSTRAINT_FUNCTION() ;
sub SQLITE_CONSTRAINT_NOTNULL() ;
sub SQLITE_CONSTRAINT_PINNED() ;
sub SQLITE_CONSTRAINT_PRIMARYKEY() ;
sub SQLITE_CONSTRAINT_ROWID() ;
sub SQLITE_CONSTRAINT_TRIGGER() ;
sub SQLITE_CONSTRAINT_UNIQUE() ;
sub SQLITE_CONSTRAINT_VTAB() ;
sub SQLITE_COPY() ;
sub SQLITE_CORRUPT() ;
sub SQLITE_CORRUPT_INDEX() ;
sub SQLITE_CORRUPT_SEQUENCE() ;
sub SQLITE_CORRUPT_VTAB() ;
sub SQLITE_CREATE_INDEX() ;
sub SQLITE_CREATE_TABLE() ;
sub SQLITE_CREATE_TEMP_INDEX() ;
sub SQLITE_CREATE_TEMP_TABLE() ;
sub SQLITE_CREATE_TEMP_TRIGGER() ;
sub SQLITE_CREATE_TEMP_VIEW() ;
sub SQLITE_CREATE_TRIGGER() ;
sub SQLITE_CREATE_VIEW() ;
sub SQLITE_CREATE_VTABLE() ;
sub SQLITE_DBCONFIG_DEFENSIVE() ;
sub SQLITE_DBCONFIG_DQS_DDL() ;
sub SQLITE_DBCONFIG_DQS_DML() ;
sub SQLITE_DBCONFIG_ENABLE_FKEY() ;
sub SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER() ;
sub SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION() ;
sub SQLITE_DBCONFIG_ENABLE_QPSG() ;
sub SQLITE_DBCONFIG_ENABLE_TRIGGER() ;
sub SQLITE_DBCONFIG_ENABLE_VIEW() ;
sub SQLITE_DBCONFIG_LEGACY_ALTER_TABLE() ;
sub SQLITE_DBCONFIG_LEGACY_FILE_FORMAT() ;
sub SQLITE_DBCONFIG_LOOKASIDE() ;
sub SQLITE_DBCONFIG_MAINDBNAME() ;
sub SQLITE_DBCONFIG_MAX() ;
sub SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE() ;
sub SQLITE_DBCONFIG_RESET_DATABASE() ;
sub SQLITE_DBCONFIG_TRIGGER_EQP() ;
sub SQLITE_DBCONFIG_TRUSTED_SCHEMA() ;
sub SQLITE_DBCONFIG_WRITABLE_SCHEMA() ;
sub SQLITE_DELETE() ;
sub SQLITE_DENY() ;
sub SQLITE_DETACH() ;
sub SQLITE_DETERMINISTIC() ;
sub SQLITE_DIRECTONLY() ;
sub SQLITE_DONE() ;
sub SQLITE_DROP_INDEX() ;
sub SQLITE_DROP_TABLE() ;
sub SQLITE_DROP_TEMP_INDEX() ;
sub SQLITE_DROP_TEMP_TABLE() ;
sub SQLITE_DROP_TEMP_TRIGGER() ;
sub SQLITE_DROP_TEMP_VIEW() ;
sub SQLITE_DROP_TRIGGER() ;
sub SQLITE_DROP_VIEW() ;
sub SQLITE_DROP_VTABLE() ;
sub SQLITE_EMPTY() ;
sub SQLITE_ERROR() ;
sub SQLITE_ERROR_MISSING_COLLSEQ() ;
sub SQLITE_ERROR_RETRY() ;
sub SQLITE_ERROR_SNAPSHOT() ;
sub SQLITE_FLOAT() ;
sub SQLITE_FORMAT() ;
sub SQLITE_FULL() ;
sub SQLITE_FUNCTION() ;
sub SQLITE_IGNORE() ;
sub SQLITE_INNOCUOUS() ;
sub SQLITE_INSERT() ;
sub SQLITE_INTEGER() ;
sub SQLITE_INTERNAL() ;
sub SQLITE_INTERRUPT() ;
sub SQLITE_IOERR() ;
sub SQLITE_IOERR_ACCESS() ;
sub SQLITE_IOERR_AUTH() ;
sub SQLITE_IOERR_BEGIN_ATOMIC() ;
sub SQLITE_IOERR_BLOCKED() ;
sub SQLITE_IOERR_CHECKRESERVEDLOCK() ;
sub SQLITE_IOERR_CLOSE() ;
sub SQLITE_IOERR_COMMIT_ATOMIC() ;
sub SQLITE_IOERR_CONVPATH() ;
sub SQLITE_IOERR_CORRUPTFS() ;
sub SQLITE_IOERR_DATA() ;
sub SQLITE_IOERR_DELETE() ;
sub SQLITE_IOERR_DELETE_NOENT() ;
sub SQLITE_IOERR_DIR_CLOSE() ;
sub SQLITE_IOERR_DIR_FSYNC() ;
sub SQLITE_IOERR_FSTAT() ;
sub SQLITE_IOERR_FSYNC() ;
sub SQLITE_IOERR_GETTEMPPATH() ;
sub SQLITE_IOERR_LOCK() ;
sub SQLITE_IOERR_MMAP() ;
sub SQLITE_IOERR_NOMEM() ;
sub SQLITE_IOERR_RDLOCK() ;
sub SQLITE_IOERR_READ() ;
sub SQLITE_IOERR_ROLLBACK_ATOMIC() ;
sub SQLITE_IOERR_SEEK() ;
sub SQLITE_IOERR_SHMLOCK() ;
sub SQLITE_IOERR_SHMMAP() ;
sub SQLITE_IOERR_SHMOPEN() ;
sub SQLITE_IOERR_SHMSIZE() ;
sub SQLITE_IOERR_SHORT_READ() ;
sub SQLITE_IOERR_TRUNCATE() ;
sub SQLITE_IOERR_UNLOCK() ;
sub SQLITE_IOERR_VNODE() ;
sub SQLITE_IOERR_WRITE() ;
sub SQLITE_LIMIT_ATTACHED() ;
sub SQLITE_LIMIT_COLUMN() ;
sub SQLITE_LIMIT_COMPOUND_SELECT() ;
sub SQLITE_LIMIT_EXPR_DEPTH() ;
sub SQLITE_LIMIT_FUNCTION_ARG() ;
sub SQLITE_LIMIT_LENGTH() ;
sub SQLITE_LIMIT_LIKE_PATTERN_LENGTH() ;
sub SQLITE_LIMIT_SQL_LENGTH() ;
sub SQLITE_LIMIT_TRIGGER_DEPTH() ;
sub SQLITE_LIMIT_VARIABLE_NUMBER() ;
sub SQLITE_LIMIT_VDBE_OP() ;
sub SQLITE_LIMIT_WORKER_THREADS() ;
sub SQLITE_LOCKED() ;
sub SQLITE_LOCKED_SHAREDCACHE() ;
sub SQLITE_LOCKED_VTAB() ;
sub SQLITE_MISMATCH() ;
sub SQLITE_MISUSE() ;
sub SQLITE_NOLFS() ;
sub SQLITE_NOMEM() ;
sub SQLITE_NOTADB() ;
sub SQLITE_NOTFOUND() ;
sub SQLITE_NOTICE() ;
sub SQLITE_NOTICE_RECOVER_ROLLBACK() ;
sub SQLITE_NOTICE_RECOVER_WAL() ;
sub SQLITE_NULL() ;
sub SQLITE_OK() ;
sub SQLITE_OK_SYMLINK() ;
sub SQLITE_OPEN_CREATE() ;
sub SQLITE_OPEN_FULLMUTEX() ;
sub SQLITE_OPEN_MEMORY() ;
sub SQLITE_OPEN_NOFOLLOW() ;
sub SQLITE_OPEN_NOMUTEX() ;
sub SQLITE_OPEN_PRIVATECACHE() ;
sub SQLITE_OPEN_READONLY() ;
sub SQLITE_OPEN_READWRITE() ;
sub SQLITE_OPEN_SHAREDCACHE() ;
sub SQLITE_OPEN_SUPER_JOURNAL() ;
sub SQLITE_OPEN_URI() ;
sub SQLITE_PERM() ;
sub SQLITE_PRAGMA() ;
sub SQLITE_PROTOCOL() ;
sub SQLITE_RANGE() ;
sub SQLITE_READ() ;
sub SQLITE_READONLY() ;
sub SQLITE_READONLY_CANTINIT() ;
sub SQLITE_READONLY_CANTLOCK() ;
sub SQLITE_READONLY_DBMOVED() ;
sub SQLITE_READONLY_DIRECTORY() ;
sub SQLITE_READONLY_RECOVERY() ;
sub SQLITE_READONLY_ROLLBACK() ;
sub SQLITE_RECURSIVE() ;
sub SQLITE_REINDEX() ;
sub SQLITE_ROW() ;
sub SQLITE_SAVEPOINT() ;
sub SQLITE_SCHEMA() ;
sub SQLITE_SELECT() ;
sub SQLITE_SUBTYPE() ;
sub SQLITE_TOOBIG() ;
sub SQLITE_TRANSACTION() ;
sub SQLITE_TXN_NONE() ;
sub SQLITE_TXN_READ() ;
sub SQLITE_TXN_WRITE() ;
sub SQLITE_UPDATE() ;
sub SQLITE_VERSION_NUMBER() ;
sub SQLITE_WARNING() ;
sub SQLITE_WARNING_AUTOINDEX() ;
sub _const_allowed_return_values_from_sqlite3_txn_state_3034000() ;
sub _const_authorizer_action_codes() ;
sub _const_authorizer_action_codes_3006008() ;
sub _const_authorizer_action_codes_3008003() ;
sub _const_authorizer_return_codes() ;
sub _const_compile_time_library_version_numbers() ;
sub _const_database_connection_configuration_options_3007000() ;
sub _const_database_connection_configuration_options_3007006() ;
sub _const_database_connection_configuration_options_3012002() ;
sub _const_database_connection_configuration_options_3013000() ;
sub _const_database_connection_configuration_options_3015000() ;
sub _const_database_connection_configuration_options_3016000() ;
sub _const_database_connection_configuration_options_3020000() ;
sub _const_database_connection_configuration_options_3022000() ;
sub _const_database_connection_configuration_options_3024000() ;
sub _const_database_connection_configuration_options_3026000() ;
sub _const_database_connection_configuration_options_3028000() ;
sub _const_database_connection_configuration_options_3029000() ;
sub _const_database_connection_configuration_options_3030000() ;
sub _const_database_connection_configuration_options_3031000() ;
sub _const_extended_result_codes_3006002() ;
sub _const_extended_result_codes_3006005() ;
sub _const_extended_result_codes_3006007() ;
sub _const_extended_result_codes_3006012() ;
sub _const_extended_result_codes_3007000() ;
sub _const_extended_result_codes_3007007() ;
sub _const_extended_result_codes_3007011() ;
sub _const_extended_result_codes_3007012() ;
sub _const_extended_result_codes_3007015() ;
sub _const_extended_result_codes_3007016() ;
sub _const_extended_result_codes_3007017() ;
sub _const_extended_result_codes_3008000() ;
sub _const_extended_result_codes_3008001() ;
sub _const_extended_result_codes_3008002() ;
sub _const_extended_result_codes_3008003() ;
sub _const_extended_result_codes_3008007() ;
sub _const_extended_result_codes_3009000() ;
sub _const_extended_result_codes_3010000() ;
sub _const_extended_result_codes_3021000() ;
sub _const_extended_result_codes_3022000() ;
sub _const_extended_result_codes_3024000() ;
sub _const_extended_result_codes_3025000() ;
sub _const_extended_result_codes_3031000() ;
sub _const_extended_result_codes_3032000() ;
sub _const_extended_result_codes_3034000() ;
sub _const_flags_for_file_open_operations() ;
sub _const_flags_for_file_open_operations_3006002() ;
sub _const_flags_for_file_open_operations_3006018() ;
sub _const_flags_for_file_open_operations_3007007() ;
sub _const_flags_for_file_open_operations_3007013() ;
sub _const_flags_for_file_open_operations_3031000() ;
sub _const_flags_for_file_open_operations_3033000() ;
sub _const_function_flags_3008003() ;
sub _const_function_flags_3030000() ;
sub _const_function_flags_3031000() ;
sub _const_fundamental_datatypes() ;
sub _const_result_codes() ;
sub _const_result_codes_3007017() ;
sub _const_run_time_limit_categories() ;
sub _const_run_time_limit_categories_3006018() ;
sub _const_run_time_limit_categories_3008007() ;
}
package DBD::SQLite::db {
sub DESTROY;
sub FETCH;
sub SQL_ALL_TYPES() ;
sub SQL_ARRAY() ;
sub SQL_ARRAY_LOCATOR() ;
sub SQL_BIGINT() ;
sub SQL_BINARY() ;
sub SQL_BIT() ;
sub SQL_BLOB() ;
sub SQL_BLOB_LOCATOR() ;
sub SQL_BOOLEAN() ;
sub SQL_CHAR() ;
sub SQL_CLOB() ;
sub SQL_CLOB_LOCATOR() ;
sub SQL_DATE() ;
sub SQL_DATETIME() ;
sub SQL_DECIMAL() ;
sub SQL_DOUBLE() ;
sub SQL_FLOAT() ;
sub SQL_GUID() ;
sub SQL_INTEGER() ;
sub SQL_INTERVAL() ;
sub SQL_INTERVAL_DAY() ;
sub SQL_INTERVAL_DAY_TO_HOUR() ;
sub SQL_INTERVAL_DAY_TO_MINUTE() ;
sub SQL_INTERVAL_DAY_TO_SECOND() ;
sub SQL_INTERVAL_HOUR() ;
sub SQL_INTERVAL_HOUR_TO_MINUTE() ;
sub SQL_INTERVAL_HOUR_TO_SECOND() ;
sub SQL_INTERVAL_MINUTE() ;
sub SQL_INTERVAL_MINUTE_TO_SECOND() ;
sub SQL_INTERVAL_MONTH() ;
sub SQL_INTERVAL_SECOND() ;
sub SQL_INTERVAL_YEAR() ;
sub SQL_INTERVAL_YEAR_TO_MONTH() ;
sub SQL_LONGVARBINARY() ;
sub SQL_LONGVARCHAR() ;
sub SQL_MULTISET() ;
sub SQL_MULTISET_LOCATOR() ;
sub SQL_NUMERIC() ;
sub SQL_REAL() ;
sub SQL_REF() ;
sub SQL_ROW() ;
sub SQL_SMALLINT() ;
sub SQL_TIME() ;
sub SQL_TIMESTAMP() ;
sub SQL_TINYINT() ;
sub SQL_TYPE_DATE() ;
sub SQL_TYPE_TIME() ;
sub SQL_TYPE_TIMESTAMP() ;
sub SQL_TYPE_TIMESTAMP_WITH_TIMEZONE() ;
sub SQL_TYPE_TIME_WITH_TIMEZONE() ;
sub SQL_UDT() ;
sub SQL_UDT_LOCATOR() ;
sub SQL_UNKNOWN_TYPE() ;
sub SQL_VARBINARY() ;
sub SQL_VARCHAR() ;
sub SQL_WCHAR() ;
sub SQL_WLONGVARCHAR() ;
sub SQL_WVARCHAR() ;
sub STORE;
sub _do;
sub _login;
sub backup_from_dbh;
sub backup_from_file;
sub backup_to_dbh;
sub backup_to_file;
sub busy_timeout;
sub collation_needed;
sub commit;
sub commit_hook;
sub create_aggregate;
sub create_collation;
sub create_function;
sub create_module;
sub db_config;
sub db_filename;
sub db_status;
sub disconnect;
sub enable_load_extension;
sub get_autocommit;
sub last_insert_id;
sub last_insert_rowid;
sub limit;
sub load_extension;
sub profile;
sub progress_handler;
sub register_fts3_perl_tokenizer;
sub rollback;
sub rollback_hook;
sub selectall_arrayref;
sub selectrow_array;
sub selectrow_arrayref;
sub set_authorizer;
sub sqlite_backup_from_dbh;
sub sqlite_backup_from_file;
sub sqlite_backup_to_dbh;
sub sqlite_backup_to_file;
sub sqlite_busy_timeout;
sub sqlite_collation_needed;
sub sqlite_commit_hook;
sub sqlite_create_aggregate;
sub sqlite_create_collation;
sub sqlite_create_function;
sub sqlite_create_module;
sub sqlite_db_config;
sub sqlite_db_filename;
sub sqlite_db_status;
sub sqlite_enable_load_extension;
sub sqlite_get_autocommit;
sub sqlite_last_insert_rowid;
sub sqlite_limit;
sub sqlite_load_extension;
sub sqlite_profile;
sub sqlite_progress_handler;
sub sqlite_register_fts3_perl_tokenizer;
sub sqlite_rollback_hook;
sub sqlite_set_authorizer;
sub sqlite_table_column_metadata;
sub sqlite_trace;
sub sqlite_txn_state;
sub sqlite_update_hook;
sub table_column_metadata;
sub txn_state;
sub update_hook;
}
package DBD::SQLite::dr {
sub dbixs_revision;
sub discon_all_;
sub disconnect_all;
}
package DBD::SQLite::st {
sub DESTROY;
sub FETCH;
sub FETCH_attrib;
sub STORE;
sub _prepare;
sub bind_col;
sub bind_param;
sub bind_param_inout;
sub blob_read;
sub execute;
sub fetch;
sub fetchall_arrayref;
sub fetchrow;
sub fetchrow_array;
sub fetchrow_arrayref;
sub finish;
sub rows;
sub sqlite_st_status;
sub st_status;
}
package DBD::_::common {
sub DELETE;
sub DESTROY;
sub FETCH;
sub STORE;
sub debug;
sub dump_handle;
sub err;
sub errstr;
sub private_data;
sub rows;
sub set_err;
sub state;
sub swap_inner_handle;
sub trace;
sub trace_msg;
}
package DBD::_::db {
sub connected;
sub preparse;
sub take_imp_data;
}
package DBD::_::dr {
sub dbixs_revision;
}
package DBD::_::st {
sub DESTROY;
sub _get_fbav;
sub _set_fbav;
sub bind_col;
sub fetch;
sub fetchrow;
sub fetchrow_array;
sub fetchrow_arrayref;
sub fetchrow_hashref;
sub finish;
sub rows;
}
package DBD::_mem::common {
sub DESTROY;
}
package DBI {
sub DBIf_TRACE_CON() ;
sub DBIf_TRACE_DBD() ;
sub DBIf_TRACE_ENC() ;
sub DBIf_TRACE_SQL() ;
sub DBIf_TRACE_TXN() ;
sub DBIpp_cm_XX() ;
sub DBIpp_cm_br() ;
sub DBIpp_cm_cs() ;
sub DBIpp_cm_dd() ;
sub DBIpp_cm_dw() ;
sub DBIpp_cm_hs() ;
sub DBIpp_ph_XX() ;
sub DBIpp_ph_cn() ;
sub DBIpp_ph_cs() ;
sub DBIpp_ph_qm() ;
sub DBIpp_ph_sp() ;
sub DBIpp_st_XX() ;
sub DBIpp_st_bs() ;
sub DBIpp_st_qq() ;
sub DBIstcf_DISCARD_STRING() ;
sub DBIstcf_STRICT() ;
sub SQL_ALL_TYPES() ;
sub SQL_ARRAY() ;
sub SQL_ARRAY_LOCATOR() ;
sub SQL_BIGINT() ;
sub SQL_BINARY() ;
sub SQL_BIT() ;
sub SQL_BLOB() ;
sub SQL_BLOB_LOCATOR() ;
sub SQL_BOOLEAN() ;
sub SQL_CHAR() ;
sub SQL_CLOB() ;
sub SQL_CLOB_LOCATOR() ;
sub SQL_CURSOR_DYNAMIC() ;
sub SQL_CURSOR_FORWARD_ONLY() ;
sub SQL_CURSOR_KEYSET_DRIVEN() ;
sub SQL_CURSOR_STATIC() ;
sub SQL_CURSOR_TYPE_DEFAULT() ;
sub SQL_DATE() ;
sub SQL_DATETIME() ;
sub SQL_DECIMAL() ;
sub SQL_DOUBLE() ;
sub SQL_FLOAT() ;
sub SQL_GUID() ;
sub SQL_INTEGER() ;
sub SQL_INTERVAL() ;
sub SQL_INTERVAL_DAY() ;
sub SQL_INTERVAL_DAY_TO_HOUR() ;
sub SQL_INTERVAL_DAY_TO_MINUTE() ;
sub SQL_INTERVAL_DAY_TO_SECOND() ;
sub SQL_INTERVAL_HOUR() ;
sub SQL_INTERVAL_HOUR_TO_MINUTE() ;
sub SQL_INTERVAL_HOUR_TO_SECOND() ;
sub SQL_INTERVAL_MINUTE() ;
sub SQL_INTERVAL_MINUTE_TO_SECOND() ;
sub SQL_INTERVAL_MONTH() ;
sub SQL_INTERVAL_SECOND() ;
sub SQL_INTERVAL_YEAR() ;
sub SQL_INTERVAL_YEAR_TO_MONTH() ;
sub SQL_LONGVARBINARY() ;
sub SQL_LONGVARCHAR() ;
sub SQL_MULTISET() ;
sub SQL_MULTISET_LOCATOR() ;
sub SQL_NUMERIC() ;
sub SQL_REAL() ;
sub SQL_REF() ;
sub SQL_ROW() ;
sub SQL_SMALLINT() ;
sub SQL_TIME() ;
sub SQL_TIMESTAMP() ;
sub SQL_TINYINT() ;
sub SQL_TYPE_DATE() ;
sub SQL_TYPE_TIME() ;
sub SQL_TYPE_TIMESTAMP() ;
sub SQL_TYPE_TIMESTAMP_WITH_TIMEZONE() ;
sub SQL_TYPE_TIME_WITH_TIMEZONE() ;
sub SQL_UDT() ;
sub SQL_UDT_LOCATOR() ;
sub SQL_UNKNOWN_TYPE() ;
sub SQL_VARBINARY() ;
sub SQL_VARCHAR() ;
sub SQL_WCHAR() ;
sub SQL_WLONGVARCHAR() ;
sub SQL_WVARCHAR() ;
sub _clone_dbis;
sub _concat_hash_sorted;
sub _dbi_state_lval;
sub _debug_dispatch;
sub _get_imp_data;
sub _handles;
sub _install_method;
sub _new_handle;
sub _setup_handle;
sub _svdump;
sub constant() ;
sub dbi_profile;
sub dbi_profile_merge;
sub dbi_profile_merge_nodes;
sub dbi_time;
sub dump_handle;
sub hash;
sub looks_like_number;
sub neat;
sub set_err;
sub sql_type_cast;
sub trace;
sub trace_msg;
}
package DBI::common {
sub CLEAR;
sub DELETE;
sub DESTROY;
sub EXISTS;
sub FETCH;
sub FETCH_many;
sub FIRSTKEY;
sub NEXTKEY;
sub STORE;
sub can;
sub debug;
sub dump_handle;
sub err;
sub errstr;
sub func;
sub parse_trace_flag;
sub parse_trace_flags;
sub private_attribute_info;
sub private_data;
sub set_err;
sub state;
sub swap_inner_handle;
sub trace;
sub trace_msg;
sub visit_child_handles;
}
package DBI::db {
sub TIEHASH;
sub begin_work;
sub clone;
sub column_info;
sub commit;
sub connected;
sub data_sources;
sub disconnect;
sub do;
sub foreign_key_info;
sub get_info;
sub last_insert_id;
sub ping;
sub prepare;
sub prepare_cached;
sub preparse;
sub primary_key;
sub primary_key_info;
sub quote;
sub quote_identifier;
sub rollback;
sub rows;
sub selectall_array;
sub selectall_arrayref;
sub selectall_hashref;
sub selectcol_arrayref;
sub selectrow_array;
sub selectrow_arrayref;
sub selectrow_hashref;
sub statistics_info;
sub table_info;
sub tables;
sub take_imp_data;
sub type_info;
sub type_info_all;
}
package DBI::dr {
sub TIEHASH;
sub connect;
sub connect_cached;
sub data_sources;
sub dbixs_revision;
sub default_user;
sub disconnect_all;
}
package DBI::st {
sub TIEHASH;
sub _get_fbav;
sub _set_fbav;
sub bind_col;
sub bind_columns;
sub bind_param;
sub bind_param_array;
sub bind_param_inout;
sub bind_param_inout_array;
sub blob_copy_to_file;
sub blob_read;
sub cured;
sub dump_results;
sub execute;
sub execute_array;
sub execute_for_fetch;
sub fetch;
sub fetchall_arrayref;
sub fetchall_hashref;
sub fetchrow;
sub fetchrow_array;
sub fetchrow_arrayref;
sub fetchrow_hashref;
sub finish;
sub last_insert_id;
sub more_results;
sub rows;
}
package DBI::var {
sub FETCH;
}
package Data::Structure::Util {
sub _utf8_off_xs($) ;
sub _utf8_on_xs($) ;
sub circular_off_xs($) ;
sub get_blessed_xs($) ;
sub get_refs_xs($) ;
sub has_circular_ref_xs($) ;
sub has_utf8_xs($) ;
sub md5_hex;
sub signature_xs($) ;
sub unbless_xs($) ;
sub utf8_off_xs($) ;
sub utf8_on_xs($) ;
}
package Data::UUID {
sub CLONE;
sub DESTROY;
sub compare;
sub create;
sub create_b64;
sub create_bin;
sub create_from_name;
sub create_from_name_b64;
sub create_from_name_bin;
sub create_from_name_hex;
sub create_from_name_str;
sub create_hex;
sub create_str;
sub from_b64string;
sub from_hexstring;
sub from_string;
sub new;
sub to_b64string;
sub to_hexstring;
sub to_string;
}
package Devel::Caller {
sub _context_cv;
sub _context_op;
}
package Devel::Cover {
sub abs_path;
sub getcwd;
sub main_cv;
sub main_root;
sub main_start;
sub ppname;
}
package Devel::Cover::Util {
sub abs_path;
}
package Devel::LexAlias {
sub _lexalias;
}
package Devel::OverloadInfo {
sub blessed($) ;
sub subname;
}
package Digest::MD5 {
sub DESTROY;
sub add;
sub addfile;
sub b64digest;
sub clone;
sub context;
sub digest;
sub hexdigest;
sub md5;
sub md5_base64;
sub md5_hex;
sub new;
sub reset;
}
package Digest::SHA1 {
sub DESTROY;
sub add;
sub addfile;
sub b64digest;
sub clone;
sub digest;
sub hexdigest;
sub new;
sub sha1;
sub sha1_base64;
sub sha1_hex;
sub sha1_transform;
}
package Digest::base {
sub add;
sub clone;
sub digest;
sub new;
}
package DynaLoader {
sub CLONE;
sub boot_DynaLoader;
sub dl_error;
sub dl_find_symbol;
sub dl_install_xsub;
sub dl_load_file;
sub dl_undef_symbols;
sub dl_unload_file;
}
package EV {
sub _ae_io($$$) ;
sub async($) ;
sub async_ns($) ;
sub backend() ;
sub break(;$) ;
sub check($) ;
sub check_ns($) ;
sub child($$$) ;
sub child_ns($$$) ;
sub default_destroy() ;
sub default_loop(;$) ;
sub depth() ;
sub embed($;$) ;
sub embed_ns($;$) ;
sub embeddable_backends() ;
sub feed_fd_event($;$) ;
sub feed_signal($) ;
sub feed_signal_event($) ;
sub fork($) ;
sub fork_ns($) ;
sub idle($) ;
sub idle_ns($) ;
sub invoke_pending() ;
sub io($$$) ;
sub io_ns($$$) ;
sub iteration() ;
sub loop(;$) ;
sub loop_count() ;
sub loop_depth() ;
sub loop_verify() ;
sub now() ;
sub now_update() ;
sub once($$$$) ;
sub pending_count() ;
sub periodic($$$$) ;
sub periodic_ns($$$$) ;
sub prepare($) ;
sub prepare_ns($) ;
sub recommended_backends() ;
sub resume() ;
sub run(;$) ;
sub set_io_collect_interval($) ;
sub set_timeout_collect_interval($) ;
sub signal($$) ;
sub signal_ns($$) ;
sub sleep($) ;
sub stat($$$) ;
sub stat_ns($$$) ;
sub supported_backends() ;
sub suspend() ;
sub time() ;
sub timer($$$) ;
sub timer_ns($$$) ;
sub unloop(;$) ;
sub verify() ;
}
package EV::Async {
sub DESTROY;
sub async_pending;
sub send;
sub start;
sub stop;
}
package EV::Check {
sub DESTROY;
sub start;
sub stop;
}
package EV::Child {
sub DESTROY;
sub pid;
sub rpid;
sub rstatus;
sub set;
sub start;
sub stop;
}
package EV::Embed {
sub DESTROY;
sub other;
sub set;
sub start;
sub stop;
sub sweep;
}
package EV::Fork {
sub DESTROY;
sub start;
sub stop;
}
package EV::IO {
sub DESTROY;
sub events;
sub fh;
sub set;
sub start;
sub stop;
}
package EV::Idle {
sub DESTROY;
sub start;
sub stop;
}
package EV::Loop {
sub DESTROY;
sub async;
sub async_ns;
sub backend;
sub break;
sub check;
sub check_ns;
sub child;
sub child_ns;
sub depth;
sub embed;
sub embed_ns;
sub feed_fd_event;
sub fork;
sub fork_ns;
sub idle;
sub idle_ns;
sub invoke_pending;
sub io;
sub io_ns;
sub iteration;
sub loop;
sub loop_count;
sub loop_depth;
sub loop_fork;
sub loop_verify;
sub new;
sub now;
sub now_update;
sub once;
sub pending_count;
sub periodic;
sub periodic_ns;
sub prepare;
sub prepare_ns;
sub resume;
sub run;
sub set_io_collect_interval;
sub set_timeout_collect_interval;
sub signal;
sub signal_ns;
sub stat;
sub stat_ns;
sub suspend;
sub timer;
sub timer_ns;
sub unloop;
sub verify;
}
package EV::Periodic {
sub DESTROY;
sub again;
sub at;
sub interval;
sub offset;
sub reschedule_cb;
sub set;
sub start;
sub stop;
}
package EV::Prepare {
sub DESTROY;
sub start;
sub stop;
}
package EV::Signal {
sub DESTROY;
sub set;
sub signal;
sub start;
sub stop;
}
package EV::Stat {
sub DESTROY;
sub attr;
sub interval;
sub path;
sub prev;
sub set;
sub start;
sub stat;
sub stop;
}
package EV::Timer {
sub DESTROY;
sub again;
sub remaining;
sub repeat;
sub set;
sub start;
sub stop;
}
package EV::Watcher {
sub cb;
sub clear_pending;
sub data;
sub feed_event;
sub invoke;
sub is_active;
sub is_pending;
sub keepalive;
sub loop;
sub priority;
}
package Encode {
sub _utf8_off($) ;
sub _utf8_on($) ;
sub bytes2str($$;$) ;
sub decode($$;$) ;
sub decode_utf8($;$) ;
sub encode($$;$) ;
sub encode_utf8($) ;
sub from_to($$$;$) ;
sub is_16bit;
sub is_8bit;
sub is_utf8($;$) ;
sub onBOOT() ;
sub str2bytes($$;$) ;
sub utf8_downgrade;
sub utf8_upgrade;
}
package Encode::XS {
sub cat_decode;
sub decode;
sub encode;
sub mime_name;
sub name;
sub needs_lines;
sub perlio_ok;
sub renew;
sub renewed;
}
package Encode::utf8 {
sub decode;
sub encode;
}
package Eval::Closure {
sub reftype($) ;
}
package FCGI {
sub Accept($) ;
sub Attach($) ;
sub CloseSocket($) ;
sub DESTROY;
sub Detach($) ;
sub Finish($) ;
sub Flush($) ;
sub GetEnvironment($) ;
sub GetHandles($) ;
sub IsFastCGI($) ;
sub LastCall($) ;
sub OpenSocket($$) ;
sub RequestX(***$$$) ;
sub StartFilterData($) ;
}
package FCGI::Stream {
sub CLOSE;
sub EOF;
sub FILENO;
sub GETC;
sub PRINT;
sub READ;
sub WRITE;
}
package Fcntl {
sub AUTOLOAD;
sub FCREAT() ;
sub FDEFER() ;
sub FDSYNC() ;
sub FEXCL() ;
sub FLARGEFILE() ;
sub FRSYNC() ;
sub FSYNC() ;
sub FTRUNC() ;
sub F_ALLOCSP() ;
sub F_ALLOCSP64() ;
sub F_COMPAT() ;
sub F_DUP2FD() ;
sub F_FREESP() ;
sub F_FREESP64() ;
sub F_FSYNC() ;
sub F_FSYNC64() ;
sub F_NODNY() ;
sub F_POSIX() ;
sub F_RDACC() ;
sub F_RDDNY() ;
sub F_RWACC() ;
sub F_RWDNY() ;
sub F_SHARE() ;
sub F_UNSHARE() ;
sub F_WRACC() ;
sub F_WRDNY() ;
sub O_ALIAS() ;
sub O_ALT_IO() ;
sub O_DEFER() ;
sub O_EVTONLY() ;
sub O_EXLOCK() ;
sub O_IGNORE_CTTY() ;
sub O_NOINHERIT() ;
sub O_NOLINK() ;
sub O_NOSIGPIPE() ;
sub O_NOTRANS() ;
sub O_RANDOM() ;
sub O_RAW() ;
sub O_RSRC() ;
sub O_SEQUENTIAL() ;
sub O_SHLOCK() ;
sub O_SYMLINK() ;
sub O_TEMPORARY() ;
sub O_TTY_INIT() ;
sub S_ENFMT() ;
sub S_IFMT;
sub S_IFWHT() ;
sub S_IMODE;
sub S_ISBLK;
sub S_ISCHR;
sub S_ISDIR;
sub S_ISENFMT;
sub S_ISFIFO;
sub S_ISLNK;
sub S_ISREG;
sub S_ISSOCK;
sub S_ISTXT() ;
sub S_ISWHT;
}
package File::FcntlLock {
sub ARG_MAX() ;
sub CHILD_MAX() ;
sub CLK_TCK() ;
sub C_fcntl_lock($$$$) ;
sub EOTHER() ;
sub EPROCLIM() ;
sub LDBL_EPSILON() ;
sub LDBL_MAX() ;
sub LDBL_MIN() ;
sub LINK_MAX() ;
sub NDEBUG;
sub OPEN_MAX() ;
sub STREAM_MAX() ;
sub S_ISBLK;
sub S_ISCHR;
sub S_ISDIR;
sub S_ISFIFO;
sub S_ISREG;
sub TZNAME_MAX() ;
sub WEXITSTATUS;
sub WIFEXITED;
sub WIFSIGNALED;
sub WIFSTOPPED;
sub WSTOPSIG;
sub WTERMSIG;
sub _exit;
sub abort;
sub access;
sub acos;
sub asctime;
sub asin;
sub assert;
sub atan;
sub atexit;
sub atof;
sub atoi;
sub atol;
sub bsearch;
sub calloc;
sub ceil;
sub cfgetispeed;
sub cfgetospeed;
sub cfsetispeed;
sub cfsetospeed;
sub clearerr;
sub clock;
sub cosh;
sub creat;
sub ctermid;
sub ctime;
sub cuserid;
sub difftime;
sub div;
sub dup2;
sub dup;
sub errno;
sub execl;
sub execle;
sub execlp;
sub execv;
sub execve;
sub execvp;
sub fabs;
sub fclose;
sub fdopen;
sub feof;
sub ferror;
sub fflush;
sub fgetc;
sub fgetpos;
sub fgets;
sub floor;
sub fmod;
sub fopen;
sub fpathconf;
sub fprintf;
sub fputc;
sub fputs;
sub fread;
sub free;
sub freopen;
sub frexp;
sub fscanf;
sub fseek;
sub fsetpos;
sub fstat;
sub fsync;
sub ftell;
sub fwrite;
sub getchar;
sub getcwd;
sub getegid;
sub getenv;
sub geteuid;
sub getgid;
sub getgroups;
sub getpid;
sub gets;
sub getuid;
sub isatty;
sub labs;
sub ldexp;
sub ldiv;
sub localeconv;
sub log10;
sub longjmp;
sub lseek;
sub malloc;
sub mblen;
sub mbstowcs;
sub mbtowc;
sub memchr;
sub memcmp;
sub memcpy;
sub memmove;
sub memset;
sub mkfifo;
sub mktime;
sub modf;
sub offsetof;
sub pathconf;
sub pause;
sub pow;
sub putc;
sub putchar;
sub puts;
sub qsort;
sub raise;
sub realloc;
sub remove;
sub rewind;
sub scanf;
sub setbuf;
sub setgid;
sub setjmp;
sub setlocale;
sub setpgid;
sub setsid;
sub setuid;
sub setvbuf;
sub sigaction;
sub siglongjmp;
sub signal;
sub sigpending;
sub sigprocmask;
sub sigsetjmp;
sub sigsuspend;
sub sinh;
sub sscanf;
sub stderr;
sub stdin;
sub stdout;
sub strcat;
sub strchr;
sub strcmp;
sub strcoll;
sub strcpy;
sub strcspn;
sub strerror;
sub strftime;
sub strlen;
sub strncat;
sub strncmp;
sub strncpy;
sub strpbrk;
sub strrchr;
sub strspn;
sub strstr;
sub strtod;
sub strtok;
sub strtol;
sub strtoul;
sub strxfrm;
sub sysconf;
sub tan;
sub tanh;
sub tcdrain;
sub tcflow;
sub tcflush;
sub tcgetattr;
sub tcgetpgrp;
sub tcsendbreak;
sub tcsetattr;
sub tcsetpgrp;
sub tmpfile;
sub tmpnam;
sub ttyname;
sub tzname;
sub tzset;
sub uname;
sub ungetc;
sub vfprintf;
sub vprintf;
sub vsprintf;
sub wcstombs;
sub wctomb;
}
package File::FcntlLock::Core {
sub ARG_MAX() ;
sub CHILD_MAX() ;
sub CLK_TCK() ;
sub EOTHER() ;
sub EPROCLIM() ;
sub LDBL_EPSILON() ;
sub LDBL_MAX() ;
sub LDBL_MIN() ;
sub LINK_MAX() ;
sub NDEBUG;
sub OPEN_MAX() ;
sub STREAM_MAX() ;
sub S_ISBLK;
sub S_ISCHR;
sub S_ISDIR;
sub S_ISFIFO;
sub S_ISREG;
sub TZNAME_MAX() ;
sub WEXITSTATUS;
sub WIFEXITED;
sub WIFSIGNALED;
sub WIFSTOPPED;
sub WSTOPSIG;
sub WTERMSIG;
sub _exit;
sub abort;
sub access;
sub acos;
sub asctime;
sub asin;
sub assert;
sub atan;
sub atexit;
sub atof;
sub atoi;
sub atol;
sub bsearch;
sub calloc;
sub ceil;
sub cfgetispeed;
sub cfgetospeed;
sub cfsetispeed;
sub cfsetospeed;
sub clearerr;
sub clock;
sub cosh;
sub creat;
sub ctermid;
sub ctime;
sub cuserid;
sub difftime;
sub div;
sub dup2;
sub dup;
sub errno;
sub execl;
sub execle;
sub execlp;
sub execv;
sub execve;
sub execvp;
sub fabs;
sub fclose;
sub fdopen;
sub feof;
sub ferror;
sub fflush;
sub fgetc;
sub fgetpos;
sub fgets;
sub floor;
sub fmod;
sub fopen;
sub fpathconf;
sub fprintf;
sub fputc;
sub fputs;
sub fread;
sub free;
sub freopen;
sub frexp;
sub fscanf;
sub fseek;
sub fsetpos;
sub fstat;
sub fsync;
sub ftell;
sub fwrite;
sub getchar;
sub getcwd;
sub getegid;
sub getenv;
sub geteuid;
sub getgid;
sub getgroups;
sub getpid;
sub gets;
sub getuid;
sub isatty;
sub labs;
sub ldexp;
sub ldiv;
sub localeconv;
sub log10;
sub longjmp;
sub lseek;
sub malloc;
sub mblen;
sub mbstowcs;
sub mbtowc;
sub memchr;
sub memcmp;
sub memcpy;
sub memmove;
sub memset;
sub mkfifo;
sub mktime;
sub modf;
sub offsetof;
sub pathconf;
sub pause;
sub pow;
sub putc;
sub putchar;
sub puts;
sub qsort;
sub raise;
sub realloc;
sub remove;
sub rewind;
sub scanf;
sub setbuf;
sub setgid;
sub setjmp;
sub setlocale;
sub setpgid;
sub setsid;
sub setuid;
sub setvbuf;
sub sigaction;
sub siglongjmp;
sub signal;
sub sigpending;
sub sigprocmask;
sub sigsetjmp;
sub sigsuspend;
sub sinh;
sub sscanf;
sub stderr;
sub stdin;
sub stdout;
sub strcat;
sub strchr;
sub strcmp;
sub strcoll;
sub strcpy;
sub strcspn;
sub strerror;
sub strftime;
sub strlen;
sub strncat;
sub strncmp;
sub strncpy;
sub strpbrk;
sub strrchr;
sub strspn;
sub strstr;
sub strtod;
sub strtok;
sub strtol;
sub strtoul;
sub strxfrm;
sub sysconf;
sub tan;
sub tanh;
sub tcdrain;
sub tcflow;
sub tcflush;
sub tcgetattr;
sub tcgetpgrp;
sub tcsendbreak;
sub tcsetattr;
sub tcsetpgrp;
sub tmpfile;
sub tmpnam;
sub ttyname;
sub tzname;
sub tzset;
sub uname;
sub ungetc;
sub vfprintf;
sub vprintf;
sub vsprintf;
sub wcstombs;
sub wctomb;
}
package File::Find {
sub is_tainted($) ;
}
package File::Glob {
sub AUTOLOAD;
sub CLONE;
sub GLOB_ERROR;
sub bsd_glob;
sub bsd_glob_override;
sub csh_glob;
}
package File::Path {
sub getcwd;
}
package File::Spec::Unix {
sub _fn_canonpath;
sub _fn_catdir;
sub _fn_catfile;
sub canonpath;
sub catdir;
sub catfile;
}
package File::Temp {
sub F_ALLOCSP() ;
sub F_ALLOCSP64() ;
sub F_COMPAT() ;
sub F_DUP2FD() ;
sub F_FREESP() ;
sub F_FREESP64() ;
sub F_FSYNC() ;
sub F_FSYNC64() ;
sub F_NODNY() ;
sub F_POSIX() ;
sub F_RDACC() ;
sub F_RDDNY() ;
sub F_RWACC() ;
sub F_RWDNY() ;
sub F_SHARE() ;
sub F_UNSHARE() ;
sub F_WRACC() ;
sub F_WRDNY() ;
sub O_ALIAS() ;
sub O_DEFER() ;
sub O_EXLOCK() ;
sub O_NOINHERIT() ;
sub O_RANDOM() ;
sub O_RAW() ;
sub O_RSRC() ;
sub O_SEQUENTIAL() ;
sub O_SHLOCK() ;
sub O_TEMPORARY() ;
sub refaddr($) ;
}
package Filter::Util::Call {
sub filter_del() ;
sub filter_read(;$) ;
sub real_import($$$) ;
sub unimport(;$@) ;
}
package Glib {
sub CHECK_VERSION;
sub GET_VERSION_INFO;
sub MAJOR_VERSION;
sub MICRO_VERSION;
sub MINOR_VERSION;
sub critical;
sub error;
sub filename_display_basename;
sub filename_display_name;
sub filename_from_unicode($) ;
sub filename_from_uri($) ;
sub filename_to_unicode($) ;
sub filename_to_uri($$) ;
sub get_application_name;
sub get_home_dir;
sub get_language_names;
sub get_prgname;
sub get_real_name;
sub get_system_config_dirs;
sub get_system_data_dirs;
sub get_tmp_dir;
sub get_user_cache_dir;
sub get_user_config_dir;
sub get_user_data_dir;
sub get_user_name;
sub get_user_special_dir;
sub install_exception_handler;
sub log;
sub main_depth;
sub major_version;
sub message;
sub micro_version;
sub minor_version;
sub remove_exception_handler;
sub set_application_name;
sub set_prgname;
sub strerror;
sub strsignal;
sub warning;
}
package Glib::BookmarkFile {
sub DESTROY;
sub add_application;
sub add_group;
sub get_added;
sub get_app_info;
sub get_applications;
sub get_description;
sub get_groups;
sub get_icon;
sub get_is_private;
sub get_mime_type;
sub get_modified;
sub get_size;
sub get_title;
sub get_uris;
sub get_visited;
sub has_application;
sub has_group;
sub has_item;
sub load_from_data;
sub load_from_data_dirs;
sub load_from_file;
sub move_item;
sub new;
sub remove_application;
sub remove_group;
sub remove_item;
sub set_added;
sub set_app_info;
sub set_description;
sub set_groups;
sub set_icon;
sub set_is_private;
sub set_mime_type;
sub set_modified;
sub set_title;
sub set_visited;
sub to_data;
sub to_file;
}
package Glib::Boxed {
sub DESTROY;
sub copy;
}
package Glib::Bytes {
sub compare;
sub equal;
sub get_data;
sub get_size;
sub hash;
sub new;
}
package Glib::Child {
sub watch_add;
}
package Glib::Error {
sub matches;
sub new;
sub register;
sub throw;
}
package Glib::Flags {
sub all;
sub as_arrayref($;@) ;
sub bool($;@) ;
sub eq;
sub ge;
sub intersect;
sub ne;
sub new;
sub sub;
sub union;
sub xor;
}
package Glib::IO {
sub add_watch;
}
package Glib::Idle {
sub add;
}
package Glib::KeyFile {
sub DESTROY;
sub get_boolean;
sub get_boolean_list;
sub get_comment;
sub get_double;
sub get_double_list;
sub get_groups;
sub get_integer;
sub get_integer_list;
sub get_keys;
sub get_locale_string;
sub get_locale_string_list;
sub get_start_group;
sub get_string;
sub get_string_list;
sub get_value;
sub has_group;
sub has_key;
sub load_from_data;
sub load_from_data_dirs;
sub load_from_dirs;
sub load_from_file;
sub new;
sub remove_comment;
sub remove_group;
sub remove_key;
sub set_boolean;
sub set_boolean_list;
sub set_comment;
sub set_double;
sub set_double_list;
sub set_integer;
sub set_integer_list;
sub set_list_separator;
sub set_locale_string;
sub set_locale_string_list;
sub set_string;
sub set_string_list;
sub set_value;
sub to_data;
}
package Glib::Log {
sub default_handler;
sub remove_handler;
sub set_always_fatal;
sub set_default_handler;
sub set_fatal_mask;
sub set_handler;
}
package Glib::MainContext {
sub DESTROY;
sub default;
sub is_owner;
sub iteration;
sub new;
sub pending;
}
package Glib::MainLoop {
sub DESTROY;
sub get_context;
sub is_running;
sub new;
sub quit;
sub run;
}
package Glib::Markup {
sub escape_text;
}
package Glib::Object {
sub CLONE;
sub DESTROY;
sub find_property;
sub freeze_notify;
sub get;
sub get_data;
sub get_pointer;
sub get_property;
sub list_properties;
sub new;
sub new_from_pointer;
sub notify;
sub set;
sub set_data;
sub set_property;
sub set_threadsafe;
sub signal_add_emission_hook;
sub signal_chain_from_overridden;
sub signal_connect;
sub signal_connect_after;
sub signal_connect_swapped;
sub signal_emit;
sub signal_get_invocation_hint;
sub signal_handler_block;
sub signal_handler_disconnect;
sub signal_handler_is_connected;
sub signal_handler_unblock;
sub signal_handlers_block_by_func;
sub signal_handlers_disconnect_by_func;
sub signal_handlers_unblock_by_func;
sub signal_query;
sub signal_remove_emission_hook;
sub signal_stop_emission_by_name;
sub thaw_notify;
}
package Glib::Object::Introspection {
sub CHECK_VERSION;
sub _add_interface;
sub _construct_boxed;
sub _fetch_constant;
sub _find_non_perl_parents;
sub _find_vfuncs_with_implementation;
sub _get_field;
sub _install_overrides;
sub _invoke_fallback_vfunc;
sub _load_library;
sub _register_boxed_synonym;
sub _register_types;
sub _set_field;
sub _use_generic_signal_marshaller_for;
sub convert_enum_to_sv;
sub convert_flags_to_sv;
sub convert_sv_to_enum;
sub convert_sv_to_flags;
sub invoke;
}
package Glib::Object::Introspection::GValueWrapper {
sub DESTROY;
sub get_value;
sub new;
}
package Glib::Object::Introspection::_FuncWrapper {
sub DESTROY;
sub _invoke;
}
package Glib::Object::_LazyLoader {
sub _load;
}
package Glib::OptionContext {
sub add_group;
sub add_main_entries;
sub get_help_enabled;
sub get_ignore_unknown_options;
sub get_main_group;
sub new;
sub parse;
sub set_help_enabled;
sub set_ignore_unknown_options;
sub set_main_group;
}
package Glib::OptionGroup {
sub new;
sub set_translate_func;
sub set_translation_domain;
}
package Glib::Param::Char {
sub get_maximum;
sub get_minimum;
}
package Glib::Param::Double {
sub get_epsilon;
sub get_maximum;
sub get_minimum;
}
package Glib::Param::Enum {
sub get_enum_class;
}
package Glib::Param::Flags {
sub get_flags_class;
}
package Glib::Param::Float {
sub get_epsilon;
sub get_maximum;
sub get_minimum;
}
package Glib::Param::GType {
sub get_is_a_type;
}
package Glib::Param::Int {
sub get_maximum;
sub get_minimum;
}
package Glib::Param::Int64 {
sub get_maximum;
sub get_minimum;
}
package Glib::Param::Long {
sub get_maximum;
sub get_minimum;
}
package Glib::Param::UChar {
sub get_maximum;
sub get_minimum;
}
package Glib::Param::UInt {
sub get_maximum;
sub get_minimum;
}
package Glib::Param::UInt64 {
sub get_maximum;
sub get_minimum;
}
package Glib::Param::ULong {
sub get_maximum;
sub get_minimum;
}
package Glib::ParamSpec {
sub DESTROY;
sub IV;
sub UV;
sub boolean;
sub boxed;
sub char;
sub double;
sub enum;
sub flags;
sub float;
sub get_blurb;
sub get_default_value;
sub get_flags;
sub get_name;
sub get_nick;
sub get_owner_type;
sub get_redirect_target;
sub get_value_type;
sub gtype;
sub int64;
sub int;
sub long;
sub object;
sub override;
sub param_spec;
sub scalar;
sub string;
sub uchar;
sub uint64;
sub uint;
sub ulong;
sub unichar;
sub value_validate;
sub values_cmp;
}
package Glib::Source {
sub remove;
}
package Glib::Timeout {
sub add;
sub add_seconds;
}
package Glib::Type {
sub list_ancestors;
sub list_interfaces;
sub list_signals;
sub list_values;
sub package_from_cname;
sub register;
sub register_enum;
sub register_flags;
sub register_object;
}
package Glib::Variant {
sub DESTROY;
sub byteswap;
sub classify;
sub compare;
sub equal;
sub get_boolean;
sub get_byte;
sub get_bytestring;
sub get_child_value;
sub get_double;
sub get_handle;
sub get_int16;
sub get_int32;
sub get_int64;
sub get_maybe;
sub get_normal_form;
sub get_size;
sub get_string;
sub get_type;
sub get_type_string;
sub get_uint16;
sub get_uint32;
sub get_uint64;
sub get_variant;
sub hash;
sub is_container;
sub is_normal_form;
sub is_object_path;
sub is_of_type;
sub is_signature;
sub lookup_value;
sub n_children;
sub new_array;
sub new_boolean;
sub new_byte;
sub new_bytestring;
sub new_dict_entry;
sub new_double;
sub new_handle;
sub new_int16;
sub new_int32;
sub new_int64;
sub new_maybe;
sub new_object_path;
sub new_signature;
sub new_string;
sub new_tuple;
sub new_uint16;
sub new_uint32;
sub new_uint64;
sub new_variant;
sub parse;
sub print;
}
package Glib::VariantDict {
sub contains;
sub end;
sub insert_value;
sub lookup_value;
sub new;
sub remove;
}
package Glib::VariantType {
sub element;
sub equal;
sub first;
sub get_string;
sub hash;
sub is_array;
sub is_basic;
sub is_container;
sub is_definite;
sub is_dict_entry;
sub is_maybe;
sub is_subtype_of;
sub is_tuple;
sub is_variant;
sub key;
sub n_items;
sub new;
sub new_array;
sub new_dict_entry;
sub new_maybe;
sub new_tuple;
sub next;
sub string_is_valid;
sub string_scan;
sub value;
}
package GslAccelPtr {
sub DESTROY($) ;
}
package GslSplinePtr {
sub DESTROY($) ;
}
package Guard {
sub cured($) ;
sub guard(&) ;
sub scope_guard(&) ;
}
package HTML::Entities {
sub UNICODE_SUPPORT() ;
sub _decode_entities;
sub _probably_utf8_chunk;
sub decode;
sub decode_entities;
}
package HTML::Parser {
sub _alloc_pstate;
sub attr_encoded;
sub backquote;
sub boolean_attribute_value;
sub case_sensitive;
sub closing_plaintext;
sub empty_element_tags;
sub eof;
sub handler;
sub ignore_elements;
sub ignore_tags;
sub marked_sections;
sub parse;
sub report_tags;
sub strict_comment;
sub strict_end;
sub strict_names;
sub unbroken_text;
sub utf8_mode;
sub xml_mode;
sub xml_pic;
}
package Hash::FieldHash {
sub CLONE;
sub fieldhash(\%;$$) ;
sub from_hash;
sub to_hash;
}
package Hash::Util {
sub _clear_placeholders(\%) ;
sub all_keys(\%\@\@) ;
sub bucket_array;
sub bucket_info;
sub bucket_ratio(\%) ;
sub hash_seed() ;
sub hash_traversal_mask;
sub hash_value($;$) ;
sub hidden_ref_keys;
sub hv_store(\%$$) ;
sub legal_ref_keys;
sub num_buckets(\%) ;
sub reftype($) ;
sub used_buckets(\%) ;
}
package IO::File {
sub O_ALIAS() ;
sub O_DEFER() ;
sub O_EXLOCK() ;
sub O_NOINHERIT() ;
sub O_RANDOM() ;
sub O_RAW() ;
sub O_RSRC() ;
sub O_SEQUENTIAL() ;
sub O_SHLOCK() ;
sub O_TEMPORARY() ;
sub new_tmpfile;
}
package IO::Handle {
sub _create_getline_subs;
sub blocking($;$) ;
sub clearerr;
sub error;
sub flush;
sub setbuf;
sub setvbuf;
sub sync;
sub ungetc;
sub untaint;
}
package IO::Poll {
sub _poll;
}
package IO::Pty {
sub pty_allocate;
}
package IO::Seekable {
sub getpos;
sub setpos;
}
package IO::Socket {
sub sockatmark($) ;
}
package IO::Tty {
sub O_ALIAS() ;
sub O_DEFER() ;
sub O_EXLOCK() ;
sub O_NOINHERIT() ;
sub O_RANDOM() ;
sub O_RAW() ;
sub O_RSRC() ;
sub O_SEQUENTIAL() ;
sub O_SHLOCK() ;
sub O_TEMPORARY() ;
sub pack_winsize;
sub ttyname;
sub unpack_winsize;
}
package Imager {
sub DSO_call($$$) ;
sub DSO_close($) ;
sub DSO_funclist($) ;
sub DSO_open($) ;
sub O_ALIAS() ;
sub O_DEFER() ;
sub O_EXLOCK() ;
sub O_NOINHERIT() ;
sub O_RANDOM() ;
sub O_RAW() ;
sub O_RSRC() ;
sub O_SEQUENTIAL() ;
sub O_SHLOCK() ;
sub O_TEMPORARY() ;
sub _is_color_object($) ;
sub i_add_file_magic($$$) ;
sub i_addcolors($;@) ;
sub i_arc($$$$$$$) ;
sub i_arc_aa($$$$$$$) ;
sub i_arc_aa_cfill($$$$$$$) ;
sub i_arc_cfill($$$$$$$) ;
sub i_arc_out($$$$$$$) ;
sub i_arc_out_aa($$$$$$$) ;
sub i_autolevels($$$$) ;
sub i_autolevels_mono($$$) ;
sub i_bezier_multi($$$$) ;
sub i_box($$$$$$) ;
sub i_box_cfill($$$$$$) ;
sub i_box_filled($$$$$$) ;
sub i_box_filledf($$$$$$) ;
sub i_bumpmap($$$$$$) ;
sub i_bumpmap_complex($$$$$$$$$$$$$$) ;
sub i_circle_aa($$$$$) ;
sub i_circle_aa_fill($$$$$) ;
sub i_circle_out($$$$$) ;
sub i_circle_out_aa($$$$$) ;
sub i_clear_error() ;
sub i_colorcount($) ;
sub i_combine($;$) ;
sub i_compose($$$$$$$$;$$) ;
sub i_compose_mask($$$$$$$$$$$;$$) ;
sub i_contrast($$) ;
sub i_conv($$) ;
sub i_convert($$) ;
sub i_copy($) ;
sub i_copyto($$$$$$$$) ;
sub i_copyto_trans($$$$$$$$$) ;
sub i_count_colors($$) ;
sub i_diff_image($$;$) ;
sub i_errors() ;
sub i_findcolor($$) ;
sub i_flipxy($$) ;
sub i_flood_cfill($$$$) ;
sub i_flood_cfill_border($$$$$) ;
sub i_flood_fill($$$$) ;
sub i_flood_fill_border($$$$$) ;
sub i_fountain($$$$$$$$$$$) ;
sub i_gaussian($$) ;
sub i_gaussian2($$$) ;
sub i_get_anonymous_color_histo($;$) ;
sub i_get_image_file_limits() ;
sub i_get_pixel($$$) ;
sub i_getcolors($$;$) ;
sub i_glin($$$$) ;
sub i_glinf($$$$) ;
sub i_gpal($$$$) ;
sub i_gpixf($$$) ;
sub i_gradgen($$$$$) ;
sub i_gsamp($$$$$) ;
sub i_gsamp_bits($$$$$$$$) ;
sub i_gsampf($$$$$) ;
sub i_haar($) ;
sub i_hardinvert($) ;
sub i_hardinvertall($) ;
sub i_img_16_new($$$) ;
sub i_img_8_new($$$) ;
sub i_img_alpha_channel($) ;
sub i_img_bits($) ;
sub i_img_color_channels($) ;
sub i_img_color_model($) ;
sub i_img_diff($$) ;
sub i_img_diffd($$) ;
sub i_img_double_new($$$) ;
sub i_img_epsilonf() ;
sub i_img_get_height($) ;
sub i_img_get_width($) ;
sub i_img_getchannels($) ;
sub i_img_getdata($) ;
sub i_img_getmask($) ;
sub i_img_info($) ;
sub i_img_is_monochrome($) ;
sub i_img_make_palette($;@) ;
sub i_img_masked_new($$$$$$) ;
sub i_img_pal_new($$$$) ;
sub i_img_samef($$;$$) ;
sub i_img_setmask($$) ;
sub i_img_to_drgb($) ;
sub i_img_to_pal($$) ;
sub i_img_to_rgb($) ;
sub i_img_to_rgb16($) ;
sub i_img_type($) ;
sub i_img_virtual($) ;
sub i_init_log($$) ;
sub i_int_check_image_file_limits;
sub i_line($$$$$$$) ;
sub i_line_aa($$$$$$$) ;
sub i_list_formats() ;
sub i_log_enabled() ;
sub i_log_entry($$) ;
sub i_map($$) ;
sub i_matrix_transform($$$$;@) ;
sub i_maxcolors($) ;
sub i_mosaic($$) ;
sub i_nearest_color($;@) ;
sub i_new_fill_fount($$$$$$$$$$) ;
sub i_new_fill_hatch($$$$$$$) ;
sub i_new_fill_hatchf($$$$$$$) ;
sub i_new_fill_image($$$$$) ;
sub i_new_fill_opacity($$) ;
sub i_new_fill_solid($$) ;
sub i_new_fill_solidf($$) ;
sub i_noise($$$) ;
sub i_plin($$$;@) ;
sub i_plinf($$$;@) ;
sub i_poly_aa_cfill_m($$$$$) ;
sub i_poly_aa_m($$$$$) ;
sub i_poly_poly_aa($$$$) ;
sub i_poly_poly_aa_cfill($$$$) ;
sub i_postlevels($$) ;
sub i_ppal($$$;@) ;
sub i_ppal_p($$$$) ;
sub i_ppix($$$$) ;
sub i_ppixf($$$$) ;
sub i_psamp($$$$$;$$) ;
sub i_psamp_bits($$$$$$;$$) ;
sub i_psampf($$$$$;$$) ;
sub i_push_error($$) ;
sub i_radnoise($$$$$) ;
sub i_readbmp_wiol($;$) ;
sub i_readpnm_multi_wiol($$) ;
sub i_readpnm_wiol($$) ;
sub i_readraw_wiol($$$$$$) ;
sub i_readtga_wiol($$) ;
sub i_rotate90($$) ;
sub i_rotate_exact($$;@) ;
sub i_rubthru($$$$$$$$) ;
sub i_sametype($$$) ;
sub i_sametype_chans($$$$) ;
sub i_scale_mixing($$$) ;
sub i_scale_nn($$$) ;
sub i_scaleaxis($$$) ;
sub i_set_image_file_limits($$$) ;
sub i_setcolors($$;@) ;
sub i_tags_add($$$$$) ;
sub i_tags_addn($$$$) ;
sub i_tags_count($) ;
sub i_tags_delbycode($$) ;
sub i_tags_delbyname($$) ;
sub i_tags_delete($$) ;
sub i_tags_find($$$) ;
sub i_tags_findn($$$) ;
sub i_tags_get($$) ;
sub i_tags_get_string($$) ;
sub i_test_format_probe($$) ;
sub i_transform($$$$) ;
sub i_transform2($$$$$$$) ;
sub i_turbnoise($$$$) ;
sub i_unsharp_mask($$$) ;
sub i_watermark($$$$$) ;
sub i_writebmp_wiol($$) ;
sub i_writeppm_wiol($$) ;
sub i_writeraw_wiol($$) ;
sub i_writetga_wiol($$$$$) ;
sub io_new_bufchain() ;
sub io_new_buffer($) ;
sub io_new_cb($$$$;$) ;
sub io_new_fd($) ;
sub io_slurp($) ;
sub malloc_state() ;
}
package Imager::Color {
sub DESTROY;
sub alpha;
sub blue;
sub green;
sub i_hsv_to_rgb;
sub i_rgb_to_hsv;
sub info;
sub new_internal;
sub red;
sub rgba;
sub set_internal;
}
package Imager::Color::Float {
sub DESTROY;
sub alpha;
sub blue;
sub green;
sub i_hsv_to_rgb;
sub i_rgb_to_hsv;
sub new_internal;
sub red;
sub rgba;
sub set_internal;
}
package Imager::Context {
sub CLONE(;@) ;
sub DESTROY($) ;
}
package Imager::CountColor {
sub count_color($$) ;
}
package Imager::File::ICO {
sub i_readico_multi;
sub i_readico_single;
sub i_writecur_multi_wiol;
sub i_writecur_wiol;
sub i_writeico_multi_wiol;
sub i_writeico_wiol;
}
package Imager::File::JPEG {
sub i_libjpeg_version;
sub i_readjpeg_wiol;
sub i_writejpeg_wiol;
}
package Imager::File::PNG {
sub IMPNG_READ_IGNORE_BENIGN_ERRORS;
sub features;
sub i_png_lib_version;
sub i_readpng_wiol;
sub i_writepng_wiol;
}
package Imager::File::SGI {
sub i_readsgi_wiol;
sub i_writesgi_wiol;
}
package Imager::FillHandle {
sub CLONE_SKIP(;@) ;
sub DESTROY($) ;
}
package Imager::Filter::DynTest {
sub lin_stretch($$$) ;
}
package Imager::Filter::Flines {
sub flines($) ;
}
package Imager::Filter::Mandelbrot {
sub mandelbrot($;$$$$$) ;
}
package Imager::IO {
sub CLONE_SKIP(;@) ;
sub DESTROY($) ;
sub _new_perlio($$) ;
sub close($) ;
sub dump($;$) ;
sub eof($) ;
sub error($) ;
sub flush($) ;
sub getc($) ;
sub gets($;$$) ;
sub is_buffered($) ;
sub new_bufchain($) ;
sub new_buffer($$) ;
sub new_cb($$$$$) ;
sub new_fd($$) ;
sub nextc($) ;
sub peekc($) ;
sub peekn($$) ;
sub putc($$) ;
sub raw_close($) ;
sub raw_read($$$) ;
sub raw_read2($$) ;
sub raw_seek($$$) ;
sub raw_write($$) ;
sub read($$$) ;
sub read2($$) ;
sub seek($$$) ;
sub set_buffered($;$) ;
sub slurp($$) ;
sub write($$) ;
}
package Imager::ImgRaw {
sub DESTROY;
sub new;
}
package Imager::Internal::Hlines {
sub CLONE_SKIP($) ;
sub DESTROY($) ;
sub add($$$$) ;
sub dump($) ;
sub new($$$$) ;
sub new_img($) ;
sub testing() ;
}
package Internals {
sub SvREADONLY(\[$%@];$) ;
sub SvREFCNT(\[$%@];$) ;
sub V;
sub getcwd() ;
sub hv_clear_placeholders(\%) ;
}
package JSON::XS {
sub CLONE;
sub DESTROY;
sub allow_blessed;
sub allow_nonref;
sub allow_tags;
sub allow_unknown;
sub ascii;
sub boolean_values;
sub canonical;
sub convert_blessed;
sub decode;
sub decode_json($) ;
sub decode_prefix;
sub encode;
sub encode_json($) ;
sub filter_json_object;
sub filter_json_single_key_object;
sub get_allow_blessed;
sub get_allow_nonref;
sub get_allow_tags;
sub get_allow_unknown;
sub get_ascii;
sub get_boolean_values;
sub get_canonical;
sub get_convert_blessed;
sub get_indent;
sub get_latin1;
sub get_max_depth;
sub get_max_size;
sub get_relaxed;
sub get_shrink;
sub get_space_after;
sub get_space_before;
sub get_utf8;
sub incr_parse;
sub incr_reset;
sub incr_skip;
sub indent;
sub latin1;
sub max_depth;
sub max_size;
sub new;
sub pretty;
sub relaxed;
sub shrink;
sub space_after;
sub space_before;
sub utf8;
}
package List::MoreUtils {
sub _XScompiled;
sub after(&@) ;
sub after_incl(&@) ;
sub all(&@) ;
sub all_u(&@) ;
sub any(&@) ;
sub any_u(&@) ;
sub apply(&@) ;
sub arrayify;
sub before(&@) ;
sub before_incl(&@) ;
sub binsert(&$\@) ;
sub bremove(&\@) ;
sub bsearch(&@) ;
sub bsearch_index(&@) ;
sub bsearch_insert(&$\@) ;
sub bsearch_remove(&\@) ;
sub bsearchidx(&@) ;
sub distinct(@) ;
sub duplicates(@) ;
sub each_array(\@;\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@) ;
sub each_arrayref;
sub equal_range(&@) ;
sub false(&@) ;
sub first_index(&@) ;
sub first_result(&@) ;
sub first_value(&@) ;
sub firstidx(&@) ;
sub firstres(&@) ;
sub firstval(&@) ;
sub frequency(@) ;
sub indexes(&@) ;
sub insert_after(&$\@) ;
sub insert_after_string($$\@) ;
sub last_index(&@) ;
sub last_result(&@) ;
sub last_value(&@) ;
sub lastidx(&@) ;
sub lastres(&@) ;
sub lastval(&@) ;
sub listcmp(\@\@;\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@) ;
sub lower_bound(&@) ;
sub mesh(\@\@;\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@) ;
sub minmax(@) ;
sub minmaxstr(@) ;
sub mode(@) ;
sub natatime($@) ;
sub none(&@) ;
sub none_u(&@) ;
sub notall(&@) ;
sub notall_u(&@) ;
sub occurrences(@) ;
sub one(&@) ;
sub one_u(&@) ;
sub only_index(&@) ;
sub only_result(&@) ;
sub only_value(&@) ;
sub onlyidx(&@) ;
sub onlyres(&@) ;
sub onlyval(&@) ;
sub pairwise(&\@\@) ;
sub part(&@) ;
sub qsort(&\@) ;
sub reduce_0(&@) ;
sub reduce_1(&@) ;
sub reduce_u(&@) ;
sub samples($@) ;
sub singleton(@) ;
sub slide(&@) ;
sub slideatatime($@) ;
sub true(&@) ;
sub uniq(@) ;
sub upper_bound(&@) ;
sub zip(\@\@;\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@) ;
sub zip6(\@\@;\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@) ;
sub zip_unflatten(\@\@;\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@) ;
}
package List::MoreUtils::XS {
sub _XScompiled;
sub _array_iterator(;$) ;
sub _slideatatime_iterator() ;
sub after(&@) ;
sub after_incl(&@) ;
sub all(&@) ;
sub all_u(&@) ;
sub any(&@) ;
sub any_u(&@) ;
sub apply(&@) ;
sub arrayify;
sub before(&@) ;
sub before_incl(&@) ;
sub binsert(&$\@) ;
sub bremove(&\@) ;
sub bsearch(&@) ;
sub bsearchidx(&@) ;
sub duplicates(@) ;
sub each_array(\@;\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@) ;
sub each_arrayref;
sub equal_range(&@) ;
sub false(&@) ;
sub firstidx(&@) ;
sub firstres(&@) ;
sub firstval(&@) ;
sub frequency(@) ;
sub indexes(&@) ;
sub insert_after(&$\@) ;
sub insert_after_string($$\@) ;
sub lastidx(&@) ;
sub lastres(&@) ;
sub lastval(&@) ;
sub listcmp(\@\@;\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@) ;
sub lower_bound(&@) ;
sub mesh(\@\@;\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@) ;
sub minmax(@) ;
sub minmaxstr(@) ;
sub mode(@) ;
sub natatime($@) ;
sub none(&@) ;
sub none_u(&@) ;
sub notall(&@) ;
sub notall_u(&@) ;
sub occurrences(@) ;
sub one(&@) ;
sub one_u(&@) ;
sub onlyidx(&@) ;
sub onlyres(&@) ;
sub onlyval(&@) ;
sub pairwise(&\@\@) ;
sub part(&@) ;
sub qsort(&\@) ;
sub reduce_0(&@) ;
sub reduce_1(&@) ;
sub reduce_u(&@) ;
sub samples($@) ;
sub singleton(@) ;
sub slide(&@) ;
sub slideatatime($@) ;
sub true(&@) ;
sub uniq(@) ;
sub upper_bound(&@) ;
sub zip6(\@\@;\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@) ;
}
package List::MoreUtils::XS_ea {
sub DESTROY;
}
package List::MoreUtils::XS_sa {
sub DESTROY;
}
package List::Util {
sub all(&@) ;
sub any(&@) ;
sub first(&@) ;
sub head($@) ;
sub max(@) ;
sub maxstr(@) ;
sub mesh;
sub mesh_longest;
sub mesh_shortest;
sub min(@) ;
sub minstr(@) ;
sub none(&@) ;
sub notall(&@) ;
sub pairfirst(&@) ;
sub pairgrep(&@) ;
sub pairkeys(@) ;
sub pairmap(&@) ;
sub pairs(@) ;
sub pairvalues(@) ;
sub product(@) ;
sub reduce(&@) ;
sub reductions(&@) ;
sub sample($@) ;
sub shuffle(@) ;
sub sum(@) ;
sub sum0(@) ;
sub tail($@) ;
sub uniq(@) ;
sub uniqint(@) ;
sub uniqnum(@) ;
sub uniqstr(@) ;
sub unpairs(@) ;
sub zip;
sub zip_longest;
sub zip_shortest;
}
package Locale::gettext {
sub bind_textdomain_codeset;
sub bindtextdomain;
sub bytes2str($$;$) ;
sub constant;
sub dcgettext;
sub dcngettext;
sub decode($$;$) ;
sub decode_utf8($;$) ;
sub dgettext;
sub dngettext;
sub encode($$;$) ;
sub encode_utf8($) ;
sub gettext;
sub localeconv;
sub ngettext;
sub setlocale;
sub str2bytes($$;$) ;
sub textdomain;
}
package Moose {
sub is_class_loaded;
}
package Moose::Exporter {
sub _export_is_flagged;
sub _flag_as_reexport;
sub is_class_loaded;
sub reftype($) ;
sub subname;
sub uniq(@) ;
}
package Moose::Meta::Attribute {
sub any(&@) ;
sub blessed($) ;
}
package Moose::Meta::Class {
sub any(&@) ;
sub blessed($) ;
}
package Moose::Meta::Class::Immutable::Trait {
sub blessed($) ;
}
package Moose::Meta::Method::Constructor {
sub weaken($) ;
}
package Moose::Meta::Method::Delegation {
sub blessed($) ;
sub weaken($) ;
}
package Moose::Meta::Method::Destructor {
sub blessed($) ;
sub weaken($) ;
}
package Moose::Meta::Object::Trait {
sub blessed($) ;
}
package Moose::Meta::Role {
sub blessed($) ;
}
package Moose::Meta::Role::Application {
sub all(&@) ;
}
package Moose::Meta::Role::Application::RoleSummation {
sub all(&@) ;
sub blessed($) ;
}
package Moose::Meta::Role::Application::ToClass {
sub first(&@) ;
sub weaken($) ;
}
package Moose::Meta::Role::Application::ToInstance {
sub _reset_amagic;
sub all(&@) ;
sub blessed($) ;
}
package Moose::Meta::Role::Attribute {
sub all(&@) ;
sub blessed($) ;
sub weaken($) ;
}
package Moose::Meta::Role::Composite {
sub blessed($) ;
}
package Moose::Meta::TypeCoercion::Union {
sub blessed($) ;
}
package Moose::Meta::TypeConstraint {
sub refaddr($) ;
sub subname;
}
package Moose::Meta::TypeConstraint::DuckType {
sub all(&@) ;
sub blessed($) ;
}
package Moose::Meta::TypeConstraint::Parameterized {
sub blessed($) ;
}
package Moose::Meta::TypeConstraint::Registry {
sub blessed($) ;
}
package Moose::Meta::TypeConstraint::Union {
sub all(&@) ;
sub first(&@) ;
}
package Moose::Util {
sub all(&@) ;
sub any(&@) ;
sub blessed($) ;
sub first(&@) ;
}
package Moose::Util::MetaRole {
sub all(&@) ;
sub blessed($) ;
sub first(&@) ;
}
package Moose::Util::TypeConstraints {
sub blessed($) ;
}
package Moose::Util::TypeConstraints::Builtins {
sub _RegexpRef;
sub blessed($) ;
sub is_class_loaded;
}
package Mouse {
sub is_class_loaded;
}
package Mouse::Meta::Attribute {
sub _is_metadata;
sub _process_options;
sub accessor;
sub accessor_metaclass;
sub associated_class;
sub builder;
sub clearer;
sub default;
sub documentation;
sub handles;
sub has_accessor;
sub has_builder;
sub has_clearer;
sub has_default;
sub has_documentation;
sub has_handles;
sub has_predicate;
sub has_reader;
sub has_trigger;
sub has_type_constraint;
sub has_writer;
sub init_arg;
sub insertion_order;
sub is_lazy;
sub is_lazy_build;
sub is_required;
sub is_weak_ref;
sub name;
sub predicate;
sub reader;
sub should_auto_deref;
sub should_coerce;
sub trigger;
sub type_constraint;
sub writer;
}
package Mouse::Meta::Class {
sub _initialize_object;
sub _invalidate_metaclass_cache;
sub attribute_metaclass;
sub clone_object;
sub constructor_class;
sub destructor_class;
sub get_all_attributes;
sub is_anon_class;
sub is_immutable;
sub linearized_isa;
sub method_metaclass;
sub new_object;
sub roles;
sub strict_constructor;
}
package Mouse::Meta::Method::Accessor::XS {
sub _generate_accessor;
sub _generate_clearer;
sub _generate_predicate;
sub _generate_reader;
sub _generate_writer;
}
package Mouse::Meta::Method::Constructor::XS {
sub _generate_constructor;
}
package Mouse::Meta::Method::Destructor::XS {
sub _generate_destructor;
}
package Mouse::Meta::Module {
sub _attribute_map;
sub _method_map;
sub add_method;
sub name;
sub namespace;
}
package Mouse::Meta::Role {
sub add_after_method_modifier;
sub add_around_method_modifier;
sub add_before_method_modifier;
sub add_before_modifier;
sub add_metaclass_accessor;
sub get_after_method_modifiers;
sub get_around_method_modifiers;
sub get_before_method_modifiers;
sub get_before_modifiers;
sub get_roles;
sub is_anon_role;
sub method_metaclass;
}
package Mouse::Meta::TypeConstraint {
sub __is_parameterized;
sub _compiled_type_constraint;
sub _identity;
sub check;
sub compile_type_constraint;
sub has_coercion;
sub message;
sub name;
sub parent;
sub type_parameter;
}
package Mouse::Object {
sub BUILDALL;
sub BUILDARGS;
sub DEMOLISHALL;
sub DESTROY;
sub new;
}
package Mouse::Util {
sub __register_metaclass_storage;
sub generate_can_predicate_for;
sub generate_isa_predicate_for;
sub get_code_info;
sub get_code_package;
sub get_code_ref;
sub get_linear_isa($;$) ;
sub install_subroutines;
sub is_a_metaclass;
sub is_a_metarole;
sub is_a_type_constraint;
sub is_class_loaded;
sub is_valid_class_name;
}
package Mouse::Util::TypeConstraints {
sub Any;
sub ArrayRef;
sub Bool;
sub CLONE;
sub ClassName;
sub CodeRef;
sub Defined;
sub FileHandle;
sub GlobRef;
sub HashRef;
sub Int;
sub Num;
sub Object;
sub Ref;
sub RegexpRef;
sub RoleName;
sub ScalarRef;
sub Str;
sub Undef;
sub Value;
sub _parameterize_ArrayRef_for;
sub _parameterize_HashRef_for;
sub _parameterize_Maybe_for;
}
package Net::DBus::Binding::Bus {
sub _open($) ;
sub _open_private($) ;
}
package Net::DBus::Binding::C::Connection {
sub DESTROY($) ;
sub _add_filter($$) ;
sub _dispatch($) ;
sub _register_fallback($$$) ;
sub _register_object_path($$$) ;
sub _send($$) ;
sub _send_with_reply($$$) ;
sub _send_with_reply_and_block($$$) ;
sub _set_owner($$) ;
sub _set_timeout_callbacks($) ;
sub _set_watch_callbacks($) ;
sub _unregister_object_path($$) ;
sub dbus_bus_add_match($$) ;
sub dbus_bus_get_unique_name($) ;
sub dbus_bus_register($) ;
sub dbus_bus_remove_match($$) ;
sub dbus_bus_request_name($$) ;
sub dbus_connection_borrow_message($) ;
sub dbus_connection_disconnect($) ;
sub dbus_connection_flush($) ;
sub dbus_connection_get_is_authenticated($) ;
sub dbus_connection_get_is_connected($) ;
sub dbus_connection_pop_message($) ;
sub dbus_connection_ref($) ;
sub dbus_connection_return_message($$) ;
sub dbus_connection_steal_borrowed_message($$) ;
sub dbus_connection_unref($) ;
}
package Net::DBus::Binding::C::Message {
sub DESTROY($) ;
sub dbus_message_get_destination($) ;
sub dbus_message_get_error_name($) ;
sub dbus_message_get_interface($) ;
sub dbus_message_get_member($) ;
sub dbus_message_get_no_reply($) ;
sub dbus_message_get_path($) ;
sub dbus_message_get_sender($) ;
sub dbus_message_get_serial($) ;
sub dbus_message_get_signature($) ;
sub dbus_message_get_type($) ;
sub dbus_message_set_destination($$) ;
sub dbus_message_set_no_reply($$) ;
sub dbus_message_set_sender($$) ;
}
package Net::DBus::Binding::C::PendingCall {
sub DESTROY($) ;
sub _set_notify($$) ;
sub _steal_reply($) ;
sub dbus_pending_call_block($) ;
sub dbus_pending_call_cured($) ;
sub dbus_pending_call_get_completed($) ;
}
package Net::DBus::Binding::C::Server {
sub DESTROY($) ;
sub _set_connection_callback($) ;
sub _set_owner($$) ;
sub _set_timeout_callbacks($) ;
sub _set_watch_callbacks($) ;
sub dbus_server_disconnect($) ;
sub dbus_server_get_is_connected($) ;
}
package Net::DBus::Binding::C::Timeout {
sub get_data($) ;
sub get_interval($) ;
sub handle($) ;
sub is_enabled($) ;
sub set_data($$) ;
}
package Net::DBus::Binding::C::Watch {
sub get_data($) ;
sub get_fileno($) ;
sub get_flags($) ;
sub handle($$) ;
sub is_enabled($) ;
sub set_data($$) ;
}
package Net::DBus::Binding::Connection {
sub _open($) ;
sub _open_private($) ;
}
package Net::DBus::Binding::Iterator {
sub DESTROY($) ;
sub _append_int64($$) ;
sub _append_uint64($$) ;
sub _close_container($$) ;
sub _get_int64($) ;
sub _get_uint64($) ;
sub _open_container($$$) ;
sub _recurse($) ;
sub append_boolean($$) ;
sub append_byte($$) ;
sub append_double($$) ;
sub append_int16($$) ;
sub append_int32($$) ;
sub append_object_path($$) ;
sub append_signature($$) ;
sub append_string($$) ;
sub append_uint16($$) ;
sub append_uint32($$) ;
sub append_unix_fd($$) ;
sub get_arg_type($) ;
sub get_boolean($) ;
sub get_byte($) ;
sub get_double($) ;
sub get_element_type($) ;
sub get_int16($) ;
sub get_int32($) ;
sub get_object_path($) ;
sub get_signature($) ;
sub get_string($) ;
sub get_uint16($) ;
sub get_uint32($) ;
sub get_unix_fd($) ;
sub has_next($) ;
sub next($) ;
}
package Net::DBus::Binding::Message {
sub _create($) ;
sub _iterator($) ;
sub _iterator_append($) ;
}
package Net::DBus::Binding::Message::Error {
sub _create($$$) ;
}
package Net::DBus::Binding::Message::MethodCall {
sub _create($$$$) ;
}
package Net::DBus::Binding::Message::MethodReturn {
sub _create($) ;
}
package Net::DBus::Binding::Message::Signal {
sub _create($$$) ;
}
package Net::DBus::Binding::Server {
sub _open($) ;
}
package Net::SSLeay {
sub AF_802() ;
sub AF_AAL() ;
sub AF_CCITT() ;
sub AF_CHAOS() ;
sub AF_CTF() ;
sub AF_DATAKIT() ;
sub AF_DLI() ;
sub AF_ECMA() ;
sub AF_GOSIP() ;
sub AF_HYLINK() ;
sub AF_IMPLINK() ;
sub AF_ISO() ;
sub AF_LAST() ;
sub AF_LAT() ;
sub AF_LINK() ;
sub AF_NBS() ;
sub AF_NIT() ;
sub AF_NS() ;
sub AF_OSI() ;
sub AF_OSINET() ;
sub AF_PUP() ;
sub AF_USER() ;
sub AF_WAN() ;
sub ASN1_INTEGER_free($) ;
sub ASN1_INTEGER_get($) ;
sub ASN1_INTEGER_new() ;
sub ASN1_INTEGER_set($$) ;
sub ASN1_TIME_free($) ;
sub ASN1_TIME_new() ;
sub ASN1_TIME_set($$) ;
sub ASN1_TIME_timet($) ;
sub BIO_eof($) ;
sub BIO_f_ssl() ;
sub BIO_free($) ;
sub BIO_new($) ;
sub BIO_new_buffer_ssl_connect($) ;
sub BIO_new_file($$) ;
sub BIO_new_ssl($$) ;
sub BIO_new_ssl_connect($) ;
sub BIO_pending($) ;
sub BIO_read($;$) ;
sub BIO_s_mem() ;
sub BIO_ssl_copy_session_id($$) ;
sub BIO_ssl_shutdown($) ;
sub BIO_wpending($) ;
sub BIO_write($$) ;
sub CIPHER_description($$$) ;
sub CIPHER_get_bits($;$) ;
sub CIPHER_get_name($) ;
sub CLONE(;@) ;
sub COMP_add_compression_method($$) ;
sub CTX_add_client_CA($$) ;
sub CTX_add_extra_chain_cert($$) ;
sub CTX_add_session($$) ;
sub CTX_callback_ctrl($$$) ;
sub CTX_check_private_key($) ;
sub CTX_ctrl($$$$) ;
sub CTX_flush_sessions($$) ;
sub CTX_free($) ;
sub CTX_get0_param($) ;
sub CTX_get_app_data($) ;
sub CTX_get_cert_store($) ;
sub CTX_get_client_CA_list($) ;
sub CTX_get_ex_data($$) ;
sub CTX_get_ex_new_index($;$$$$) ;
sub CTX_get_max_proto_version($) ;
sub CTX_get_min_proto_version($) ;
sub CTX_get_mode($) ;
sub CTX_get_num_tickets($) ;
sub CTX_get_options($) ;
sub CTX_get_quiet_shutdown($) ;
sub CTX_get_read_ahead($) ;
sub CTX_get_security_level($) ;
sub CTX_get_session_cache_mode($) ;
sub CTX_get_timeout($) ;
sub CTX_get_verify_depth($) ;
sub CTX_get_verify_mode($) ;
sub CTX_load_verify_locations($$$) ;
sub CTX_new() ;
sub CTX_new_with_method($) ;
sub CTX_remove_session($$) ;
sub CTX_sess_accept($) ;
sub CTX_sess_accept_good($) ;
sub CTX_sess_accept_renegotiate($) ;
sub CTX_sess_cache_full($) ;
sub CTX_sess_cb_hits($) ;
sub CTX_sess_connect($) ;
sub CTX_sess_connect_good($) ;
sub CTX_sess_connect_renegotiate($) ;
sub CTX_sess_get_cache_size($) ;
sub CTX_sess_hits($) ;
sub CTX_sess_misses($) ;
sub CTX_sess_number($) ;
sub CTX_sess_set_cache_size($$) ;
sub CTX_sess_set_new_cb($$) ;
sub CTX_sess_set_remove_cb($$) ;
sub CTX_sess_timeouts($) ;
sub CTX_sessions($) ;
sub CTX_set1_curves_list($$) ;
sub CTX_set1_groups_list($$) ;
sub CTX_set1_param($$) ;
sub CTX_set_alpn_protos($;$) ;
sub CTX_set_alpn_select_cb($$;$) ;
sub CTX_set_app_data($$) ;
sub CTX_set_cert_store($$) ;
sub CTX_set_cert_verify_callback($$;$) ;
sub CTX_set_cipher_list($$) ;
sub CTX_set_ciphersuites($$) ;
sub CTX_set_client_CA_list($$) ;
sub CTX_set_default_passwd_cb($;$) ;
sub CTX_set_default_passwd_cb_userdata($;$) ;
sub CTX_set_default_verify_paths($) ;
sub CTX_set_ex_data($$$) ;
sub CTX_set_info_callback($$;$) ;
sub CTX_set_max_proto_version($$) ;
sub CTX_set_min_proto_version($$) ;
sub CTX_set_mode($$) ;
sub CTX_set_next_proto_select_cb($$;$) ;
sub CTX_set_next_protos_advertised_cb($$;$) ;
sub CTX_set_num_tickets($$) ;
sub CTX_set_options($$) ;
sub CTX_set_post_handshake_auth($$) ;
sub CTX_set_psk_client_callback($;$) ;
sub CTX_set_purpose($$) ;
sub CTX_set_quiet_shutdown($$) ;
sub CTX_set_read_ahead($$) ;
sub CTX_set_security_level($$) ;
sub CTX_set_session_cache_mode($$) ;
sub CTX_set_session_id_context($$$) ;
sub CTX_set_ssl_version($$) ;
sub CTX_set_timeout($$) ;
sub CTX_set_tlsext_servername_callback($;$$) ;
sub CTX_set_tlsext_status_cb($$;$) ;
sub CTX_set_tlsext_ticket_getkey_cb($;$$) ;
sub CTX_set_tmp_dh($$) ;
sub CTX_set_tmp_dh_callback($$) ;
sub CTX_set_tmp_ecdh($$) ;
sub CTX_set_trust($$) ;
sub CTX_set_verify($$;$) ;
sub CTX_set_verify_depth($$) ;
sub CTX_tlsv1_1_new() ;
sub CTX_tlsv1_2_new() ;
sub CTX_tlsv1_new() ;
sub CTX_use_PKCS12_file($$;$) ;
sub CTX_use_PrivateKey($$) ;
sub CTX_use_PrivateKey_file($$$) ;
sub CTX_use_RSAPrivateKey($$) ;
sub CTX_use_RSAPrivateKey_file($$$) ;
sub CTX_use_certificate($$) ;
sub CTX_use_certificate_chain_file($$) ;
sub CTX_use_certificate_file($$$) ;
sub CTX_v23_new() ;
sub DH_free($) ;
sub EC_KEY_free($) ;
sub EC_KEY_generate_key($) ;
sub EC_KEY_new_by_curve_name($) ;
sub ENGINE_by_id($) ;
sub ENGINE_load_builtin_engines() ;
sub ENGINE_register_all_complete() ;
sub ENGINE_set_default($$) ;
sub ERR_clear_error() ;
sub ERR_error_string($;$) ;
sub ERR_get_error() ;
sub ERR_load_RAND_strings() ;
sub ERR_load_SSL_strings() ;
sub ERR_load_crypto_strings() ;
sub ERR_peek_error() ;
sub ERR_put_error($$$$$) ;
sub EVP_Digest(;@) ;
sub EVP_DigestFinal($) ;
sub EVP_DigestFinal_ex($) ;
sub EVP_DigestInit($$) ;
sub EVP_DigestInit_ex($$$) ;
sub EVP_DigestUpdate($$) ;
sub EVP_MD_CTX_create() ;
sub EVP_MD_CTX_destroy($) ;
sub EVP_MD_CTX_md($) ;
sub EVP_MD_size($) ;
sub EVP_MD_type($) ;
sub EVP_PKEY_assign_EC_KEY($$) ;
sub EVP_PKEY_assign_RSA($$) ;
sub EVP_PKEY_bits($) ;
sub EVP_PKEY_copy_parameters($$) ;
sub EVP_PKEY_free($) ;
sub EVP_PKEY_id($) ;
sub EVP_PKEY_new() ;
sub EVP_PKEY_size($) ;
sub EVP_add_digest($) ;
sub EVP_get_cipherbyname($) ;
sub EVP_get_digestbyname($) ;
sub EVP_sha1() ;
sub EVP_sha256() ;
sub EVP_sha512() ;
sub FIPS_mode_set($) ;
sub MD4($) ;
sub MD5($) ;
sub MSG_BCAST() ;
sub MSG_BTAG() ;
sub MSG_CTLFLAGS() ;
sub MSG_CTLIGNORE() ;
sub MSG_EOF() ;
sub MSG_ETAG() ;
sub MSG_MAXIOVLEN() ;
sub MSG_MCAST() ;
sub MSG_URG() ;
sub MSG_WIRE() ;
sub OBJ_cmp($$) ;
sub OBJ_dup($) ;
sub OBJ_ln2nid($) ;
sub OBJ_nid2ln($) ;
sub OBJ_nid2obj($) ;
sub OBJ_nid2sn($) ;
sub OBJ_obj2nid($) ;
sub OBJ_obj2txt($;$) ;
sub OBJ_sn2nid($) ;
sub OBJ_txt2nid($) ;
sub OBJ_txt2obj($;$) ;
sub OCSP_REQUEST_free($) ;
sub OCSP_RESPONSE_free($) ;
sub OCSP_cert2ids($;@) ;
sub OCSP_ids2req(;@) ;
sub OCSP_response_results($;@) ;
sub OCSP_response_status($) ;
sub OCSP_response_status_str($) ;
sub OCSP_response_verify($$;$$) ;
sub OPENSSL_add_all_algorithms_conf() ;
sub OPENSSL_add_all_algorithms_noconf() ;
sub OpenSSL_add_all_algorithms() ;
sub OpenSSL_add_all_digests() ;
sub OpenSSL_add_ssl_algorithms() ;
sub OpenSSL_version(;$) ;
sub OpenSSL_version_num() ;
sub PEM_X509_INFO_read_bio($;$$$) ;
sub PEM_get_string_PrivateKey($;$$) ;
sub PEM_get_string_X509($) ;
sub PEM_get_string_X509_CRL($) ;
sub PEM_get_string_X509_REQ($) ;
sub PEM_read_bio_DHparams($;$$$) ;
sub PEM_read_bio_PrivateKey($;$$) ;
sub PEM_read_bio_X509($;$$$) ;
sub PEM_read_bio_X509_CRL($;$$$) ;
sub PEM_read_bio_X509_REQ($;$$$) ;
sub PF_802() ;
sub PF_AAL() ;
sub PF_CCITT() ;
sub PF_CHAOS() ;
sub PF_CTF() ;
sub PF_DATAKIT() ;
sub PF_DLI() ;
sub PF_ECMA() ;
sub PF_GOSIP() ;
sub PF_HYLINK() ;
sub PF_IMPLINK() ;
sub PF_ISO() ;
sub PF_LAST() ;
sub PF_LAT() ;
sub PF_LINK() ;
sub PF_NBS() ;
sub PF_NIT() ;
sub PF_NS() ;
sub PF_OSI() ;
sub PF_OSINET() ;
sub PF_PUP() ;
sub PF_USER() ;
sub PF_WAN() ;
sub P_ASN1_INTEGER_get_dec($) ;
sub P_ASN1_INTEGER_get_hex($) ;
sub P_ASN1_INTEGER_set_dec($$) ;
sub P_ASN1_INTEGER_set_hex($$) ;
sub P_ASN1_STRING_get($;$) ;
sub P_ASN1_TIME_get_isotime($) ;
sub P_ASN1_TIME_put2string($) ;
sub P_ASN1_TIME_set_isotime($$) ;
sub P_ASN1_UTCTIME_put2string($) ;
sub P_EVP_MD_list_all() ;
sub P_PKCS12_load_file($;$$) ;
sub P_X509_CRL_add_revoked_serial_hex($$$;$$) ;
sub P_X509_CRL_get_serial($) ;
sub P_X509_CRL_set_serial($$) ;
sub P_X509_INFO_get_x509($) ;
sub P_X509_REQ_add_extensions($;@) ;
sub P_X509_REQ_get_attr($$) ;
sub P_X509_add_extensions($$;@) ;
sub P_X509_copy_extensions($$;$) ;
sub P_X509_get_crl_distribution_points($) ;
sub P_X509_get_ext_key_usage($;$) ;
sub P_X509_get_key_usage($) ;
sub P_X509_get_netscape_cert_type($) ;
sub P_X509_get_ocsp_uri($) ;
sub P_X509_get_pubkey_alg($) ;
sub P_X509_get_signature_alg($) ;
sub P_alpn_selected($) ;
sub P_next_proto_last_status($) ;
sub P_next_proto_negotiated($) ;
sub RAND_add($$$) ;
sub RAND_bytes($$) ;
sub RAND_cleanup() ;
sub RAND_file_name($) ;
sub RAND_load_file($$) ;
sub RAND_poll() ;
sub RAND_priv_bytes($$) ;
sub RAND_pseudo_bytes($$) ;
sub RAND_seed($) ;
sub RAND_status() ;
sub RAND_write_file($) ;
sub RIPEMD160($) ;
sub RSA_free($) ;
sub RSA_generate_key($$;$$) ;
sub SCM_CONNECT() ;
sub SCM_CREDS() ;
sub SESSION_dup($) ;
sub SESSION_free($) ;
sub SESSION_get_app_data($) ;
sub SESSION_get_ex_data($$) ;
sub SESSION_get_ex_new_index($;$$$$) ;
sub SESSION_get_master_key($) ;
sub SESSION_get_time($) ;
sub SESSION_get_timeout($) ;
sub SESSION_is_resumable($) ;
sub SESSION_new() ;
sub SESSION_print($$) ;
sub SESSION_print_fp($$) ;
sub SESSION_set_app_data($$) ;
sub SESSION_set_ex_data($$$) ;
sub SESSION_set_time($$) ;
sub SESSION_set_timeout($$) ;
sub SESSION_up_ref($) ;
sub SHA1($) ;
sub SHA256($) ;
sub SHA512($) ;
sub SO_BACKLOG() ;
sub SO_CHAMELEON() ;
sub SO_DGRAM_ERRIND() ;
sub SO_DONTLINGER() ;
sub SO_FAMILY() ;
sub SO_PASSIFNAME() ;
sub SO_PROTOTYPE() ;
sub SO_STATE() ;
sub SO_USELOOPBACK() ;
sub SO_XOPEN() ;
sub SO_XSE() ;
sub SSL_get0_session($) ;
sub SSLeay() ;
sub SSLeay_add_ssl_algorithms() ;
sub SSLeay_version(;$) ;
sub SSLv23_client_method() ;
sub SSLv23_method() ;
sub SSLv23_server_method() ;
sub TLS_client_method() ;
sub TLS_method() ;
sub TLS_server_method() ;
sub TLSv1_1_client_method() ;
sub TLSv1_1_method() ;
sub TLSv1_1_server_method() ;
sub TLSv1_2_client_method() ;
sub TLSv1_2_method() ;
sub TLSv1_2_server_method() ;
sub TLSv1_client_method() ;
sub TLSv1_method() ;
sub TLSv1_server_method() ;
sub X509V3_EXT_d2i($) ;
sub X509V3_EXT_print($;$$) ;
sub X509_CRL_digest($$) ;
sub X509_CRL_free($) ;
sub X509_CRL_get_ext($$) ;
sub X509_CRL_get_ext_by_NID($$;$) ;
sub X509_CRL_get_ext_count($) ;
sub X509_CRL_get_issuer($) ;
sub X509_CRL_get_lastUpdate($) ;
sub X509_CRL_get_nextUpdate($) ;
sub X509_CRL_get_version($) ;
sub X509_CRL_new() ;
sub X509_CRL_set_issuer_name($$) ;
sub X509_CRL_set_lastUpdate($$) ;
sub X509_CRL_set_nextUpdate($$) ;
sub X509_CRL_set_version($$) ;
sub X509_CRL_sign($$$) ;
sub X509_CRL_sort($) ;
sub X509_CRL_verify($$) ;
sub X509_EXTENSION_get_critical($) ;
sub X509_EXTENSION_get_data($) ;
sub X509_EXTENSION_get_object($) ;
sub X509_LOOKUP_add_dir($$$) ;
sub X509_LOOKUP_hash_dir() ;
sub X509_NAME_ENTRY_get_data($) ;
sub X509_NAME_ENTRY_get_object($) ;
sub X509_NAME_add_entry_by_NID($$$$;$$) ;
sub X509_NAME_add_entry_by_OBJ($$$$;$$) ;
sub X509_NAME_add_entry_by_txt($$$$;$$) ;
sub X509_NAME_cmp($$) ;
sub X509_NAME_digest($$) ;
sub X509_NAME_entry_count($) ;
sub X509_NAME_get_entry($$) ;
sub X509_NAME_get_text_by_NID($$) ;
sub X509_NAME_hash($) ;
sub X509_NAME_new() ;
sub X509_NAME_oneline($) ;
sub X509_NAME_print_ex($;$$) ;
sub X509_REQ_add1_attr_by_NID($$$$) ;
sub X509_REQ_digest($$) ;
sub X509_REQ_free($) ;
sub X509_REQ_get_attr_by_NID($$;$) ;
sub X509_REQ_get_attr_by_OBJ($$;$) ;
sub X509_REQ_get_attr_count($) ;
sub X509_REQ_get_pubkey($) ;
sub X509_REQ_get_subject_name($) ;
sub X509_REQ_get_version($) ;
sub X509_REQ_new() ;
sub X509_REQ_set_pubkey($$) ;
sub X509_REQ_set_subject_name($$) ;
sub X509_REQ_set_version($$) ;
sub X509_REQ_sign($$$) ;
sub X509_REQ_verify($$) ;
sub X509_STORE_CTX_free($) ;
sub X509_STORE_CTX_get_app_data($) ;
sub X509_STORE_CTX_get_current_cert($) ;
sub X509_STORE_CTX_get_error($) ;
sub X509_STORE_CTX_get_error_depth($) ;
sub X509_STORE_CTX_get_ex_data($$) ;
sub X509_STORE_CTX_get_ex_new_index($;$$$$) ;
sub X509_STORE_CTX_init($;$$$) ;
sub X509_STORE_CTX_new() ;
sub X509_STORE_CTX_set_app_data($$) ;
sub X509_STORE_CTX_set_cert($$) ;
sub X509_STORE_CTX_set_error($$) ;
sub X509_STORE_CTX_set_ex_data($$$) ;
sub X509_STORE_add_cert($$) ;
sub X509_STORE_add_crl($$) ;
sub X509_STORE_add_lookup($$) ;
sub X509_STORE_free($) ;
sub X509_STORE_new() ;
sub X509_STORE_set1_param($$) ;
sub X509_STORE_set_flags($$) ;
sub X509_STORE_set_purpose($$) ;
sub X509_STORE_set_trust($$) ;
sub X509_VERIFY_PARAM_add0_policy($$) ;
sub X509_VERIFY_PARAM_add0_table($) ;
sub X509_VERIFY_PARAM_add1_host($$) ;
sub X509_VERIFY_PARAM_clear_flags($$) ;
sub X509_VERIFY_PARAM_free($) ;
sub X509_VERIFY_PARAM_get0_peername($) ;
sub X509_VERIFY_PARAM_get_depth($) ;
sub X509_VERIFY_PARAM_get_flags($) ;
sub X509_VERIFY_PARAM_inherit($$) ;
sub X509_VERIFY_PARAM_lookup($) ;
sub X509_VERIFY_PARAM_new() ;
sub X509_VERIFY_PARAM_set1($$) ;
sub X509_VERIFY_PARAM_set1_email($$) ;
sub X509_VERIFY_PARAM_set1_host($$) ;
sub X509_VERIFY_PARAM_set1_ip($$) ;
sub X509_VERIFY_PARAM_set1_ip_asc($$) ;
sub X509_VERIFY_PARAM_set1_name($$) ;
sub X509_VERIFY_PARAM_set1_policies($$) ;
sub X509_VERIFY_PARAM_set_depth($$) ;
sub X509_VERIFY_PARAM_set_flags($$) ;
sub X509_VERIFY_PARAM_set_hostflags($$) ;
sub X509_VERIFY_PARAM_set_purpose($$) ;
sub X509_VERIFY_PARAM_set_time($$) ;
sub X509_VERIFY_PARAM_set_trust($$) ;
sub X509_VERIFY_PARAM_table_cleanup() ;
sub X509_certificate_type($;$) ;
sub X509_check_email($$;$) ;
sub X509_check_host($$;$$) ;
sub X509_check_ip($$;$) ;
sub X509_check_ip_asc($$;$) ;
sub X509_digest($$) ;
sub X509_free($) ;
sub X509_get0_serialNumber($) ;
sub X509_get_X509_PUBKEY($) ;
sub X509_get_app_data($) ;
sub X509_get_ex_data($$) ;
sub X509_get_ex_new_index($;$$$$) ;
sub X509_get_ext($$) ;
sub X509_get_ext_by_NID($$;$) ;
sub X509_get_ext_count($) ;
sub X509_get_fingerprint($$) ;
sub X509_get_issuer_name($) ;
sub X509_get_notAfter($) ;
sub X509_get_notBefore($) ;
sub X509_get_pubkey($) ;
sub X509_get_serialNumber($) ;
sub X509_get_subjectAltNames($) ;
sub X509_get_subject_name($) ;
sub X509_get_version($) ;
sub X509_gmtime_adj($$) ;
sub X509_issuer_and_serial_hash($) ;
sub X509_issuer_name_hash($) ;
sub X509_load_cert_crl_file($$$) ;
sub X509_load_cert_file($$$) ;
sub X509_load_crl_file($$$) ;
sub X509_new() ;
sub X509_policy_level_get0_node($$) ;
sub X509_policy_level_node_count($) ;
sub X509_policy_node_get0_parent($) ;
sub X509_policy_node_get0_policy($) ;
sub X509_policy_node_get0_qualifiers($) ;
sub X509_policy_tree_free($) ;
sub X509_policy_tree_get0_level($$) ;
sub X509_policy_tree_get0_policies($) ;
sub X509_policy_tree_get0_user_policies($) ;
sub X509_policy_tree_level_count($) ;
sub X509_pubkey_digest($$) ;
sub X509_set_app_data($$) ;
sub X509_set_ex_data($$$) ;
sub X509_set_issuer_name($$) ;
sub X509_set_pubkey($$) ;
sub X509_set_serialNumber($$) ;
sub X509_set_subject_name($$) ;
sub X509_set_version($$) ;
sub X509_sign($$$) ;
sub X509_subject_name_hash($) ;
sub X509_verify($$) ;
sub X509_verify_cert($) ;
sub X509_verify_cert_error_string($) ;
sub accept($) ;
sub add_client_CA($$) ;
sub add_dir_cert_subjects_to_stack($$) ;
sub add_file_cert_subjects_to_stack($$) ;
sub add_ssl_algorithms() ;
sub alert_desc_string($) ;
sub alert_desc_string_long($) ;
sub alert_type_string($) ;
sub alert_type_string_long($) ;
sub callback_ctrl($$$) ;
sub check_private_key($) ;
sub clear($) ;
sub clear_num_renegotiations($) ;
sub client_version($) ;
sub connect($) ;
sub constant($) ;
sub copy_session_id($$) ;
sub ctrl($$$$) ;
sub d2i_OCSP_REQUEST($) ;
sub d2i_OCSP_RESPONSE($) ;
sub d2i_SSL_SESSION($) ;
sub d2i_X509_CRL_bio($;$) ;
sub d2i_X509_REQ_bio($;$) ;
sub d2i_X509_bio($;$) ;
sub debug_read;
sub do_handshake($) ;
sub do_https2;
sub do_https3;
sub do_https4;
sub do_https;
sub do_httpx2;
sub do_httpx3;
sub do_httpx4;
sub dump_peer_certificate($) ;
sub dup($) ;
sub export_keying_material($$$;$) ;
sub free($) ;
sub get0_param($) ;
sub get1_session($) ;
sub get_SSL_CTX($) ;
sub get_app_data($) ;
sub get_certificate($) ;
sub get_cipher($) ;
sub get_cipher_bits($;$) ;
sub get_cipher_list($$) ;
sub get_client_CA_list($) ;
sub get_client_random($) ;
sub get_current_cipher($) ;
sub get_default_timeout($) ;
sub get_error($$) ;
sub get_ex_data($$) ;
sub get_ex_new_index($;$$$$) ;
sub get_fd($) ;
sub get_finished($$;$) ;
sub get_http3;
sub get_http4;
sub get_http;
sub get_https3;
sub get_https4;
sub get_https;
sub get_httpx3;
sub get_httpx4;
sub get_httpx;
sub get_keyblock_size($) ;
sub get_max_proto_version($) ;
sub get_min_proto_version($) ;
sub get_mode($) ;
sub get_num_tickets($) ;
sub get_options($) ;
sub get_peer_cert_chain($) ;
sub get_peer_certificate($) ;
sub get_peer_finished($$;$) ;
sub get_quiet_shutdown($) ;
sub get_rbio($) ;
sub get_read_ahead($) ;
sub get_security_level($) ;
sub get_server_random($) ;
sub get_servername($;$) ;
sub get_servername_type($) ;
sub get_session($) ;
sub get_shared_ciphers($;$$) ;
sub get_shutdown($) ;
sub get_ssl_method($) ;
sub get_state($) ;
sub get_time($) ;
sub get_timeout($) ;
sub get_verify_depth($) ;
sub get_verify_mode($) ;
sub get_verify_result($) ;
sub get_version($) ;
sub get_wbio($) ;
sub has_pending($) ;
sub head_http3;
sub head_http4;
sub head_http;
sub head_https3;
sub head_https4;
sub head_https;
sub head_httpx3;
sub head_httpx4;
sub head_httpx;
sub hello() ;
sub http_cat;
sub https_cat;
sub httpx_cat;
sub i2d_OCSP_REQUEST($) ;
sub i2d_OCSP_RESPONSE($) ;
sub i2d_SSL_SESSION($) ;
sub in_accept_init($) ;
sub in_before($) ;
sub in_connect_init($) ;
sub in_init($) ;
sub inet_aton;
sub inet_ntoa;
sub initialize;
sub is_dtls($) ;
sub is_init_finished($) ;
sub library_init() ;
sub load_client_CA_file($) ;
sub load_error_strings() ;
sub make_form;
sub make_headers;
sub new($) ;
sub new_x_ctx;
sub num_renegotiations($) ;
sub open_proxy_tcp_connection;
sub open_tcp_connection;
sub pack_sockaddr_in6;
sub pack_sockaddr_in;
sub pack_sockaddr_un;
sub peek($;$) ;
sub peek_ex($;$) ;
sub pending($) ;
sub post_http3;
sub post_http4;
sub post_http;
sub post_https3;
sub post_https4;
sub post_https;
sub post_httpx3;
sub post_httpx4;
sub post_httpx;
sub put_http3;
sub put_http4;
sub put_http;
sub put_https3;
sub put_https4;
sub put_https;
sub put_httpx3;
sub put_httpx4;
sub put_httpx;
sub randomize(;$$$) ;
sub read($;$) ;
sub read_ex($;$) ;
sub renegotiate($) ;
sub rstate_string($) ;
sub rstate_string_long($) ;
sub session_reused($) ;
sub set1_curves_list($$) ;
sub set1_groups_list($$) ;
sub set1_param($$) ;
sub set_SSL_CTX($$) ;
sub set_accept_state($) ;
sub set_alpn_protos($;$) ;
sub set_app_data($$) ;
sub set_bio($$$) ;
sub set_cert_and_key($$$) ;
sub set_cipher_list($$) ;
sub set_ciphersuites($$) ;
sub set_client_CA_list($$) ;
sub set_connect_state($) ;
sub set_default_passwd_cb($;$) ;
sub set_default_passwd_cb_userdata($;$) ;
sub set_ex_data($$$) ;
sub set_fd($$) ;
sub set_info_callback($$;$) ;
sub set_max_proto_version($$) ;
sub set_min_proto_version($$) ;
sub set_mode($$) ;
sub set_num_tickets($$) ;
sub set_options($$) ;
sub set_post_handshake_auth($$) ;
sub set_pref_cipher($$) ;
sub set_proxy($$;**) ;
sub set_psk_client_callback($;$) ;
sub set_purpose($$) ;
sub set_quiet_shutdown($$) ;
sub set_read_ahead($;$) ;
sub set_rfd($$) ;
sub set_security_level($$) ;
sub set_server_cert_and_key($$$) ;
sub set_session($$) ;
sub set_session_id_context($$$) ;
sub set_session_secret_cb($;$$) ;
sub set_session_ticket_ext($$) ;
sub set_session_ticket_ext_cb($$;$) ;
sub set_shutdown($$) ;
sub set_ssl_method($$) ;
sub set_state($$) ;
sub set_time($$) ;
sub set_timeout($$) ;
sub set_tlsext_host_name($$) ;
sub set_tlsext_status_ocsp_resp($$) ;
sub set_tlsext_status_type($$) ;
sub set_tmp_dh($$) ;
sub set_tmp_dh_callback($$) ;
sub set_trust($$) ;
sub set_verify($$$) ;
sub set_verify_depth($$) ;
sub set_verify_result($$) ;
sub set_wfd($$) ;
sub shutdown($) ;
sub sk_X509_INFO_free($) ;
sub sk_X509_INFO_num($) ;
sub sk_X509_INFO_value($$) ;
sub sk_X509_NAME_free($) ;
sub sk_X509_NAME_num($) ;
sub sk_X509_NAME_value($$) ;
sub sk_X509_free($) ;
sub sk_X509_new_null() ;
sub sk_X509_push($$) ;
sub sockaddr_family;
sub ssl_read_CRLF($;$) ;
sub ssl_read_all;
sub ssl_read_until($;$$) ;
sub ssl_write_CRLF($$) ;
sub ssl_write_all;
sub sslcat;
sub state($) ;
sub state_string($) ;
sub state_string_long($) ;
sub tcp_read_CRLF;
sub tcp_read_all;
sub tcp_read_until;
sub tcp_write_CRLF;
sub tcp_write_all;
sub tcpcat;
sub tcpxcat;
sub total_renegotiations($) ;
sub unpack_sockaddr_in6;
sub unpack_sockaddr_in;
sub unpack_sockaddr_un;
sub use_PrivateKey($$) ;
sub use_PrivateKey_ASN1($$$$) ;
sub use_PrivateKey_file($$$) ;
sub use_RSAPrivateKey($$) ;
sub use_RSAPrivateKey_ASN1($$$) ;
sub use_RSAPrivateKey_file($$$) ;
sub use_certificate($$) ;
sub use_certificate_ASN1($$$) ;
sub use_certificate_chain_file($$) ;
sub use_certificate_file($$$) ;
sub verify_client_post_handshake($) ;
sub version($) ;
sub want($) ;
sub want_X509_lookup;
sub want_nothing;
sub want_read;
sub want_write;
sub write($$) ;
sub write_ex($$) ;
sub write_partial($$$$) ;
}
package PDL {
sub DESTROY;
sub _badvalue_int0($) ;
sub _badvalue_int1($) ;
sub _badvalue_int2($) ;
sub _badvalue_int3($) ;
sub _badvalue_int4($) ;
sub _badvalue_int5($) ;
sub _badvalue_int6($) ;
sub _badvalue_int7($) ;
sub _badvalue_per_pdl_int0($$) ;
sub _badvalue_per_pdl_int1($$) ;
sub _badvalue_per_pdl_int2($$) ;
sub _badvalue_per_pdl_int3($$) ;
sub _badvalue_per_pdl_int4($$) ;
sub _badvalue_per_pdl_int5($$) ;
sub _badvalue_per_pdl_int6($$) ;
sub _badvalue_per_pdl_int7($$) ;
sub _clip_int($$$$) ;
sub _clump_int(;@) ;
sub _conv1d_int($$$$) ;
sub _conv2d_int($$$$) ;
sub _convolveND_int($$$$) ;
sub _convolve_int($$$$$) ;
sub _default_badvalue_int0() ;
sub _default_badvalue_int1() ;
sub _default_badvalue_int2() ;
sub _default_badvalue_int3() ;
sub _default_badvalue_int4() ;
sub _default_badvalue_int5() ;
sub _default_badvalue_int6() ;
sub _default_badvalue_int7() ;
sub _eigens_int($$$) ;
sub _eigens_sym_int($$$) ;
sub _fft(;@) ;
sub _fibonacci_int($) ;
sub _gdImageArcs(;@) ;
sub _gdImageColorAllocateAlphas(;@) ;
sub _gdImageColorAllocates(;@) ;
sub _gdImageDashedLines(;@) ;
sub _gdImageFilledArcs(;@) ;
sub _gdImageFilledEllipses(;@) ;
sub _gdImageFilledRectangles(;@) ;
sub _gdImageLines(;@) ;
sub _gdImageRectangles(;@) ;
sub _gdImageSetPixels(;@) ;
sub _gd_image_to_pdl(;@) ;
sub _gd_image_to_pdl_true(;@) ;
sub _hclip_int($$$) ;
sub _ifft(;@) ;
sub _iis(;@) ;
sub _iiscirc(;@) ;
sub _lclip_int($$$) ;
sub _log10_int($$) ;
sub _map_int($$$$$$$$$$$) ;
sub _matmult_int($$$) ;
sub _med2d_int($$$$) ;
sub _med2df_int($$$$$) ;
sub _pdl_to_gd_image_lut(;@) ;
sub _pdl_to_gd_image_true(;@) ;
sub _random_int($) ;
sub _randsym_int($) ;
sub _rasc(;@) ;
sub _read_png(;@) ;
sub _read_png_lut(;@) ;
sub _read_true_png(;@) ;
sub _rebin_int($$$) ;
sub _rice_compress_int($$$$$) ;
sub _rice_expand_int($$$$) ;
sub _rld_int($$$) ;
sub _rle_int($$$) ;
sub _statsover_int($$$$$$$$$) ;
sub _warp2d_int($$$$$$) ;
sub _warp2d_kernel_int($$$) ;
sub _which_both_int($$$) ;
sub _which_int($$) ;
sub abs(;@) ;
sub acos(;@) ;
sub acosh(;@) ;
sub add_threading_magic;
sub address;
sub affine;
sub affineinternal(;@) ;
sub allocated;
sub and2(;@) ;
sub andover(;@) ;
sub anychgd;
sub append(;@) ;
sub asin(;@) ;
sub asinh(;@) ;
sub assgn(;@) ;
sub atan(;@) ;
sub atan2(;@) ;
sub atanh(;@) ;
sub attract(;@) ;
sub average(;@) ;
sub avgover(;@) ;
sub axisvalues(;@) ;
sub badflag($;$) ;
sub badmask(;@) ;
sub bandover(;@) ;
sub bessj0(;@) ;
sub bessj1(;@) ;
sub bessjn(;@) ;
sub bessy0(;@) ;
sub bessy1(;@) ;
sub bessyn(;@) ;
sub bflows;
sub bilin2d(;@) ;
sub bind($&) ;
sub bitnot(;@) ;
sub borover(;@) ;
sub box2d(;@) ;
sub browse(;@) ;
sub bswap2(;@) ;
sub bswap4(;@) ;
sub bswap8(;@) ;
sub ccNcompt(;@) ;
sub cdiv(;@) ;
sub ceil(;@) ;
sub centroid2d(;@) ;
sub chbs(;@) ;
sub chcm(;@) ;
sub chfd(;@) ;
sub chfe(;@) ;
sub chia(;@) ;
sub chic(;@) ;
sub chid(;@) ;
sub chim(;@) ;
sub chsp(;@) ;
sub cmul(;@) ;
sub combcoords(;@) ;
sub contour_segments_internal(;@) ;
sub converttypei;
sub convmath(;@) ;
sub copybad(;@) ;
sub cos(;@) ;
sub cosh(;@) ;
sub cquant_c(;@) ;
sub crossp(;@) ;
sub cumuprodover(;@) ;
sub cumusumover(;@) ;
sub daverage(;@) ;
sub davgover(;@) ;
sub dcumuprodover(;@) ;
sub dcumusumover(;@) ;
sub diagonalI(;@) ;
sub diff_backward(;@) ;
sub diff_central(;@) ;
sub diff_forward(;@) ;
sub dim;
sub dimschgd;
sub divide(;@) ;
sub donttouch;
sub dowhenidle;
sub dprodover(;@) ;
sub dsumover(;@) ;
sub dump;
sub eq(;@) ;
sub erf(;@) ;
sub erfc(;@) ;
sub erfi(;@) ;
sub exp(;@) ;
sub ezfftb(;@) ;
sub ezfftf(;@) ;
sub ezffti(;@) ;
sub fflows;
sub fitgauss1d(;@) ;
sub fitgauss1dr(;@) ;
sub floor(;@) ;
sub flowconvert(;@) ;
sub ge(;@) ;
sub geco(;@) ;
sub gedi(;@) ;
sub gefa(;@) ;
sub gesl(;@) ;
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub get_dataref;
sub get_datatype;
sub get_trans;
sub getdim;
sub gethdr;
sub getndims;
sub getnthreadids;
sub getthreadid;
sub gl_arrows(;@) ;
sub gl_line_strip(;@) ;
sub gl_lines(;@) ;
sub gl_points(;@) ;
sub gl_texts(;@) ;
sub gl_triangles(;@) ;
sub gl_triangles_mat(;@) ;
sub gl_triangles_n(;@) ;
sub gl_triangles_n_mat(;@) ;
sub gl_triangles_wn(;@) ;
sub gl_triangles_wn_mat(;@) ;
sub gsl_poly_eval(;@) ;
sub gsl_sf_Chi(;@) ;
sub gsl_sf_Ci(;@) ;
sub gsl_sf_Shi(;@) ;
sub gsl_sf_Si(;@) ;
sub gsl_sf_airy_Ai(;@) ;
sub gsl_sf_airy_Ai_deriv(;@) ;
sub gsl_sf_airy_Ai_deriv_scaled(;@) ;
sub gsl_sf_airy_Ai_scaled(;@) ;
sub gsl_sf_airy_Bi(;@) ;
sub gsl_sf_airy_Bi_deriv(;@) ;
sub gsl_sf_airy_Bi_deriv_scaled(;@) ;
sub gsl_sf_airy_Bi_scaled(;@) ;
sub gsl_sf_angle_restrict_pos(;@) ;
sub gsl_sf_angle_restrict_symm(;@) ;
sub gsl_sf_atanint(;@) ;
sub gsl_sf_bessel_I_array(;@) ;
sub gsl_sf_bessel_I_scaled_array(;@) ;
sub gsl_sf_bessel_In(;@) ;
sub gsl_sf_bessel_In_scaled(;@) ;
sub gsl_sf_bessel_Inu(;@) ;
sub gsl_sf_bessel_Inu_scaled(;@) ;
sub gsl_sf_bessel_J_array(;@) ;
sub gsl_sf_bessel_Jn(;@) ;
sub gsl_sf_bessel_Jnu(;@) ;
sub gsl_sf_bessel_K_array(;@) ;
sub gsl_sf_bessel_K_scaled_array(;@) ;
sub gsl_sf_bessel_Kn(;@) ;
sub gsl_sf_bessel_Kn_scaled(;@) ;
sub gsl_sf_bessel_Knu(;@) ;
sub gsl_sf_bessel_Knu_scaled(;@) ;
sub gsl_sf_bessel_Y_array(;@) ;
sub gsl_sf_bessel_Yn(;@) ;
sub gsl_sf_bessel_Ynu(;@) ;
sub gsl_sf_bessel_i_scaled_array(;@) ;
sub gsl_sf_bessel_il_scaled(;@) ;
sub gsl_sf_bessel_j_array(;@) ;
sub gsl_sf_bessel_jl(;@) ;
sub gsl_sf_bessel_k_scaled_array(;@) ;
sub gsl_sf_bessel_kl_scaled(;@) ;
sub gsl_sf_bessel_lnKnu(;@) ;
sub gsl_sf_bessel_y_array(;@) ;
sub gsl_sf_bessel_yl(;@) ;
sub gsl_sf_beta(;@) ;
sub gsl_sf_choose(;@) ;
sub gsl_sf_clausen(;@) ;
sub gsl_sf_complex_cos(;@) ;
sub gsl_sf_complex_dilog(;@) ;
sub gsl_sf_complex_log(;@) ;
sub gsl_sf_complex_logsin(;@) ;
sub gsl_sf_complex_sin(;@) ;
sub gsl_sf_conicalP_0(;@) ;
sub gsl_sf_conicalP_1(;@) ;
sub gsl_sf_conicalP_cyl_reg_e(;@) ;
sub gsl_sf_conicalP_half(;@) ;
sub gsl_sf_conicalP_mhalf(;@) ;
sub gsl_sf_conicalP_sph_reg(;@) ;
sub gsl_sf_cos(;@) ;
sub gsl_sf_cos_err(;@) ;
sub gsl_sf_coulomb_CL_e(;@) ;
sub gsl_sf_coulomb_wave_FGp_array(;@) ;
sub gsl_sf_coulomb_wave_sphF_array(;@) ;
sub gsl_sf_coupling_3j(;@) ;
sub gsl_sf_coupling_6j(;@) ;
sub gsl_sf_coupling_9j(;@) ;
sub gsl_sf_dawson(;@) ;
sub gsl_sf_debye_1(;@) ;
sub gsl_sf_debye_2(;@) ;
sub gsl_sf_debye_3(;@) ;
sub gsl_sf_debye_4(;@) ;
sub gsl_sf_dilog(;@) ;
sub gsl_sf_doublefact(;@) ;
sub gsl_sf_ellint_D(;@) ;
sub gsl_sf_ellint_E(;@) ;
sub gsl_sf_ellint_Ecomp(;@) ;
sub gsl_sf_ellint_F(;@) ;
sub gsl_sf_ellint_Kcomp(;@) ;
sub gsl_sf_ellint_P(;@) ;
sub gsl_sf_ellint_RC(;@) ;
sub gsl_sf_ellint_RD(;@) ;
sub gsl_sf_ellint_RF(;@) ;
sub gsl_sf_ellint_RJ(;@) ;
sub gsl_sf_elljac(;@) ;
sub gsl_sf_erf(;@) ;
sub gsl_sf_erf_Q(;@) ;
sub gsl_sf_erf_Z(;@) ;
sub gsl_sf_erfc(;@) ;
sub gsl_sf_eta(;@) ;
sub gsl_sf_exp(;@) ;
sub gsl_sf_exp_err(;@) ;
sub gsl_sf_expint_3(;@) ;
sub gsl_sf_expint_E1(;@) ;
sub gsl_sf_expint_E2(;@) ;
sub gsl_sf_expint_Ei(;@) ;
sub gsl_sf_exprel_n(;@) ;
sub gsl_sf_fact(;@) ;
sub gsl_sf_fermi_dirac_3half(;@) ;
sub gsl_sf_fermi_dirac_half(;@) ;
sub gsl_sf_fermi_dirac_inc_0(;@) ;
sub gsl_sf_fermi_dirac_int(;@) ;
sub gsl_sf_fermi_dirac_mhalf(;@) ;
sub gsl_sf_gamma(;@) ;
sub gsl_sf_gamma_inc_P(;@) ;
sub gsl_sf_gamma_inc_Q(;@) ;
sub gsl_sf_gammainv(;@) ;
sub gsl_sf_gammastar(;@) ;
sub gsl_sf_gegenpoly_array(;@) ;
sub gsl_sf_gegenpoly_n(;@) ;
sub gsl_sf_hydrogenicR(;@) ;
sub gsl_sf_hyperg_0F1(;@) ;
sub gsl_sf_hyperg_1F1(;@) ;
sub gsl_sf_hyperg_2F0(;@) ;
sub gsl_sf_hyperg_2F1(;@) ;
sub gsl_sf_hyperg_2F1_conj(;@) ;
sub gsl_sf_hyperg_2F1_conj_renorm(;@) ;
sub gsl_sf_hyperg_2F1_renorm(;@) ;
sub gsl_sf_hyperg_U(;@) ;
sub gsl_sf_hypot(;@) ;
sub gsl_sf_hzeta(;@) ;
sub gsl_sf_laguerre_n(;@) ;
sub gsl_sf_legendre_H3d(;@) ;
sub gsl_sf_legendre_H3d_array(;@) ;
sub gsl_sf_legendre_Pl(;@) ;
sub gsl_sf_legendre_Pl_array(;@) ;
sub gsl_sf_legendre_Plm(;@) ;
sub gsl_sf_legendre_Ql(;@) ;
sub gsl_sf_legendre_array(;@) ;
sub gsl_sf_legendre_array_index(;@) ;
sub gsl_sf_legendre_sphPlm(;@) ;
sub gsl_sf_lnbeta(;@) ;
sub gsl_sf_lnchoose(;@) ;
sub gsl_sf_lncosh(;@) ;
sub gsl_sf_lndoublefact(;@) ;
sub gsl_sf_lnfact(;@) ;
sub gsl_sf_lngamma(;@) ;
sub gsl_sf_lngamma_complex(;@) ;
sub gsl_sf_lnpoch(;@) ;
sub gsl_sf_lnsinh(;@) ;
sub gsl_sf_log(;@) ;
sub gsl_sf_log_erfc(;@) ;
sub gsl_sf_multiply(;@) ;
sub gsl_sf_multiply_err(;@) ;
sub gsl_sf_poch(;@) ;
sub gsl_sf_pochrel(;@) ;
sub gsl_sf_polar_to_rect(;@) ;
sub gsl_sf_pow_int(;@) ;
sub gsl_sf_psi(;@) ;
sub gsl_sf_psi_1piy(;@) ;
sub gsl_sf_psi_n(;@) ;
sub gsl_sf_rect_to_polar(;@) ;
sub gsl_sf_sin(;@) ;
sub gsl_sf_sin_err(;@) ;
sub gsl_sf_synchrotron_1(;@) ;
sub gsl_sf_synchrotron_2(;@) ;
sub gsl_sf_taylorcoeff(;@) ;
sub gsl_sf_transport_2(;@) ;
sub gsl_sf_transport_3(;@) ;
sub gsl_sf_transport_4(;@) ;
sub gsl_sf_transport_5(;@) ;
sub gsl_sf_zeta(;@) ;
sub gt(;@) ;
sub hdr;
sub hdrcpy;
sub histogram(;@) ;
sub histogram2d(;@) ;
sub howbig_c;
sub identvaff(;@) ;
sub in(;@) ;
sub indadd(;@) ;
sub index1d(;@) ;
sub initialize;
sub inner(;@) ;
sub inner2(;@) ;
sub inner2d(;@) ;
sub inner2t(;@) ;
sub innerwt(;@) ;
sub interpolate(;@) ;
sub intover(;@) ;
sub ipow(;@) ;
sub is_inplace;
sub isbad(;@) ;
sub iscontig;
sub isfinite(;@) ;
sub isgood(;@) ;
sub isnull;
sub lags(;@) ;
sub le(;@) ;
sub lgamma(;@) ;
sub line_3x_3c(;@) ;
sub log(;@) ;
sub lt(;@) ;
sub make_null($) ;
sub make_physdims;
sub make_physical;
sub make_physvaffine;
sub max2d_ind(;@) ;
sub maximum(;@) ;
sub maximum_ind(;@) ;
sub maximum_n_ind(;@) ;
sub maxover(;@) ;
sub maxover_ind(;@) ;
sub maxover_n_ind(;@) ;
sub medover(;@) ;
sub minimum(;@) ;
sub minimum_ind(;@) ;
sub minimum_n_ind(;@) ;
sub minmaximum(;@) ;
sub minmaxover(;@) ;
sub minover(;@) ;
sub minover_ind(;@) ;
sub minover_n_ind(;@) ;
sub minus(;@) ;
sub modeover(;@) ;
sub modulo(;@) ;
sub mult(;@) ;
sub nbadover(;@) ;
sub ndims;
sub ndtri(;@) ;
sub ne(;@) ;
sub nelem;
sub ngoodover(;@) ;
sub norm(;@) ;
sub not(;@) ;
sub oddmedover(;@) ;
sub oddpctover(;@) ;
sub or2(;@) ;
sub orover(;@) ;
sub oslice(;@) ;
sub outer(;@) ;
sub patch2d(;@) ;
sub patchbad2d(;@) ;
sub pcoef(;@) ;
sub pctover(;@) ;
sub pdl_hard_copy;
sub pdl_null;
sub plus(;@) ;
sub pnminascii(;@) ;
sub pnminraw(;@) ;
sub pnmout(;@) ;
sub pnpoly_pp(;@) ;
sub pnpolyfill_pp(;@) ;
sub poco(;@) ;
sub podi(;@) ;
sub polfit(;@) ;
sub polyfill_pp(;@) ;
sub polyroots(;@) ;
sub pow(;@) ;
sub power(;@) ;
sub prodover(;@) ;
sub pvalue(;@) ;
sub qag_meat(;@) ;
sub qagi_meat(;@) ;
sub qagil_meat(;@) ;
sub qagiu_meat(;@) ;
sub qagp_meat(;@) ;
sub qags_meat(;@) ;
sub qawc_meat(;@) ;
sub qawf_meat(;@) ;
sub qawo_meat(;@) ;
sub qaws_meat(;@) ;
sub qng_meat(;@) ;
sub qsort(;@) ;
sub qsorti(;@) ;
sub qsortvec(;@) ;
sub qsortveci(;@) ;
sub remove_threading_magic;
sub repulse(;@) ;
sub rescale2d(;@) ;
sub rint(;@) ;
sub rot2d(;@) ;
sub rotate(;@) ;
sub rs(;@) ;
sub s_identity(;@) ;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_data_by_mmap;
sub set_data_by_offset;
sub set_dataflow_b;
sub set_dataflow_f;
sub set_datatype;
sub set_inplace;
sub set_state_and_add_deletedata_magic;
sub setbadif(;@) ;
sub setbadtonan(;@) ;
sub setbadtoval(;@) ;
sub setdims;
sub sethdr;
sub setnantobad(;@) ;
sub setvaltobad(;@) ;
sub shiftleft(;@) ;
sub shiftright(;@) ;
sub simq(;@) ;
sub sin(;@) ;
sub sinh(;@) ;
sub sliceb(;@) ;
sub spaceship(;@) ;
sub splitdim(;@) ;
sub sqrt(;@) ;
sub squaretotri(;@) ;
sub sumover(;@) ;
sub svd(;@) ;
sub svdc(;@) ;
sub swapEndian($$) ;
sub tan(;@) ;
sub tanh(;@) ;
sub threadI(;@) ;
sub threadover;
sub threadover_n;
sub tracedebug;
sub unthread(;@) ;
sub upd_data;
sub vaffine;
sub vrmlcoordsvert(;@) ;
sub vsearch_bin_exclusive(;@) ;
sub vsearch_bin_inclusive(;@) ;
sub vsearch_insert_leftmost(;@) ;
sub vsearch_insert_rightmost(;@) ;
sub vsearch_match(;@) ;
sub vsearch_sample(;@) ;
sub whistogram(;@) ;
sub whistogram2d(;@) ;
sub write_png(;@) ;
sub write_png_ex(;@) ;
sub write_true_png(;@) ;
sub write_true_png_ex(;@) ;
sub wtstat(;@) ;
sub xor(;@) ;
sub zcover(;@) ;
}
package PDL::Bad {
sub append(;@) ;
sub axisvalues(;@) ;
sub badflag($;$) ;
sub copybad(;@) ;
sub crossp(;@) ;
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub histogram(;@) ;
sub histogram2d(;@) ;
sub in(;@) ;
sub indadd(;@) ;
sub inner(;@) ;
sub inner2(;@) ;
sub inner2d(;@) ;
sub inner2t(;@) ;
sub innerwt(;@) ;
sub interpolate(;@) ;
sub isbad(;@) ;
sub isgood(;@) ;
sub nbadover(;@) ;
sub nelem;
sub ngoodover(;@) ;
sub norm(;@) ;
sub outer(;@) ;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
sub setbadif(;@) ;
sub setbadtonan(;@) ;
sub setbadtoval(;@) ;
sub setnantobad(;@) ;
sub setvaltobad(;@) ;
sub uniqvec;
sub vsearch_bin_exclusive(;@) ;
sub vsearch_bin_inclusive(;@) ;
sub vsearch_insert_leftmost(;@) ;
sub vsearch_insert_rightmost(;@) ;
sub vsearch_match(;@) ;
sub vsearch_sample(;@) ;
sub whistogram(;@) ;
sub whistogram2d(;@) ;
sub wtstat(;@) ;
}
package PDL::Bad::PDL {
sub PP;
}
package PDL::Basic {
sub axislinvals;
}
package PDL::CallExt {
sub _callext_int;
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
}
package PDL::Complex {
sub Cacos(;@) ;
sub Cacosh(;@) ;
sub Cadd(;@) ;
sub Casin(;@) ;
sub Casinh(;@) ;
sub Catanh(;@) ;
sub Ccmp(;@) ;
sub Cconj(;@) ;
sub Ccos(;@) ;
sub Ccosh(;@) ;
sub Cdiv(;@) ;
sub Cexp(;@) ;
sub Clog(;@) ;
sub Cmul(;@) ;
sub Cp2r(;@) ;
sub Cpow(;@) ;
sub Cprodover(;@) ;
sub Cproj(;@) ;
sub Cr2p(;@) ;
sub Cscale(;@) ;
sub Csin(;@) ;
sub Csinh(;@) ;
sub Csqrt(;@) ;
sub Csub(;@) ;
sub Ctanh(;@) ;
sub _Cabs2_int($$) ;
sub _Cabs_int($$) ;
sub _Carg_int($$) ;
sub _Croots_int($$$) ;
sub _clump_int(;@) ;
sub _i2C_int($$) ;
sub _r2C_int($$) ;
sub _rCpolynomial_int($$$) ;
sub affine;
sub affineinternal(;@) ;
sub badflag($;$) ;
sub converttypei;
sub copybad(;@) ;
sub cos(;@) ;
sub diagonalI(;@) ;
sub exp(;@) ;
sub flowconvert(;@) ;
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub identvaff(;@) ;
sub index1d(;@) ;
sub indexND;
sub indexNDb;
sub isbad(;@) ;
sub isgood(;@) ;
sub lags(;@) ;
sub log(;@) ;
sub nbadover(;@) ;
sub nelem;
sub ngoodover(;@) ;
sub oslice(;@) ;
sub prodover(;@) ;
sub rotate(;@) ;
sub s_identity(;@) ;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
sub setbadif(;@) ;
sub setbadtonan(;@) ;
sub setbadtoval(;@) ;
sub setnantobad(;@) ;
sub setvaltobad(;@) ;
sub sin(;@) ;
sub sliceb(;@) ;
sub splitdim(;@) ;
sub sqrt(;@) ;
sub threadI(;@) ;
sub unthread(;@) ;
}
package PDL::Complex::PDL {
sub PP;
}
package PDL::Compression {
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::Core {
sub F_ALLOCSP() ;
sub F_ALLOCSP64() ;
sub F_COMPAT() ;
sub F_DUP2FD() ;
sub F_FREESP() ;
sub F_FREESP64() ;
sub F_FSYNC() ;
sub F_FSYNC64() ;
sub F_NODNY() ;
sub F_POSIX() ;
sub F_RDACC() ;
sub F_RDDNY() ;
sub F_RWACC() ;
sub F_RWDNY() ;
sub F_SHARE() ;
sub F_UNSHARE() ;
sub F_WRACC() ;
sub F_WRDNY() ;
sub MAP_PRIVATE() ;
sub MAP_SHARED() ;
sub O_ALIAS() ;
sub O_DEFER() ;
sub O_EXLOCK() ;
sub O_NOINHERIT() ;
sub O_RANDOM() ;
sub O_RAW() ;
sub O_RSRC() ;
sub O_SEQUENTIAL() ;
sub O_SHLOCK() ;
sub O_TEMPORARY() ;
sub PROT_READ() ;
sub PROT_WRITE() ;
sub at_bad_c;
sub at_c;
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub is_scalar_SvPOK;
sub list_c;
sub listref_c;
sub nelem;
sub pdl_avref;
sub pthreads_enabled;
sub sclr_c;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_c;
sub set_debugging;
sub sys_map;
}
package PDL::FFT {
sub _fft(;@) ;
sub _ifft(;@) ;
sub axislinvals;
sub cdiv(;@) ;
sub cmul(;@) ;
sub convmath(;@) ;
sub fft_free() ;
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::Fit::Gaussian {
sub fitgauss1d(;@) ;
sub fitgauss1dr(;@) ;
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::GSL::DIFF {
sub diff_backward(;@) ;
sub diff_central(;@) ;
sub diff_forward(;@) ;
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::GSL::INTEG {
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub nelem;
sub qag_meat(;@) ;
sub qagi_meat(;@) ;
sub qagil_meat(;@) ;
sub qagiu_meat(;@) ;
sub qagp_meat(;@) ;
sub qags_meat(;@) ;
sub qawc_meat(;@) ;
sub qawf_meat(;@) ;
sub qawo_meat(;@) ;
sub qaws_meat(;@) ;
sub qng_meat(;@) ;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::GSL::INTERP {
sub eval_deriv2_meat(;@) ;
sub eval_deriv2_meat_ext(;@) ;
sub eval_deriv_meat(;@) ;
sub eval_deriv_meat_ext(;@) ;
sub eval_integ_meat(;@) ;
sub eval_integ_meat_ext(;@) ;
sub eval_meat(;@) ;
sub eval_meat_ext(;@) ;
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub init_meat(;@) ;
sub nelem;
sub new_accel() ;
sub new_spline($$) ;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::GSL::MROOT {
sub fsolver_meat(;@) ;
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::GSL::RNG {
sub DESTROY($) ;
sub gsl_get_int_meat(;@) ;
sub gsl_get_meat(;@) ;
sub gsl_get_uniform_meat(;@) ;
sub gsl_get_uniform_pos_meat(;@) ;
sub max($) ;
sub min($) ;
sub name($) ;
sub new($$) ;
sub ran_additive_gaussian_meat(;@) ;
sub ran_additive_poisson_meat(;@) ;
sub ran_bernoulli_meat(;@) ;
sub ran_bernoulli_var_meat(;@) ;
sub ran_beta_meat(;@) ;
sub ran_beta_var_meat(;@) ;
sub ran_binomial_meat(;@) ;
sub ran_binomial_var_meat(;@) ;
sub ran_bivariate_gaussian_meat(;@) ;
sub ran_caos_meat(;@) ;
sub ran_cauchy_meat(;@) ;
sub ran_cauchy_var_meat(;@) ;
sub ran_chisq_meat(;@) ;
sub ran_chisq_var_meat(;@) ;
sub ran_choose($$$) ;
sub ran_dir_2d_meat(;@) ;
sub ran_dir_3d_meat(;@) ;
sub ran_dir_nd_meat(;@) ;
sub ran_discrete_meat(;@) ;
sub ran_discrete_preproc($$) ;
sub ran_exponential_meat(;@) ;
sub ran_exponential_var_meat(;@) ;
sub ran_exppow_meat(;@) ;
sub ran_exppow_var_meat(;@) ;
sub ran_fdist_meat(;@) ;
sub ran_fdist_var_meat(;@) ;
sub ran_feed_poisson_meat(;@) ;
sub ran_flat_meat(;@) ;
sub ran_flat_var_meat(;@) ;
sub ran_gamma_meat(;@) ;
sub ran_gamma_var_meat(;@) ;
sub ran_gaussian_meat(;@) ;
sub ran_gaussian_var_meat(;@) ;
sub ran_geometric_meat(;@) ;
sub ran_geometric_var_meat(;@) ;
sub ran_gumbel1_meat(;@) ;
sub ran_gumbel1_var_meat(;@) ;
sub ran_gumbel2_meat(;@) ;
sub ran_gumbel2_var_meat(;@) ;
sub ran_hypergeometric_meat(;@) ;
sub ran_hypergeometric_var_meat(;@) ;
sub ran_laplace_meat(;@) ;
sub ran_laplace_var_meat(;@) ;
sub ran_levy_meat(;@) ;
sub ran_levy_var_meat(;@) ;
sub ran_logarithmic_meat(;@) ;
sub ran_logarithmic_var_meat(;@) ;
sub ran_logistic_meat(;@) ;
sub ran_logistic_var_meat(;@) ;
sub ran_lognormal_meat(;@) ;
sub ran_lognormal_var_meat(;@) ;
sub ran_negative_binomial_meat(;@) ;
sub ran_negative_binomial_var_meat(;@) ;
sub ran_pareto_meat(;@) ;
sub ran_pareto_var_meat(;@) ;
sub ran_pascal_meat(;@) ;
sub ran_pascal_var_meat(;@) ;
sub ran_poisson_meat(;@) ;
sub ran_poisson_var_meat(;@) ;
sub ran_rayleigh_meat(;@) ;
sub ran_rayleigh_tail_meat(;@) ;
sub ran_rayleigh_tail_var_meat(;@) ;
sub ran_rayleigh_var_meat(;@) ;
sub ran_shuffle($$) ;
sub ran_tdist_meat(;@) ;
sub ran_tdist_var_meat(;@) ;
sub ran_ugaussian_tail_meat(;@) ;
sub ran_ugaussian_tail_var_meat(;@) ;
sub ran_ver_meat(;@) ;
sub ran_weibull_meat(;@) ;
sub ran_weibull_var_meat(;@) ;
sub set_boundscheck($) ;
sub set_debugging($) ;
sub set_seed($$) ;
}
package PDL::GSLMROOT {
sub fsolver_meat(;@) ;
}
package PDL::GSLSF::AIRY {
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub gsl_sf_airy_Ai(;@) ;
sub gsl_sf_airy_Ai_deriv(;@) ;
sub gsl_sf_airy_Ai_deriv_scaled(;@) ;
sub gsl_sf_airy_Ai_scaled(;@) ;
sub gsl_sf_airy_Bi(;@) ;
sub gsl_sf_airy_Bi_deriv(;@) ;
sub gsl_sf_airy_Bi_deriv_scaled(;@) ;
sub gsl_sf_airy_Bi_scaled(;@) ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::GSLSF::BESSEL {
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub gsl_sf_bessel_I_array(;@) ;
sub gsl_sf_bessel_I_scaled_array(;@) ;
sub gsl_sf_bessel_In(;@) ;
sub gsl_sf_bessel_In_scaled(;@) ;
sub gsl_sf_bessel_Inu(;@) ;
sub gsl_sf_bessel_Inu_scaled(;@) ;
sub gsl_sf_bessel_J_array(;@) ;
sub gsl_sf_bessel_Jn(;@) ;
sub gsl_sf_bessel_Jnu(;@) ;
sub gsl_sf_bessel_K_array(;@) ;
sub gsl_sf_bessel_K_scaled_array(;@) ;
sub gsl_sf_bessel_Kn(;@) ;
sub gsl_sf_bessel_Kn_scaled(;@) ;
sub gsl_sf_bessel_Knu(;@) ;
sub gsl_sf_bessel_Knu_scaled(;@) ;
sub gsl_sf_bessel_Y_array(;@) ;
sub gsl_sf_bessel_Yn(;@) ;
sub gsl_sf_bessel_Ynu(;@) ;
sub gsl_sf_bessel_i_scaled_array(;@) ;
sub gsl_sf_bessel_il_scaled(;@) ;
sub gsl_sf_bessel_j_array(;@) ;
sub gsl_sf_bessel_jl(;@) ;
sub gsl_sf_bessel_k_scaled_array(;@) ;
sub gsl_sf_bessel_kl_scaled(;@) ;
sub gsl_sf_bessel_lnKnu(;@) ;
sub gsl_sf_bessel_y_array(;@) ;
sub gsl_sf_bessel_yl(;@) ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::GSLSF::CLAUSEN {
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub gsl_sf_clausen(;@) ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::GSLSF::COULOMB {
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub gsl_sf_coulomb_CL_e(;@) ;
sub gsl_sf_coulomb_wave_FGp_array(;@) ;
sub gsl_sf_coulomb_wave_sphF_array(;@) ;
sub gsl_sf_hydrogenicR(;@) ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::GSLSF::COUPLING {
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub gsl_sf_coupling_3j(;@) ;
sub gsl_sf_coupling_6j(;@) ;
sub gsl_sf_coupling_9j(;@) ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::GSLSF::DAWSON {
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub gsl_sf_dawson(;@) ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::GSLSF::DEBYE {
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub gsl_sf_debye_1(;@) ;
sub gsl_sf_debye_2(;@) ;
sub gsl_sf_debye_3(;@) ;
sub gsl_sf_debye_4(;@) ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::GSLSF::DILOG {
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub gsl_sf_complex_dilog(;@) ;
sub gsl_sf_dilog(;@) ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::GSLSF::ELEMENTARY {
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub gsl_sf_multiply(;@) ;
sub gsl_sf_multiply_err(;@) ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::GSLSF::ELLINT {
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub gsl_sf_ellint_D(;@) ;
sub gsl_sf_ellint_E(;@) ;
sub gsl_sf_ellint_Ecomp(;@) ;
sub gsl_sf_ellint_F(;@) ;
sub gsl_sf_ellint_Kcomp(;@) ;
sub gsl_sf_ellint_P(;@) ;
sub gsl_sf_ellint_RC(;@) ;
sub gsl_sf_ellint_RD(;@) ;
sub gsl_sf_ellint_RF(;@) ;
sub gsl_sf_ellint_RJ(;@) ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::GSLSF::ELLJAC {
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub gsl_sf_elljac(;@) ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::GSLSF::ERF {
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub gsl_sf_erf(;@) ;
sub gsl_sf_erf_Q(;@) ;
sub gsl_sf_erf_Z(;@) ;
sub gsl_sf_erfc(;@) ;
sub gsl_sf_log_erfc(;@) ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::GSLSF::EXP {
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub gsl_sf_exp(;@) ;
sub gsl_sf_exp_err(;@) ;
sub gsl_sf_exprel_n(;@) ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::GSLSF::EXPINT {
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub gsl_sf_Chi(;@) ;
sub gsl_sf_Ci(;@) ;
sub gsl_sf_Shi(;@) ;
sub gsl_sf_Si(;@) ;
sub gsl_sf_atanint(;@) ;
sub gsl_sf_expint_3(;@) ;
sub gsl_sf_expint_E1(;@) ;
sub gsl_sf_expint_E2(;@) ;
sub gsl_sf_expint_Ei(;@) ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::GSLSF::FERMI_DIRAC {
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub gsl_sf_fermi_dirac_3half(;@) ;
sub gsl_sf_fermi_dirac_half(;@) ;
sub gsl_sf_fermi_dirac_inc_0(;@) ;
sub gsl_sf_fermi_dirac_int(;@) ;
sub gsl_sf_fermi_dirac_mhalf(;@) ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::GSLSF::GAMMA {
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub gsl_sf_beta(;@) ;
sub gsl_sf_choose(;@) ;
sub gsl_sf_doublefact(;@) ;
sub gsl_sf_fact(;@) ;
sub gsl_sf_gamma(;@) ;
sub gsl_sf_gamma_inc_P(;@) ;
sub gsl_sf_gamma_inc_Q(;@) ;
sub gsl_sf_gammainv(;@) ;
sub gsl_sf_gammastar(;@) ;
sub gsl_sf_lnbeta(;@) ;
sub gsl_sf_lnchoose(;@) ;
sub gsl_sf_lndoublefact(;@) ;
sub gsl_sf_lnfact(;@) ;
sub gsl_sf_lngamma(;@) ;
sub gsl_sf_lngamma_complex(;@) ;
sub gsl_sf_lnpoch(;@) ;
sub gsl_sf_poch(;@) ;
sub gsl_sf_pochrel(;@) ;
sub gsl_sf_taylorcoeff(;@) ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::GSLSF::GEGENBAUER {
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub gsl_sf_gegenpoly_array(;@) ;
sub gsl_sf_gegenpoly_n(;@) ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::GSLSF::HYPERG {
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub gsl_sf_hyperg_0F1(;@) ;
sub gsl_sf_hyperg_1F1(;@) ;
sub gsl_sf_hyperg_2F0(;@) ;
sub gsl_sf_hyperg_2F1(;@) ;
sub gsl_sf_hyperg_2F1_conj(;@) ;
sub gsl_sf_hyperg_2F1_conj_renorm(;@) ;
sub gsl_sf_hyperg_2F1_renorm(;@) ;
sub gsl_sf_hyperg_U(;@) ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::GSLSF::LAGUERRE {
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub gsl_sf_laguerre_n(;@) ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::GSLSF::LEGENDRE {
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub gsl_sf_conicalP_0(;@) ;
sub gsl_sf_conicalP_1(;@) ;
sub gsl_sf_conicalP_cyl_reg_e(;@) ;
sub gsl_sf_conicalP_half(;@) ;
sub gsl_sf_conicalP_mhalf(;@) ;
sub gsl_sf_conicalP_sph_reg(;@) ;
sub gsl_sf_legendre_H3d(;@) ;
sub gsl_sf_legendre_H3d_array(;@) ;
sub gsl_sf_legendre_Pl(;@) ;
sub gsl_sf_legendre_Pl_array(;@) ;
sub gsl_sf_legendre_Plm(;@) ;
sub gsl_sf_legendre_Ql(;@) ;
sub gsl_sf_legendre_array(;@) ;
sub gsl_sf_legendre_array_index(;@) ;
sub gsl_sf_legendre_sphPlm(;@) ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::GSLSF::LOG {
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub gsl_sf_complex_log(;@) ;
sub gsl_sf_log(;@) ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::GSLSF::POLY {
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub gsl_poly_eval(;@) ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::GSLSF::POW_INT {
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub gsl_sf_pow_int(;@) ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::GSLSF::PSI {
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub gsl_sf_psi(;@) ;
sub gsl_sf_psi_1piy(;@) ;
sub gsl_sf_psi_n(;@) ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::GSLSF::SYNCHROTRON {
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub gsl_sf_synchrotron_1(;@) ;
sub gsl_sf_synchrotron_2(;@) ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::GSLSF::TRANSPORT {
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub gsl_sf_transport_2(;@) ;
sub gsl_sf_transport_3(;@) ;
sub gsl_sf_transport_4(;@) ;
sub gsl_sf_transport_5(;@) ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::GSLSF::TRIG {
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub gsl_sf_angle_restrict_pos(;@) ;
sub gsl_sf_angle_restrict_symm(;@) ;
sub gsl_sf_complex_cos(;@) ;
sub gsl_sf_complex_logsin(;@) ;
sub gsl_sf_complex_sin(;@) ;
sub gsl_sf_cos(;@) ;
sub gsl_sf_cos_err(;@) ;
sub gsl_sf_hypot(;@) ;
sub gsl_sf_lncosh(;@) ;
sub gsl_sf_lnsinh(;@) ;
sub gsl_sf_polar_to_rect(;@) ;
sub gsl_sf_rect_to_polar(;@) ;
sub gsl_sf_sin(;@) ;
sub gsl_sf_sin_err(;@) ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::GSLSF::ZETA {
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub gsl_sf_eta(;@) ;
sub gsl_sf_hzeta(;@) ;
sub gsl_sf_zeta(;@) ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::Graphics::IIS {
sub _iis;
sub _iiscirc;
sub _iiscur_int() ;
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::Graphics::OpenGLQ {
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub gl_arrows(;@) ;
sub gl_line_strip(;@) ;
sub gl_lines(;@) ;
sub gl_points(;@) ;
sub gl_texts(;@) ;
sub gl_triangles(;@) ;
sub gl_triangles_mat(;@) ;
sub gl_triangles_n(;@) ;
sub gl_triangles_n_mat(;@) ;
sub gl_triangles_wn(;@) ;
sub gl_triangles_wn_mat(;@) ;
sub line_3x_3c(;@) ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::Graphics::TriD::Rout {
sub attract(;@) ;
sub combcoords(;@) ;
sub contour_segments_internal(;@) ;
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub nelem;
sub repulse(;@) ;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
sub vrmlcoordsvert(;@) ;
}
package PDL::IO::Browser {
sub browse(;@) ;
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::IO::FITS {
sub _rasc(;@) ;
sub append(;@) ;
sub axisvalues(;@) ;
sub badflag($;$) ;
sub bswap2(;@) ;
sub bswap4(;@) ;
sub bswap8(;@) ;
sub copybad(;@) ;
sub crossp(;@) ;
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub histogram(;@) ;
sub histogram2d(;@) ;
sub in(;@) ;
sub indadd(;@) ;
sub inner(;@) ;
sub inner2(;@) ;
sub inner2d(;@) ;
sub inner2t(;@) ;
sub innerwt(;@) ;
sub interpolate(;@) ;
sub isbad(;@) ;
sub isgood(;@) ;
sub nbadover(;@) ;
sub nelem;
sub ngoodover(;@) ;
sub norm(;@) ;
sub outer(;@) ;
sub set_autopthread_size;
sub set_autopthread_targ;
sub setbadif(;@) ;
sub setbadtonan(;@) ;
sub setbadtoval(;@) ;
sub setnantobad(;@) ;
sub setvaltobad(;@) ;
sub uniqvec;
sub vsearch_bin_exclusive(;@) ;
sub vsearch_bin_inclusive(;@) ;
sub vsearch_insert_leftmost(;@) ;
sub vsearch_insert_rightmost(;@) ;
sub vsearch_match(;@) ;
sub vsearch_sample(;@) ;
sub whistogram(;@) ;
sub whistogram2d(;@) ;
sub wtstat(;@) ;
}
package PDL::IO::FITS::PDL {
sub PP;
}
package PDL::IO::GD {
sub _clump_int(;@) ;
sub _gdImageAABlend($) ;
sub _gdImageAlpha($$) ;
sub _gdImageAlphaBlending($$) ;
sub _gdImageArc($$$$$$$$) ;
sub _gdImageArcs(;@) ;
sub _gdImageBlue($$) ;
sub _gdImageBoundsSafe($$$) ;
sub _gdImageChar($$$$$$) ;
sub _gdImageCharUp($$$$$$) ;
sub _gdImageColorAllocate($$$$) ;
sub _gdImageColorAllocateAlpha($$$$$) ;
sub _gdImageColorAllocateAlphas(;@) ;
sub _gdImageColorAllocates(;@) ;
sub _gdImageColorClosest($$$$) ;
sub _gdImageColorClosestAlpha($$$$$) ;
sub _gdImageColorClosestHWB($$$$) ;
sub _gdImageColorDeallocate($$) ;
sub _gdImageColorExact($$$$) ;
sub _gdImageColorExactAlpha($$$$$) ;
sub _gdImageColorResolve($$$$) ;
sub _gdImageColorResolveAlpha($$$$$) ;
sub _gdImageColorTransparent($$) ;
sub _gdImageColorsTotal($) ;
sub _gdImageCompare($$) ;
sub _gdImageCopy($$$$$$$$) ;
sub _gdImageCopyMerge($$$$$$$$$) ;
sub _gdImageCopyMergeGray($$$$$$$$$) ;
sub _gdImageCopyResampled($$$$$$$$$$) ;
sub _gdImageCopyResized($$$$$$$$$$) ;
sub _gdImageCopyRotated($$$$$$$$$) ;
sub _gdImageCreate($$) ;
sub _gdImageCreateFromGd($) ;
sub _gdImageCreateFromGd2($) ;
sub _gdImageCreateFromGd2Ptr($) ;
sub _gdImageCreateFromGdPtr($) ;
sub _gdImageCreateFromGif($) ;
sub _gdImageCreateFromGifPtr($) ;
sub _gdImageCreateFromJpeg($) ;
sub _gdImageCreateFromJpegPtr($) ;
sub _gdImageCreateFromPng($) ;
sub _gdImageCreateFromPngPtr($) ;
sub _gdImageCreateFromWBMP($) ;
sub _gdImageCreateFromWBMPPtr($) ;
sub _gdImageCreateFromXbm($) ;
sub _gdImageCreatePalette($$) ;
sub _gdImageCreateTrueColor($$) ;
sub _gdImageDashedLine($$$$$$) ;
sub _gdImageDashedLines(;@) ;
sub _gdImageDestroy($) ;
sub _gdImageFill($$$$) ;
sub _gdImageFillToBorder($$$$$) ;
sub _gdImageFilledArc($$$$$$$$$) ;
sub _gdImageFilledArcs(;@) ;
sub _gdImageFilledEllipse($$$$$$) ;
sub _gdImageFilledEllipses(;@) ;
sub _gdImageFilledPolygon($$$$) ;
sub _gdImageFilledRectangle($$$$$$) ;
sub _gdImageFilledRectangles(;@) ;
sub _gdImageGd($$) ;
sub _gdImageGd2($$$$) ;
sub _gdImageGd2Ptr($$$) ;
sub _gdImageGdPtr($) ;
sub _gdImageGetClip($$$$$) ;
sub _gdImageGetInterlaced($) ;
sub _gdImageGetPixel($$$) ;
sub _gdImageGetTransparent($) ;
sub _gdImageGif($$) ;
sub _gdImageGreen($$) ;
sub _gdImageInterlace($$) ;
sub _gdImageJpeg($$$) ;
sub _gdImageJpegPtr($$) ;
sub _gdImageLine($$$$$$) ;
sub _gdImageLines(;@) ;
sub _gdImagePaletteCopy($$) ;
sub _gdImagePng($$) ;
sub _gdImagePngEx($$$) ;
sub _gdImagePngPtr($) ;
sub _gdImagePngPtrEx($$) ;
sub _gdImagePolygon($$$$) ;
sub _gdImageRectangle($$$$$$) ;
sub _gdImageRectangles(;@) ;
sub _gdImageRed($$) ;
sub _gdImageSX($) ;
sub _gdImageSY($) ;
sub _gdImageSaveAlpha($$) ;
sub _gdImageSetAntiAliased($$) ;
sub _gdImageSetAntiAliasedDontBlend($$$) ;
sub _gdImageSetBrush($$) ;
sub _gdImageSetClip($$$$$) ;
sub _gdImageSetPixel($$$$) ;
sub _gdImageSetPixels(;@) ;
sub _gdImageSetStyle($$$) ;
sub _gdImageSetThickness($$) ;
sub _gdImageSetTile($$) ;
sub _gdImageString($$$$$$) ;
sub _gdImageString16($$$$$$) ;
sub _gdImageStringFT($$$$$$$$$) ;
sub _gdImageStringTTF($$$$$$$$$) ;
sub _gdImageStringUp($$$$$$) ;
sub _gdImageStringUp16($$$$$$) ;
sub _gdImageTrueColor($) ;
sub _gdImageTrueColorToPalette($$$) ;
sub _gdImageWBMP($$$) ;
sub _gdImageWBMPPtr($$) ;
sub _gd_image_to_pdl(;@) ;
sub _gd_image_to_pdl_true(;@) ;
sub _get_png_xs($) ;
sub _get_png_ys($) ;
sub _pdl_to_gd_image_lut(;@) ;
sub _pdl_to_gd_image_true(;@) ;
sub _rasc(;@) ;
sub _read_png(;@) ;
sub _read_png_lut(;@) ;
sub _read_true_png(;@) ;
sub acos(;@) ;
sub acosh(;@) ;
sub affine;
sub affineinternal(;@) ;
sub andover(;@) ;
sub append(;@) ;
sub asin(;@) ;
sub asinh(;@) ;
sub assgn(;@) ;
sub atan(;@) ;
sub atanh(;@) ;
sub average(;@) ;
sub avgover(;@) ;
sub axislinvals;
sub axisvalues(;@) ;
sub badflag($;$) ;
sub badmask(;@) ;
sub bandover(;@) ;
sub bessj0(;@) ;
sub bessj1(;@) ;
sub bessjn(;@) ;
sub bessy0(;@) ;
sub bessy1(;@) ;
sub bessyn(;@) ;
sub borover(;@) ;
sub bswap2(;@) ;
sub bswap4(;@) ;
sub bswap8(;@) ;
sub ceil(;@) ;
sub converttypei;
sub copybad(;@) ;
sub cosh(;@) ;
sub crossp(;@) ;
sub cumuprodover(;@) ;
sub cumusumover(;@) ;
sub daverage(;@) ;
sub davgover(;@) ;
sub dcumuprodover(;@) ;
sub dcumusumover(;@) ;
sub diagonalI(;@) ;
sub dprodover(;@) ;
sub dsumover(;@) ;
sub erf(;@) ;
sub erfc(;@) ;
sub erfi(;@) ;
sub floor(;@) ;
sub flowconvert(;@) ;
sub gdAlphaBlend($$) ;
sub gdFontGetGiant() ;
sub gdFontGetLarge() ;
sub gdFontGetMediumBold() ;
sub gdFontGetSmall() ;
sub gdFontGetTiny() ;
sub gdFree($) ;
sub gdTrueColor($$$) ;
sub gdTrueColorAlpha($$$$) ;
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub histogram(;@) ;
sub histogram2d(;@) ;
sub identvaff(;@) ;
sub in(;@) ;
sub indadd(;@) ;
sub index1d(;@) ;
sub indexND;
sub indexNDb;
sub inner(;@) ;
sub inner2(;@) ;
sub inner2d(;@) ;
sub inner2t(;@) ;
sub innerwt(;@) ;
sub interpolate(;@) ;
sub intover(;@) ;
sub ipow(;@) ;
sub isbad(;@) ;
sub isfinite(;@) ;
sub isgood(;@) ;
sub lags(;@) ;
sub lgamma(;@) ;
sub maximum(;@) ;
sub maximum_ind(;@) ;
sub maximum_n_ind(;@) ;
sub maxover(;@) ;
sub maxover_ind(;@) ;
sub maxover_n_ind(;@) ;
sub medover(;@) ;
sub minimum(;@) ;
sub minimum_ind(;@) ;
sub minimum_n_ind(;@) ;
sub minmaximum(;@) ;
sub minmaxover(;@) ;
sub minover(;@) ;
sub minover_ind(;@) ;
sub minover_n_ind(;@) ;
sub modeover(;@) ;
sub nbadover(;@) ;
sub ndtri(;@) ;
sub nelem;
sub ngoodover(;@) ;
sub none(&@) ;
sub norm(;@) ;
sub oddmedover(;@) ;
sub oddpctover(;@) ;
sub orover(;@) ;
sub oslice(;@) ;
sub outer(;@) ;
sub pctover(;@) ;
sub polyroots(;@) ;
sub pow(;@) ;
sub prodover(;@) ;
sub qsort(;@) ;
sub qsorti(;@) ;
sub qsortvec(;@) ;
sub qsortveci(;@) ;
sub recompress_png_best($) ;
sub rint(;@) ;
sub rotate(;@) ;
sub s_identity(;@) ;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
sub setbadif(;@) ;
sub setbadtonan(;@) ;
sub setbadtoval(;@) ;
sub setnantobad(;@) ;
sub setvaltobad(;@) ;
sub simq(;@) ;
sub sinh(;@) ;
sub sliceb(;@) ;
sub splitdim(;@) ;
sub squaretotri(;@) ;
sub sumover(;@) ;
sub svd(;@) ;
sub tan(;@) ;
sub tanh(;@) ;
sub threadI(;@) ;
sub uniqvec;
sub unthread(;@) ;
sub vsearch_bin_exclusive(;@) ;
sub vsearch_bin_inclusive(;@) ;
sub vsearch_insert_leftmost(;@) ;
sub vsearch_insert_rightmost(;@) ;
sub vsearch_match(;@) ;
sub vsearch_sample(;@) ;
sub whistogram(;@) ;
sub whistogram2d(;@) ;
sub write_png(;@) ;
sub write_png_ex(;@) ;
sub write_true_png(;@) ;
sub write_true_png_ex(;@) ;
sub wtstat(;@) ;
sub zcover(;@) ;
}
package PDL::IO::GD::PDL {
sub PP;
}
package PDL::IO::HDF {
sub append(;@) ;
sub axislinvals;
sub axisvalues(;@) ;
sub crossp(;@) ;
sub histogram(;@) ;
sub histogram2d(;@) ;
sub in(;@) ;
sub indadd(;@) ;
sub inner(;@) ;
sub inner2(;@) ;
sub inner2d(;@) ;
sub inner2t(;@) ;
sub innerwt(;@) ;
sub interpolate(;@) ;
sub norm(;@) ;
sub outer(;@) ;
sub uniqvec;
sub vsearch_bin_exclusive(;@) ;
sub vsearch_bin_inclusive(;@) ;
sub vsearch_insert_leftmost(;@) ;
sub vsearch_insert_rightmost(;@) ;
sub vsearch_match(;@) ;
sub vsearch_sample(;@) ;
sub whistogram(;@) ;
sub whistogram2d(;@) ;
sub wtstat(;@) ;
}
package PDL::IO::HDF::PDL {
sub PP;
}
package PDL::IO::HDF::SD {
sub Hishdf($) ;
sub UnpackSBigEndianPDL($$$) ;
sub _HEprint($) ;
sub _SDattrinfo($$$$$) ;
sub _SDcreate($$$$$) ;
sub _SDdiminfo($$$$$) ;
sub _SDend($) ;
sub _SDendaccess($) ;
sub _SDfileinfo($$$) ;
sub _SDgetcal($$$$$$) ;
sub _SDgetdatastrs($$$$$$) ;
sub _SDgetdimid($$) ;
sub _SDgetdimscale($$) ;
sub _SDgetdimstrs($$$$$) ;
sub _SDgetinfo($$$$$$) ;
sub _SDgetunlimiteddim($$) ;
sub _SDidtoref($) ;
sub _SDinitchunk($$$$) ;
sub _SDiscoordvar($) ;
sub _SDnametoindex($$) ;
sub _SDreadattr($$$) ;
sub _SDreaddata($$$$$) ;
sub _SDreftoindex($$) ;
sub _SDselect($$) ;
sub _SDsetattr($$$$$) ;
sub _SDsetattr_text($$$$) ;
sub _SDsetattr_values($$$$$) ;
sub _SDsetcal($$$$$$) ;
sub _SDsetchunk($$$) ;
sub _SDsetchunkcache($$$) ;
sub _SDsetcompress($$) ;
sub _SDsetdatastrs($$$$$) ;
sub _SDsetdimname($$) ;
sub _SDsetdimscale($$$$) ;
sub _SDsetdimstrs($$$$) ;
sub _SDsetexternalfile($$$) ;
sub _SDsetfillvalue($$) ;
sub _SDsetrange($$$) ;
sub _SDstart($$) ;
sub _SDwritechunk($$$) ;
sub _SDwritedata($$$$$) ;
sub append(;@) ;
sub axislinvals;
sub axisvalues(;@) ;
sub crossp(;@) ;
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub histogram(;@) ;
sub histogram2d(;@) ;
sub in(;@) ;
sub indadd(;@) ;
sub inner(;@) ;
sub inner2(;@) ;
sub inner2d(;@) ;
sub inner2t(;@) ;
sub innerwt(;@) ;
sub interpolate(;@) ;
sub nelem;
sub norm(;@) ;
sub outer(;@) ;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
sub uniqvec;
sub vsearch_bin_exclusive(;@) ;
sub vsearch_bin_inclusive(;@) ;
sub vsearch_insert_leftmost(;@) ;
sub vsearch_insert_rightmost(;@) ;
sub vsearch_match(;@) ;
sub vsearch_sample(;@) ;
sub whistogram(;@) ;
sub whistogram2d(;@) ;
sub wtstat(;@) ;
}
package PDL::IO::HDF::SD::PDL {
sub PP;
}
package PDL::IO::HDF::VS {
sub _Hclose($) ;
sub _Hishdf($) ;
sub _Hopen($$$) ;
sub _SDend($) ;
sub _SDendaccess($) ;
sub _SDgetinfo($$$$$$) ;
sub _SDreftoindex($$) ;
sub _SDselect($$) ;
sub _SDstart($$) ;
sub _VFfieldorder($$) ;
sub _VFfieldtype($$) ;
sub _VFnfields($) ;
sub _VSattach($$$) ;
sub _VSdetach($) ;
sub _VSelts($) ;
sub _VSfdefine($$$$) ;
sub _VSfind($$) ;
sub _VSfnattrs($$) ;
sub _VSgetattr($$$$) ;
sub _VSgetclass($$) ;
sub _VSgetfields($$) ;
sub _VSgetid($$) ;
sub _VSgetname($$) ;
sub _VSinquire($$$$$$) ;
sub _VSisattr($) ;
sub _VSlone($) ;
sub _VSread($$$$) ;
sub _VSsetclass($$) ;
sub _VSsetfields($$) ;
sub _VSsetname($$) ;
sub _VSsizeof($$) ;
sub _VSwrite($$$$) ;
sub _Vaddtagref($$$) ;
sub _Vattach($$$) ;
sub _Vdetach($) ;
sub _Vend($) ;
sub _Vgetclass($$) ;
sub _Vgetid($$) ;
sub _Vgetname($$) ;
sub _Vgettagref($$$$) ;
sub _Vinquire($$$) ;
sub _Vinsert($$) ;
sub _Visvg($$) ;
sub _Visvs($$) ;
sub _Vntagrefs($) ;
sub _Vsetclass($$) ;
sub _Vsetname($$) ;
sub _Vstart($) ;
sub _WriteMultPDL(@) ;
sub append(;@) ;
sub axislinvals;
sub axisvalues(;@) ;
sub crossp(;@) ;
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub histogram(;@) ;
sub histogram2d(;@) ;
sub in(;@) ;
sub indadd(;@) ;
sub inner(;@) ;
sub inner2(;@) ;
sub inner2d(;@) ;
sub inner2t(;@) ;
sub innerwt(;@) ;
sub interpolate(;@) ;
sub nelem;
sub norm(;@) ;
sub outer(;@) ;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
sub uniqvec;
sub vsearch_bin_exclusive(;@) ;
sub vsearch_bin_inclusive(;@) ;
sub vsearch_insert_leftmost(;@) ;
sub vsearch_insert_rightmost(;@) ;
sub vsearch_match(;@) ;
sub vsearch_sample(;@) ;
sub whistogram(;@) ;
sub whistogram2d(;@) ;
sub wtstat(;@) ;
}
package PDL::IO::HDF::VS::PDL {
sub PP;
}
package PDL::IO::Misc {
sub O_ALIAS() ;
sub O_DEFER() ;
sub O_EXLOCK() ;
sub O_NOINHERIT() ;
sub O_RANDOM() ;
sub O_RAW() ;
sub O_RSRC() ;
sub O_SEQUENTIAL() ;
sub O_SHLOCK() ;
sub O_TEMPORARY() ;
sub _rasc(;@) ;
sub append(;@) ;
sub axisvalues(;@) ;
sub badflag($;$) ;
sub bswap2(;@) ;
sub bswap4(;@) ;
sub bswap8(;@) ;
sub copybad(;@) ;
sub crossp(;@) ;
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub histogram(;@) ;
sub histogram2d(;@) ;
sub in(;@) ;
sub indadd(;@) ;
sub inner(;@) ;
sub inner2(;@) ;
sub inner2d(;@) ;
sub inner2t(;@) ;
sub innerwt(;@) ;
sub interpolate(;@) ;
sub isbad(;@) ;
sub isgood(;@) ;
sub nbadover(;@) ;
sub nelem;
sub ngoodover(;@) ;
sub norm(;@) ;
sub outer(;@) ;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
sub setbadif(;@) ;
sub setbadtonan(;@) ;
sub setbadtoval(;@) ;
sub setnantobad(;@) ;
sub setvaltobad(;@) ;
sub uniqvec;
sub vsearch_bin_exclusive(;@) ;
sub vsearch_bin_inclusive(;@) ;
sub vsearch_insert_leftmost(;@) ;
sub vsearch_insert_rightmost(;@) ;
sub vsearch_match(;@) ;
sub vsearch_sample(;@) ;
sub whistogram(;@) ;
sub whistogram2d(;@) ;
sub wtstat(;@) ;
}
package PDL::IO::Misc::PDL {
sub PP;
}
package PDL::IO::Pic {
sub chkext;
sub chkform;
sub chkpdl;
sub cquant_c(;@) ;
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub getconv;
sub getext;
sub gettmpdir;
sub nelem;
sub pnminascii(;@) ;
sub pnminraw(;@) ;
sub pnmout(;@) ;
sub set_autopthread_size;
sub set_autopthread_targ;
}
package PDL::IO::Pic::PDL {
sub PP;
}
package PDL::IO::Pnm {
sub _rasc(;@) ;
sub axislinvals;
sub bswap2(;@) ;
sub bswap4(;@) ;
sub bswap8(;@) ;
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub nelem;
sub pnminascii(;@) ;
sub pnminraw(;@) ;
sub pnmout(;@) ;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::IO::Pnm::PDL {
sub PP;
}
package PDL::IO::Storable {
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::Image2D {
sub _clump_int(;@) ;
sub _get_kernel_size() ;
sub _rasc(;@) ;
sub acos(;@) ;
sub acosh(;@) ;
sub affine;
sub affineinternal(;@) ;
sub andover(;@) ;
sub append(;@) ;
sub asin(;@) ;
sub asinh(;@) ;
sub assgn(;@) ;
sub atan(;@) ;
sub atanh(;@) ;
sub average(;@) ;
sub avgover(;@) ;
sub axislinvals;
sub axisvalues(;@) ;
sub badflag($;$) ;
sub badmask(;@) ;
sub bandover(;@) ;
sub bessj0(;@) ;
sub bessj1(;@) ;
sub bessjn(;@) ;
sub bessy0(;@) ;
sub bessy1(;@) ;
sub bessyn(;@) ;
sub bilin2d(;@) ;
sub borover(;@) ;
sub box2d(;@) ;
sub bswap2(;@) ;
sub bswap4(;@) ;
sub bswap8(;@) ;
sub ccNcompt(;@) ;
sub ceil(;@) ;
sub centroid2d(;@) ;
sub converttypei;
sub copybad(;@) ;
sub cosh(;@) ;
sub crossp(;@) ;
sub cumuprodover(;@) ;
sub cumusumover(;@) ;
sub daverage(;@) ;
sub davgover(;@) ;
sub dcumuprodover(;@) ;
sub dcumusumover(;@) ;
sub diagonalI(;@) ;
sub dprodover(;@) ;
sub dsumover(;@) ;
sub erf(;@) ;
sub erfc(;@) ;
sub erfi(;@) ;
sub floor(;@) ;
sub flowconvert(;@) ;
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub histogram(;@) ;
sub histogram2d(;@) ;
sub identvaff(;@) ;
sub in(;@) ;
sub indadd(;@) ;
sub index1d(;@) ;
sub indexND;
sub indexNDb;
sub inner(;@) ;
sub inner2(;@) ;
sub inner2d(;@) ;
sub inner2t(;@) ;
sub innerwt(;@) ;
sub interpolate(;@) ;
sub intover(;@) ;
sub ipow(;@) ;
sub isbad(;@) ;
sub isfinite(;@) ;
sub isgood(;@) ;
sub lags(;@) ;
sub lgamma(;@) ;
sub max2d_ind(;@) ;
sub maximum(;@) ;
sub maximum_ind(;@) ;
sub maximum_n_ind(;@) ;
sub maxover(;@) ;
sub maxover_ind(;@) ;
sub maxover_n_ind(;@) ;
sub medover(;@) ;
sub minimum(;@) ;
sub minimum_ind(;@) ;
sub minimum_n_ind(;@) ;
sub minmaximum(;@) ;
sub minmaxover(;@) ;
sub minover(;@) ;
sub minover_ind(;@) ;
sub minover_n_ind(;@) ;
sub modeover(;@) ;
sub nbadover(;@) ;
sub ndtri(;@) ;
sub nelem;
sub ngoodover(;@) ;
sub norm(;@) ;
sub oddmedover(;@) ;
sub oddpctover(;@) ;
sub orover(;@) ;
sub oslice(;@) ;
sub outer(;@) ;
sub patch2d(;@) ;
sub patchbad2d(;@) ;
sub pctover(;@) ;
sub polyroots(;@) ;
sub pow(;@) ;
sub prodover(;@) ;
sub qsort(;@) ;
sub qsorti(;@) ;
sub qsortvec(;@) ;
sub qsortveci(;@) ;
sub rescale2d(;@) ;
sub rint(;@) ;
sub rot2d(;@) ;
sub rotate(;@) ;
sub rotnewsz($$$) ;
sub s_identity(;@) ;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
sub setbadif(;@) ;
sub setbadtonan(;@) ;
sub setbadtoval(;@) ;
sub setnantobad(;@) ;
sub setvaltobad(;@) ;
sub simq(;@) ;
sub sinh(;@) ;
sub sliceb(;@) ;
sub splitdim(;@) ;
sub squaretotri(;@) ;
sub sumover(;@) ;
sub svd(;@) ;
sub tan(;@) ;
sub tanh(;@) ;
sub threadI(;@) ;
sub uniqvec;
sub unthread(;@) ;
sub vsearch_bin_exclusive(;@) ;
sub vsearch_bin_inclusive(;@) ;
sub vsearch_insert_leftmost(;@) ;
sub vsearch_insert_rightmost(;@) ;
sub vsearch_match(;@) ;
sub vsearch_sample(;@) ;
sub whistogram(;@) ;
sub whistogram2d(;@) ;
sub wtstat(;@) ;
sub zcover(;@) ;
}
package PDL::Image2D::PDL {
sub PP;
}
package PDL::ImageND {
sub floor(;@) ;
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::ImageRGB {
sub append(;@) ;
sub axislinvals;
sub axisvalues(;@) ;
sub cquant_c(;@) ;
sub crossp(;@) ;
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub histogram(;@) ;
sub histogram2d(;@) ;
sub in(;@) ;
sub indadd(;@) ;
sub inner(;@) ;
sub inner2(;@) ;
sub inner2d(;@) ;
sub inner2t(;@) ;
sub innerwt(;@) ;
sub interpolate(;@) ;
sub nelem;
sub norm(;@) ;
sub outer(;@) ;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
sub uniqvec;
sub vsearch_bin_exclusive(;@) ;
sub vsearch_bin_inclusive(;@) ;
sub vsearch_insert_leftmost(;@) ;
sub vsearch_insert_rightmost(;@) ;
sub vsearch_match(;@) ;
sub vsearch_sample(;@) ;
sub whistogram(;@) ;
sub whistogram2d(;@) ;
sub wtstat(;@) ;
}
package PDL::ImageRGB::PDL {
sub PP;
}
package PDL::Math {
sub acos(;@) ;
sub acosh(;@) ;
sub asin(;@) ;
sub asinh(;@) ;
sub atan(;@) ;
sub atanh(;@) ;
sub badmask(;@) ;
sub bessj0(;@) ;
sub bessj1(;@) ;
sub bessjn(;@) ;
sub bessy0(;@) ;
sub bessy1(;@) ;
sub bessyn(;@) ;
sub ceil(;@) ;
sub cosh(;@) ;
sub erf(;@) ;
sub erfc(;@) ;
sub erfi(;@) ;
sub floor(;@) ;
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub isfinite(;@) ;
sub lgamma(;@) ;
sub ndtri(;@) ;
sub nelem;
sub polyroots(;@) ;
sub pow(;@) ;
sub rint(;@) ;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
sub simq(;@) ;
sub sinh(;@) ;
sub squaretotri(;@) ;
sub svd(;@) ;
sub tan(;@) ;
sub tanh(;@) ;
}
package PDL::Math::PDL {
sub PP;
}
package PDL::MatrixOps {
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
sub simq(;@) ;
sub squaretotri(;@) ;
sub svd(;@) ;
}
package PDL::MatrixOps::PDL {
sub PP;
}
package PDL::Minuit {
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub mn_abre(;@) ;
sub mn_cierra(;@) ;
sub mncont(;@) ;
sub mnemat(;@) ;
sub mnerrs(;@) ;
sub mnexcm(;@) ;
sub mninit(;@) ;
sub mnparm(;@) ;
sub mnpout(;@) ;
sub mnseti($) ;
sub mnstat(;@) ;
sub nelem;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
}
package PDL::NiceSlice {
sub filter_del() ;
sub filter_read(;$) ;
}
package PDL::Ops {
sub abs(;@) ;
sub and2(;@) ;
sub assgn(;@) ;
sub atan2(;@) ;
sub bitnot(;@) ;
sub cos(;@) ;
sub divide(;@) ;
sub eq(;@) ;
sub exp(;@) ;
sub ge(;@) ;
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub gt(;@) ;
sub ipow(;@) ;
sub le(;@) ;
sub log(;@) ;
sub lt(;@) ;
sub minus(;@) ;
sub modulo(;@) ;
sub mult(;@) ;
sub ne(;@) ;
sub nelem;
sub not(;@) ;
sub or2(;@) ;
sub plus(;@) ;
sub power(;@) ;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
sub shiftleft(;@) ;
sub shiftright(;@) ;
sub sin(;@) ;
sub spaceship(;@) ;
sub sqrt(;@) ;
sub xor(;@) ;
}
package PDL::Ops::PDL {
sub PP;
}
package PDL::Primitive {
sub _clump_int(;@) ;
sub affine;
sub affineinternal(;@) ;
sub append(;@) ;
sub axisvalues(;@) ;
sub converttypei;
sub crossp(;@) ;
sub diagonalI(;@) ;
sub flowconvert(;@) ;
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub histogram(;@) ;
sub histogram2d(;@) ;
sub identvaff(;@) ;
sub in(;@) ;
sub indadd(;@) ;
sub index1d(;@) ;
sub indexND;
sub indexNDb;
sub inner(;@) ;
sub inner2(;@) ;
sub inner2d(;@) ;
sub inner2t(;@) ;
sub innerwt(;@) ;
sub interpolate(;@) ;
sub lags(;@) ;
sub ndtri(;@) ;
sub nelem;
sub norm(;@) ;
sub oslice(;@) ;
sub outer(;@) ;
sub rotate(;@) ;
sub s_identity(;@) ;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
sub sliceb(;@) ;
sub splitdim(;@) ;
sub threadI(;@) ;
sub uniqvec;
sub unthread(;@) ;
sub vsearch_bin_exclusive(;@) ;
sub vsearch_bin_inclusive(;@) ;
sub vsearch_insert_leftmost(;@) ;
sub vsearch_insert_rightmost(;@) ;
sub vsearch_match(;@) ;
sub vsearch_sample(;@) ;
sub whistogram(;@) ;
sub whistogram2d(;@) ;
sub wtstat(;@) ;
}
package PDL::Primitive::PDL {
sub PP;
}
package PDL::Slatec {
sub andover(;@) ;
sub append(;@) ;
sub average(;@) ;
sub avgover(;@) ;
sub axislinvals;
sub axisvalues(;@) ;
sub bandover(;@) ;
sub borover(;@) ;
sub chbs(;@) ;
sub chcm(;@) ;
sub chfd(;@) ;
sub chfe(;@) ;
sub chia(;@) ;
sub chic(;@) ;
sub chid(;@) ;
sub chim(;@) ;
sub chsp(;@) ;
sub crossp(;@) ;
sub cumuprodover(;@) ;
sub cumusumover(;@) ;
sub daverage(;@) ;
sub davgover(;@) ;
sub dcumuprodover(;@) ;
sub dcumusumover(;@) ;
sub dprodover(;@) ;
sub dsumover(;@) ;
sub ezfftb(;@) ;
sub ezfftf(;@) ;
sub ezffti(;@) ;
sub geco(;@) ;
sub gedi(;@) ;
sub gefa(;@) ;
sub gesl(;@) ;
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub histogram(;@) ;
sub histogram2d(;@) ;
sub in(;@) ;
sub indadd(;@) ;
sub inner(;@) ;
sub inner2(;@) ;
sub inner2d(;@) ;
sub inner2t(;@) ;
sub innerwt(;@) ;
sub interpolate(;@) ;
sub intover(;@) ;
sub maximum(;@) ;
sub maximum_ind(;@) ;
sub maximum_n_ind(;@) ;
sub maxover(;@) ;
sub maxover_ind(;@) ;
sub maxover_n_ind(;@) ;
sub medover(;@) ;
sub minimum(;@) ;
sub minimum_ind(;@) ;
sub minimum_n_ind(;@) ;
sub minmaximum(;@) ;
sub minmaxover(;@) ;
sub minover(;@) ;
sub minover_ind(;@) ;
sub minover_n_ind(;@) ;
sub modeover(;@) ;
sub nelem;
sub norm(;@) ;
sub oddmedover(;@) ;
sub oddpctover(;@) ;
sub orover(;@) ;
sub outer(;@) ;
sub pcoef(;@) ;
sub pctover(;@) ;
sub poco(;@) ;
sub podi(;@) ;
sub polfit(;@) ;
sub prodover(;@) ;
sub pvalue(;@) ;
sub qsort(;@) ;
sub qsorti(;@) ;
sub qsortvec(;@) ;
sub qsortveci(;@) ;
sub rs(;@) ;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
sub sumover(;@) ;
sub svdc(;@) ;
sub uniqvec;
sub vsearch_bin_exclusive(;@) ;
sub vsearch_bin_inclusive(;@) ;
sub vsearch_insert_leftmost(;@) ;
sub vsearch_insert_rightmost(;@) ;
sub vsearch_match(;@) ;
sub vsearch_sample(;@) ;
sub whistogram(;@) ;
sub whistogram2d(;@) ;
sub wtstat(;@) ;
sub zcover(;@) ;
}
package PDL::Slatec::PDL {
sub PP;
}
package PDL::Slices {
sub _clump_int(;@) ;
sub affine;
sub affineinternal(;@) ;
sub blessed($) ;
sub converttypei;
sub diagonalI(;@) ;
sub flowconvert(;@) ;
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub identvaff(;@) ;
sub index1d(;@) ;
sub indexND;
sub indexNDb;
sub lags(;@) ;
sub nelem;
sub oslice(;@) ;
sub rotate(;@) ;
sub s_identity(;@) ;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
sub sliceb(;@) ;
sub splitdim(;@) ;
sub threadI(;@) ;
sub unthread(;@) ;
}
package PDL::Slices::PDL {
sub PP;
}
package PDL::Transform {
sub _clump_int(;@) ;
sub _rasc(;@) ;
sub acos(;@) ;
sub acosh(;@) ;
sub affine;
sub affineinternal(;@) ;
sub andover(;@) ;
sub append(;@) ;
sub asin(;@) ;
sub asinh(;@) ;
sub assgn(;@) ;
sub atan(;@) ;
sub atanh(;@) ;
sub average(;@) ;
sub avgover(;@) ;
sub axislinvals;
sub axisvalues(;@) ;
sub badflag($;$) ;
sub badmask(;@) ;
sub bandover(;@) ;
sub bessj0(;@) ;
sub bessj1(;@) ;
sub bessjn(;@) ;
sub bessy0(;@) ;
sub bessy1(;@) ;
sub bessyn(;@) ;
sub borover(;@) ;
sub bswap2(;@) ;
sub bswap4(;@) ;
sub bswap8(;@) ;
sub ceil(;@) ;
sub converttypei;
sub copybad(;@) ;
sub cosh(;@) ;
sub crossp(;@) ;
sub cumuprodover(;@) ;
sub cumusumover(;@) ;
sub daverage(;@) ;
sub davgover(;@) ;
sub dcumuprodover(;@) ;
sub dcumusumover(;@) ;
sub diagonalI(;@) ;
sub dprodover(;@) ;
sub dsumover(;@) ;
sub erf(;@) ;
sub erfc(;@) ;
sub erfi(;@) ;
sub floor(;@) ;
sub flowconvert(;@) ;
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub histogram(;@) ;
sub histogram2d(;@) ;
sub identvaff(;@) ;
sub in(;@) ;
sub indadd(;@) ;
sub index1d(;@) ;
sub indexND;
sub indexNDb;
sub inner(;@) ;
sub inner2(;@) ;
sub inner2d(;@) ;
sub inner2t(;@) ;
sub innerwt(;@) ;
sub interpolate(;@) ;
sub intover(;@) ;
sub ipow(;@) ;
sub isbad(;@) ;
sub isfinite(;@) ;
sub isgood(;@) ;
sub lags(;@) ;
sub lgamma(;@) ;
sub maximum(;@) ;
sub maximum_ind(;@) ;
sub maximum_n_ind(;@) ;
sub maxover(;@) ;
sub maxover_ind(;@) ;
sub maxover_n_ind(;@) ;
sub medover(;@) ;
sub minimum(;@) ;
sub minimum_ind(;@) ;
sub minimum_n_ind(;@) ;
sub minmaximum(;@) ;
sub minmaxover(;@) ;
sub minover(;@) ;
sub minover_ind(;@) ;
sub minover_n_ind(;@) ;
sub modeover(;@) ;
sub nbadover(;@) ;
sub ndtri(;@) ;
sub nelem;
sub ngoodover(;@) ;
sub norm(;@) ;
sub oddmedover(;@) ;
sub oddpctover(;@) ;
sub orover(;@) ;
sub oslice(;@) ;
sub outer(;@) ;
sub pctover(;@) ;
sub polyroots(;@) ;
sub pow(;@) ;
sub prodover(;@) ;
sub qsort(;@) ;
sub qsorti(;@) ;
sub qsortvec(;@) ;
sub qsortveci(;@) ;
sub rint(;@) ;
sub rotate(;@) ;
sub s_identity(;@) ;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
sub setbadif(;@) ;
sub setbadtonan(;@) ;
sub setbadtoval(;@) ;
sub setnantobad(;@) ;
sub setvaltobad(;@) ;
sub simq(;@) ;
sub sinh(;@) ;
sub sliceb(;@) ;
sub splitdim(;@) ;
sub squaretotri(;@) ;
sub sumover(;@) ;
sub svd(;@) ;
sub tan(;@) ;
sub tanh(;@) ;
sub threadI(;@) ;
sub uniqvec;
sub unthread(;@) ;
sub vsearch_bin_exclusive(;@) ;
sub vsearch_bin_inclusive(;@) ;
sub vsearch_insert_leftmost(;@) ;
sub vsearch_insert_rightmost(;@) ;
sub vsearch_match(;@) ;
sub vsearch_sample(;@) ;
sub whistogram(;@) ;
sub whistogram2d(;@) ;
sub wtstat(;@) ;
sub zcover(;@) ;
}
package PDL::Transform::PDL {
sub PP;
}
package PDL::Ufunc {
sub _clump_int(;@) ;
sub affine;
sub affineinternal(;@) ;
sub andover(;@) ;
sub average(;@) ;
sub avgover(;@) ;
sub bandover(;@) ;
sub borover(;@) ;
sub converttypei;
sub cumuprodover(;@) ;
sub cumusumover(;@) ;
sub daverage(;@) ;
sub davgover(;@) ;
sub dcumuprodover(;@) ;
sub dcumusumover(;@) ;
sub diagonalI(;@) ;
sub dprodover(;@) ;
sub dsumover(;@) ;
sub flowconvert(;@) ;
sub get_autopthread_actual;
sub get_autopthread_size;
sub get_autopthread_targ;
sub identvaff(;@) ;
sub index1d(;@) ;
sub indexND;
sub indexNDb;
sub intover(;@) ;
sub lags(;@) ;
sub maximum(;@) ;
sub maximum_ind(;@) ;
sub maximum_n_ind(;@) ;
sub maxover(;@) ;
sub maxover_ind(;@) ;
sub maxover_n_ind(;@) ;
sub medover(;@) ;
sub minimum(;@) ;
sub minimum_ind(;@) ;
sub minimum_n_ind(;@) ;
sub minmaximum(;@) ;
sub minmaxover(;@) ;
sub minover(;@) ;
sub minover_ind(;@) ;
sub minover_n_ind(;@) ;
sub modeover(;@) ;
sub nelem;
sub oddmedover(;@) ;
sub oddpctover(;@) ;
sub orover(;@) ;
sub oslice(;@) ;
sub pctover(;@) ;
sub prodover(;@) ;
sub qsort(;@) ;
sub qsorti(;@) ;
sub qsortvec(;@) ;
sub qsortveci(;@) ;
sub rotate(;@) ;
sub s_identity(;@) ;
sub set_autopthread_size;
sub set_autopthread_targ;
sub set_boundscheck($) ;
sub set_debugging($) ;
sub sliceb(;@) ;
sub splitdim(;@) ;
sub sumover(;@) ;
sub threadI(;@) ;
sub unthread(;@) ;
sub zcover(;@) ;
}
package PDL::Ufunc::PDL {
sub PP;
}
package POSIX {
sub ARG_MAX() ;
sub CHILD_MAX() ;
sub CLK_TCK() ;
sub EOTHER() ;
sub EPROCLIM() ;
sub LDBL_EPSILON() ;
sub LDBL_MAX() ;
sub LDBL_MIN() ;
sub LINK_MAX() ;
sub L_tmpnam;
sub NDEBUG;
sub OPEN_MAX() ;
sub STREAM_MAX() ;
sub S_ISBLK;
sub S_ISCHR;
sub S_ISDIR;
sub S_ISFIFO;
sub S_ISREG;
sub TZNAME_MAX() ;
sub WEXITSTATUS;
sub WIFEXITED;
sub WIFSIGNALED;
sub WIFSTOPPED;
sub WSTOPSIG;
sub WTERMSIG;
sub _exit;
sub abort;
sub abs;
sub access;
sub acos;
sub acosh;
sub alarm;
sub asctime;
sub asin;
sub asinh;
sub assert;
sub atan2;
sub atan;
sub atanh;
sub atexit;
sub atof;
sub atoi;
sub atol;
sub bsearch;
sub calloc;
sub cbrt;
sub ceil;
sub cfgetispeed;
sub cfgetospeed;
sub cfsetispeed;
sub cfsetospeed;
sub chdir;
sub chmod;
sub chown;
sub clearerr;
sub clock;
sub close;
sub closedir;
sub constant;
sub copysign;
sub cos;
sub cosh;
sub creat;
sub ctermid;
sub ctime;
sub cuserid;
sub difftime;
sub div;
sub dup2;
sub dup;
sub erf;
sub erfc;
sub errno;
sub execl;
sub execle;
sub execlp;
sub execv;
sub execve;
sub execvp;
sub exit;
sub exp2;
sub exp;
sub expm1;
sub fabs;
sub fclose;
sub fcntl;
sub fdim;
sub fdopen;
sub fegetround;
sub feof;
sub ferror;
sub fesetround;
sub fflush;
sub fgetc;
sub fgetpos;
sub fgets;
sub fileno;
sub floor;
sub fma;
sub fmax;
sub fmin;
sub fmod;
sub fopen;
sub fork;
sub fpathconf;
sub fpclassify;
sub fprintf;
sub fputc;
sub fputs;
sub fread;
sub free;
sub freopen;
sub frexp;
sub fscanf;
sub fseek;
sub fsetpos;
sub fstat;
sub fsync;
sub ftell;
sub fwrite;
sub getc;
sub getchar;
sub getcwd;
sub getegid;
sub getenv;
sub geteuid;
sub getgid;
sub getgrgid;
sub getgrnam;
sub getgroups;
sub getlogin;
sub getpayload;
sub getpgrp;
sub getpid;
sub getppid;
sub getpwnam;
sub getpwuid;
sub gets;
sub getuid;
sub gmtime;
sub hypot;
sub ilogb;
sub isatty;
sub isfinite;
sub isgreater;
sub isgreaterequal;
sub isinf;
sub isless;
sub islessequal;
sub islessgreater;
sub isnan;
sub isnormal;
sub issignaling;
sub isunordered;
sub j0;
sub j1;
sub jn;
sub kill;
sub labs;
sub lchown;
sub ldexp;
sub ldiv;
sub lgamma;
sub link;
sub localeconv;
sub localtime;
sub log10;
sub log1p;
sub log2;
sub log;
sub logb;
sub longjmp;
sub lrint;
sub lround;
sub lseek;
sub malloc;
sub mblen;
sub mbstowcs;
sub mbtowc;
sub memchr;
sub memcmp;
sub memcpy;
sub memmove;
sub memset;
sub mkdir;
sub mkfifo;
sub mktime;
sub modf;
sub nan;
sub nearbyint;
sub nextafter;
sub nexttoward;
sub nice;
sub offsetof;
sub open;
sub opendir;
sub pathconf;
sub pause;
sub pipe;
sub pow;
sub putc;
sub putchar;
sub puts;
sub qsort;
sub raise;
sub rand;
sub read;
sub readdir;
sub realloc;
sub remainder;
sub remove;
sub remquo;
sub rename;
sub rewind;
sub rewinddir;
sub rint;
sub rmdir;
sub round;
sub scalbn;
sub scanf;
sub setbuf;
sub setgid;
sub setjmp;
sub setlocale;
sub setpayload;
sub setpayloadsig;
sub setpgid;
sub setsid;
sub setuid;
sub setvbuf;
sub sigaction;
sub siglongjmp;
sub signal;
sub signbit;
sub sigpending;
sub sigprocmask;
sub sigsetjmp;
sub sigsuspend;
sub sin;
sub sinh;
sub sleep;
sub sqrt;
sub srand;
sub sscanf;
sub stat;
sub stderr;
sub stdin;
sub stdout;
sub strcat;
sub strchr;
sub strcmp;
sub strcoll;
sub strcpy;
sub strcspn;
sub strerror;
sub strftime;
sub strlen;
sub strncat;
sub strncmp;
sub strncpy;
sub strpbrk;
sub strrchr;
sub strspn;
sub strstr;
sub strtod;
sub strtok;
sub strtol;
sub strtold;
sub strtoul;
sub strxfrm;
sub sysconf;
sub system;
sub tan;
sub tanh;
sub tcdrain;
sub tcflow;
sub tcflush;
sub tcgetattr;
sub tcgetpgrp;
sub tcsendbreak;
sub tcsetattr;
sub tcsetpgrp;
sub tgamma;
sub time;
sub times;
sub tmpfile;
sub tmpnam;
sub trunc;
sub ttyname;
sub tzname;
sub tzset;
sub umask;
sub uname;
sub ungetc;
sub unlink;
sub utime;
sub vfprintf;
sub vprintf;
sub vsprintf;
sub wait;
sub waitpid;
sub wcstombs;
sub wctomb;
sub write;
sub y0;
sub y1;
sub yn;
}
package POSIX::SigSet {
sub addset;
sub delset;
sub emptyset;
sub fillset;
sub ismember;
sub new;
}
package POSIX::Termios {
sub getattr;
sub getcc;
sub getcflag;
sub getiflag;
sub getispeed;
sub getlflag;
sub getoflag;
sub getospeed;
sub new;
sub setattr;
sub setcc;
sub setcflag;
sub setiflag;
sub setispeed;
sub setlflag;
sub setoflag;
sub setospeed;
}
package Package::DeprecationManager {
sub _HASH0($) ;
sub any(&@) ;
sub subname;
}
package Package::Stash {
sub add_symbol;
sub get_all_symbols;
sub get_or_add_symbol;
sub get_symbol;
sub has_symbol;
sub list_all_symbols;
sub name;
sub namespace;
sub new;
sub remove_glob;
sub remove_symbol;
}
package Package::Stash::XS {
sub add_symbol;
sub get_all_symbols;
sub get_or_add_symbol;
sub get_symbol;
sub has_symbol;
sub list_all_symbols;
sub name;
sub namespace;
sub new;
sub remove_glob;
sub remove_symbol;
}
package PadWalker {
sub _upcontext;
sub closed_over;
sub peek_my;
sub peek_our;
sub peek_sub;
sub set_closed_over;
sub var_name;
}
package Params::Util {
sub _ARRAY($) ;
sub _ARRAY0($) ;
sub _ARRAYLIKE($) ;
sub _CODE($) ;
sub _CODELIKE($) ;
sub _HASH($) ;
sub _HASH0($) ;
sub _HASHLIKE($) ;
sub _INSTANCE($$) ;
sub _NUMBER($) ;
sub _REGEX($) ;
sub _SCALAR($) ;
sub _SCALAR0($) ;
sub _STRING($) ;
sub _XScompiled;
}
package Params::Util::PP {
sub looks_like_number($) ;
}
package PerlIO {
sub get_layers(*;@) ;
}
package PerlIO::Layer {
sub NoWarnings;
sub find;
}
package Pod::Find {
sub abs_path;
}
package Ref::Util::XS {
sub _using_custom_ops;
sub is_arrayref($) ;
sub is_blessed_arrayref($) ;
sub is_blessed_coderef($) ;
sub is_blessed_formatref($) ;
sub is_blessed_globref($) ;
sub is_blessed_hashref($) ;
sub is_blessed_ref($) ;
sub is_blessed_refref($) ;
sub is_blessed_scalarref($) ;
sub is_coderef($) ;
sub is_formatref($) ;
sub is_globref($) ;
sub is_hashref($) ;
sub is_ioref($) ;
sub is_plain_arrayref($) ;
sub is_plain_coderef($) ;
sub is_plain_formatref($) ;
sub is_plain_globref($) ;
sub is_plain_hashref($) ;
sub is_plain_ref($) ;
sub is_plain_refref($) ;
sub is_plain_scalarref($) ;
sub is_ref($) ;
sub is_refref($) ;
sub is_regexpref($) ;
sub is_scalarref($) ;
}
package Regexp {
sub DESTROY() ;
}
package Regexp::Util {
sub _regexp_engine_id;
sub constant;
sub is_regexp;
sub regexp_seen_evals;
}
package Scalar::Util {
sub blessed($) ;
sub dualvar($$) ;
sub isdual($) ;
sub isvstring($) ;
sub isweak($) ;
sub looks_like_number($) ;
sub openhandle($) ;
sub readonly($) ;
sub refaddr($) ;
sub reftype($) ;
sub tainted($) ;
sub unweaken($) ;
sub weaken($) ;
}
package Sereal::Decoder {
sub DESTROY;
sub bytes_consumed;
sub decode($$;$) ;
sub decode_only_header($$;$) ;
sub decode_only_header_with_offset($$$;$) ;
sub decode_sereal;
sub decode_sereal_with_header_data;
sub decode_with_header($$;$$) ;
sub decode_with_header_and_offset($$$;$$) ;
sub decode_with_offset($$$;$) ;
sub flags;
sub looks_like_sereal;
sub new;
sub regexp_internals_type;
sub scalar_looks_like_sereal($) ;
sub sereal_decode_only_header_with_object($$;$) ;
sub sereal_decode_only_header_with_offset_with_object($$$;$) ;
sub sereal_decode_with_header_and_offset_with_object($$$;$$) ;
sub sereal_decode_with_header_with_object($$;$$) ;
sub sereal_decode_with_object($$;$) ;
sub sereal_decode_with_offset_with_object($$$;$) ;
}
package Sereal::Encoder {
sub DESTROY;
sub encode($$;$) ;
sub encode_sereal;
sub encode_sereal_with_header_data;
sub flags;
sub new;
sub sereal_encode_with_object($$;$) ;
}
package Sereal::Encoder::_ptabletest {
sub test;
}
package Socket {
sub AF_802() ;
sub AF_AAL() ;
sub AF_CCITT() ;
sub AF_CHAOS() ;
sub AF_CTF() ;
sub AF_DATAKIT() ;
sub AF_DLI() ;
sub AF_ECMA() ;
sub AF_GOSIP() ;
sub AF_HYLINK() ;
sub AF_IMPLINK() ;
sub AF_ISO() ;
sub AF_LAST() ;
sub AF_LAT() ;
sub AF_LINK() ;
sub AF_NBS() ;
sub AF_NIT() ;
sub AF_NS() ;
sub AF_OSI() ;
sub AF_OSINET() ;
sub AF_PUP() ;
sub AF_USER() ;
sub AF_WAN() ;
sub AUTOLOAD;
sub EAI_BADHINTS() ;
sub EAI_PROTOCOL() ;
sub IPTOS_LOWDELAY() ;
sub IPTOS_MINCOST() ;
sub IPTOS_RELIABILITY() ;
sub IPTOS_THROUGHPUT() ;
sub IPV6_ADDRFROM() ;
sub MSG_BCAST() ;
sub MSG_BTAG() ;
sub MSG_CTLFLAGS() ;
sub MSG_CTLIGNORE() ;
sub MSG_EOF() ;
sub MSG_ETAG() ;
sub MSG_MAXIOVLEN() ;
sub MSG_MCAST() ;
sub MSG_URG() ;
sub MSG_WIRE() ;
sub PF_802() ;
sub PF_AAL() ;
sub PF_CCITT() ;
sub PF_CHAOS() ;
sub PF_CTF() ;
sub PF_DATAKIT() ;
sub PF_DLI() ;
sub PF_ECMA() ;
sub PF_GOSIP() ;
sub PF_HYLINK() ;
sub PF_IMPLINK() ;
sub PF_ISO() ;
sub PF_LAST() ;
sub PF_LAT() ;
sub PF_LINK() ;
sub PF_NBS() ;
sub PF_NIT() ;
sub PF_NS() ;
sub PF_OSI() ;
sub PF_OSINET() ;
sub PF_PUP() ;
sub PF_USER() ;
sub PF_WAN() ;
sub SCM_CONNECT() ;
sub SCM_CREDS() ;
sub SO_BACKLOG() ;
sub SO_CHAMELEON() ;
sub SO_DGRAM_ERRIND() ;
sub SO_DONTLINGER() ;
sub SO_FAMILY() ;
sub SO_PASSIFNAME() ;
sub SO_PROTOTYPE() ;
sub SO_STATE() ;
sub SO_USELOOPBACK() ;
sub SO_XOPEN() ;
sub SO_XSE() ;
sub TCP_CONNECTIONTIMEOUT() ;
sub TCP_INIT_CWND() ;
sub TCP_KEEPALIVE() ;
sub TCP_MAXRT() ;
sub TCP_NOOPT() ;
sub TCP_NOPUSH() ;
sub TCP_SACK_ENABLE() ;
sub TCP_STDURG() ;
sub getaddrinfo;
sub getnameinfo;
sub inet_aton;
sub inet_ntoa;
sub inet_ntop;
sub inet_pton;
sub pack_ip_mreq;
sub pack_ip_mreq_source;
sub pack_ipv6_mreq;
sub pack_sockaddr_in6;
sub pack_sockaddr_in;
sub pack_sockaddr_un;
sub sockaddr_family;
sub unpack_ip_mreq;
sub unpack_ip_mreq_source;
sub unpack_ipv6_mreq;
sub unpack_sockaddr_in6;
sub unpack_sockaddr_in;
sub unpack_sockaddr_un;
}
package Storable {
sub dclone($) ;
sub init_perinterp() ;
sub is_retrieving() ;
sub is_storing() ;
sub last_op_in_netorder() ;
sub mretrieve($;$) ;
sub mstore($) ;
sub net_mstore($) ;
sub net_pstore($$) ;
sub pretrieve($;$) ;
sub pstore($$) ;
sub stack_depth() ;
sub stack_depth_hash() ;
}
package Sub::Identify {
sub get_code_info($) ;
sub get_code_location($) ;
sub is_sub_constant($) ;
}
package Sub::Name {
sub subname;
}
package Sub::Util {
sub set_prototype;
sub set_subname;
sub subname;
}
package Template {
sub blessed($) ;
}
package Template::Document {
sub is_utf8;
}
package Template::Filters {
sub blessed($) ;
}
package Template::Service {
sub blessed($) ;
}
package Template::Stash {
sub blessed($) ;
sub reftype($) ;
}
package Template::Stash::XS {
sub get;
sub set;
}
package Template::VMethods {
sub blessed($) ;
sub looks_like_number($) ;
}
package Term::ReadKey {
sub GetControlChars;
sub GetSpeed;
sub GetTermSizeGSIZE;
sub GetTermSizeGWINSZ;
sub GetTermSizeVIO;
sub GetTermSizeWin32;
sub SetControlChars;
sub SetReadMode;
sub SetTerminalSize;
sub Win32PeekChar;
sub blockoptions;
sub pollfile;
sub selectfile;
sub setnodelay;
sub termoptions;
sub termsizeoptions;
}
package Test2::API {
sub blessed($) ;
sub weaken($) ;
}
package Test2::API::Context {
sub blessed($) ;
sub weaken($) ;
}
package Test2::API::Instance {
sub reftype($) ;
}
package Test2::Event {
sub blessed($) ;
sub reftype($) ;
}
package Test2::Event::V2 {
sub reftype($) ;
}
package Test2::Hub {
sub first(&@) ;
sub weaken($) ;
}
package Test2::Util::Facets2Legacy {
sub blessed($) ;
}
package Test2::Util::HashBase {
sub _isa($;$) ;
}
package Test::Builder {
sub blessed($) ;
sub reftype($) ;
sub weaken($) ;
}
package Test::LeakTrace {
sub CLONE;
sub _finish;
sub _runops_installed;
sub _start;
sub count_sv;
}
package Text::CharWidth {
sub mblen;
sub mbswidth;
sub mbwidth;
}
package Text::Iconv {
sub new($$$) ;
sub raise_error(;@) ;
}
package Text::IconvPtr {
sub DESTROY($) ;
sub convert($$) ;
sub get_attr($$) ;
sub raise_error($;@) ;
sub retval($) ;
sub set_attr($$$) ;
}
package Text::Levenshtein::Flexible {
sub DESTROY($) ;
sub distance($$$) ;
sub distance_c($$$) ;
sub distance_l($$$) ;
sub distance_l_all;
sub distance_lc($$$) ;
sub distance_lc_all;
sub levenshtein($$) ;
sub levenshtein_c($$$$$) ;
sub levenshtein_l($$$) ;
sub levenshtein_lc($$$$$$) ;
sub new;
}
package Try::Tiny {
sub _subname;
}
package UNIVERSAL {
sub DOES;
sub VERSION;
sub can;
sub isa;
}
package Unicode::UTF8 {
sub decode_utf8;
sub encode_utf8;
sub valid_utf8;
}
package Variable::Magic {
sub CLONE;
sub _wizard;
sub cast(\[$@%&*]$@) ;
sub dispell(\[$@%&*]$) ;
sub getdata(\[$@%&*]$) ;
}
package XML::Parser::Expat {
sub DefaultCurrent;
sub Do_External_Parse;
sub ElementIndex;
sub ErrorString;
sub FreeEncoding;
sub GenerateNSName;
sub GetBase;
sub GetCurrentByteIndex;
sub GetCurrentColumnNumber;
sub GetCurrentLineNumber;
sub GetErrorCode;
sub GetSpecifiedAttributeCount;
sub LoadEncoding;
sub OriginalString;
sub ParseDone;
sub ParsePartial;
sub ParseStream;
sub ParseString;
sub ParserCreate;
sub ParserFree;
sub ParserRelease;
sub PositionContext;
sub RecognizedString;
sub SetAttListDeclHandler;
sub SetBase;
sub SetCharacterDataHandler;
sub SetCommentHandler;
sub SetDefaultHandler;
sub SetDoctypeHandler;
sub SetElementDeclHandler;
sub SetEndCdataHandler;
sub SetEndDoctypeHandler;
sub SetEndElementHandler;
sub SetEntityDeclHandler;
sub SetExtEntFinishHandler;
sub SetExternalEntityRefHandler;
sub SetNotationDeclHandler;
sub SetProcessingInstructionHandler;
sub SetStartCdataHandler;
sub SetStartElementHandler;
sub SetUnparsedEntityDeclHandler;
sub SetXMLDeclHandler;
sub SkipUntil;
sub UnsetAllHandlers;
}
package XML::Twig {
sub _utf8_off($) ;
sub _utf8_on($) ;
sub bytes2str($$;$) ;
sub decode($$;$) ;
sub decode_utf8($;$) ;
sub encode($$;$) ;
sub encode_utf8($) ;
sub from_to($$$;$) ;
sub is_16bit;
sub is_8bit;
sub is_utf8($;$) ;
sub isa;
sub str2bytes($$;$) ;
sub utf8_downgrade;
sub utf8_upgrade;
sub weaken($) ;
}
package XML::Twig::Elt {
sub isa;
sub weaken($) ;
}
package XML::Twig::Entity_list {
sub isa;
}
package YAML::XS::LibYAML {
sub Dump;
sub Load;
sub libyaml_version;
}
package attributes {
sub _fetch_attrs($) ;
sub _guess_stash($) ;
sub _modify_attrs;
sub reftype($) ;
}
package bytes {
sub chr(_) ;
sub index($$;$) ;
sub length(_) ;
sub ord(_) ;
sub rindex($$;$) ;
sub substr($$;$$) ;
}
package constant {
sub _make_const(\[$@]) ;
}
package mro {
sub _nextcan;
sub get_isarev($) ;
sub get_linear_isa($;$) ;
sub get_mro($) ;
sub get_pkg_gen($) ;
sub invalidate_all_method_caches() ;
sub is_universal($) ;
sub method_changed_in($) ;
sub set_mro($$) ;
}
package re {
sub install;
sub is_regexp($) ;
sub regexp_pattern($) ;
sub regmust($) ;
sub regname(;$$) ;
sub regnames(;$) ;
sub regnames_count() ;
}
package threads {
sub DESTROY;
sub join;
}
package utf8 {
sub decode;
sub downgrade;
sub encode;
sub is_utf8;
sub native_to_unicode;
sub unicode_to_native;
sub upgrade;
sub valid;
}
package version {
sub _VERSION;
sub boolean;
sub declare;
sub is_alpha;
sub is_qv;
sub new;
sub noop;
sub normal;
sub numify;
sub parse;
sub qv;
sub stringify;
sub vcmp;
}
